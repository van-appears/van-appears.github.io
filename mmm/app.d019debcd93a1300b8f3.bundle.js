!function(t){var n={};function e(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=t,e.c=n,e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:o})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)e.d(o,r,function(n){return t[n]}.bind(null,r));return o},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=6)}([function(t,n){t.exports={DELAY:"delay",ECHO:"echo",EMPTY:"empty",FILTER:"filter",GAIN:"gain",MICROPHONE:"microphone",OSCILLATOR:"oscillator",FALLBACK_DELAY:1e3,MAX_DELAY_SECONDS:10,SEQUENCE_SEPARATOR:"---seq "}},function(t,n){t.exports=class{constructor(t,n,e,o,r){this.ctx=t,this.model=n,this.idx=e,this.type=o,this.playable=r,this.playing=!1}connector(){return{connect(){},disconnect(){}}}disconnectOtherFromParam(t,n,e){"number"==typeof t&&(this.model.items[t].connector().disconnect(n),delete this.model.connections[this.idx][`${this.idx}_${e}`])}connectOtherToParam(t,n,e){"number"==typeof t&&(this.model.items[t].connector().connect(n),this.model.connections[this.idx][`${t}_${e}`]=n)}replaceOtherOnParam(t,n,e,o){this.disconnectOtherFromParam(t,e,o),this.connectOtherToParam(n,e,o)}play(t){this.playable&&(t?(this.connector().connect(this.ctx.destination),this.playing=!0):(this.connector().disconnect(this.ctx.destination),this.playing=!1))}label(){return`${this.idx} ${this.type}`}title(){return this.label()}controls(){return[]}setValuesTo(t){const n=this.controls()||[],e=t.controls()||[];for(let t=0;t<n.length;t++){if(!e[t])return;n[t].type===e[t].type&&e[t].set(n[t].get())}}describe(){return this.controls().filter(t=>void 0!==t.get()&&""!==t.get()).map(t=>`${this.idx} ${t.short} ${t.get()}`)}destroy(){this.playing&&this.play(!1)}asOption(){return{value:this.idx,label:this.label(),type:this.type}}}},function(t,n,e){const o=e(3);t.exports={windows:{graphButton:o("button[value=graph]"),sequencerButton:o("button[value=sequencer]"),backupButton:o("button[value=export]")},graph:{area:o(".graph"),changeButton:o(".confirm button[value=change]"),cancelButton:o(".confirm button[value=cancel]"),playLabel:o("label[for=play]"),playButton:o("#play"),optionButtons:o(".options button"),convertButtons:o(".nodes button"),controlsArea:o(".controls"),confirmArea:o(".confirm"),componentLabel:o(".header .name"),controls:[{area:o(".controls .control:nth-child(1)"),shortText:o(".controls .control:nth-child(1) .short"),longText:o(".controls .control:nth-child(1) .long"),input:o(".controls .control:nth-child(1) input"),select:o(".controls .control:nth-child(1) select")},{area:o(".controls .control:nth-child(2)"),shortText:o(".controls .control:nth-child(2) .short"),longText:o(".controls .control:nth-child(2) .long"),input:o(".controls .control:nth-child(2) input"),select:o(".controls .control:nth-child(2) select")},{area:o(".controls .control:nth-child(3)"),shortText:o(".controls .control:nth-child(3) .short"),longText:o(".controls .control:nth-child(3) .long"),input:o(".controls .control:nth-child(3) input"),select:o(".controls .control:nth-child(3) select")},{area:o(".controls .control:nth-child(4)"),shortText:o(".controls .control:nth-child(4) .short"),longText:o(".controls .control:nth-child(4) .long"),input:o(".controls .control:nth-child(4) input"),select:o(".controls .control:nth-child(4) select")},{area:o(".controls .control:nth-child(5)"),shortText:o(".controls .control:nth-child(5) .short"),longText:o(".controls .control:nth-child(5) .long"),input:o(".controls .control:nth-child(5) input"),select:o(".controls .control:nth-child(5) select")},{area:o(".controls .control:nth-child(6)"),shortText:o(".controls .control:nth-child(6) .short"),longText:o(".controls .control:nth-child(6) .long"),input:o(".controls .control:nth-child(6) input"),select:o(".controls .control:nth-child(6) select")}]},sequencer:{area:o(".sequencer"),delayField:o("#delay"),startStopButton:o("#startstop"),content:o("#sequence"),delay:o("#delay")},backup:{area:o(".backup"),importButton:o("#import"),copyButton:o("#copy"),resetButton:o("#reset"),content:o("#backupContent")}}},function(t,n){t.exports=function(t){function n(t){const n=t.className||"";return t.addClass=function(t){this.className=`${n} ${t||""}`},t.show=function(t){t?this.removeAttribute("data-hide"):this.setAttribute("data-hide","true")},"BUTTON"===t.tagName?(t.selected=function(){this.setAttribute("data-selected","true")},t.unselect=function(){this.removeAttribute("data-selected")}):"INPUT"===t.tagName&&"checkbox"===t.type?t.checked=!1:"SELECT"===t.tagName&&(t.value=null),t}const e=document.querySelectorAll(t);return e.length>1?(o=e,Array.from(o).map(n)):n(e[0]);var o}},function(t,n){t.exports=function(t){const{items:n}=t;return function(e,o,r){if(e<0)return;if("control"===o&&e>0)return void(n[e]=t.types[r](e));if("play"===o)return void n[e].play(!0);if("stop"===o)return void n[e].play(!1);const i=(n[e].controls()||[]).find(t=>t.short===o)||{};if("val"===i.type){const t=parseFloat(r);t&&i.set(t)}else if("in"===i.type){const t=parseInt(r);t&&e!==t&&i.set(t)}else"type"===i.type&&i.set(r)}}},function(t,n,e){const o=e(0),r=e(19),i=e(1);t.exports=function(t){const{audioCtx:n,items:e,mediaStream:c}=t;let s=0;c&&!e[0]&&(s=1,e[0]=r(n,t,0,c));for(let r=s;r<10;r++)e[r]&&e[r].destroy(),e[r]=new i(n,t,r,o.EMPTY,!1)}},function(t,n,e){"use strict";e.r(n);e(7),e(21)},function(t,n,e){const o=e(8),r=e(14),i=e(15),c=e(17),s=e(18),a=e(20),l=e(5);window.onload=function(){const t=document.querySelector(".wrapper");r((function(n){document.body.className="started",t.style="";const e=o(n);l(e),i(e),c(e),s(e),a(e)}))}},function(t,n,e){const o=e(9),r=e(10),i=e(11),c=e(12),s=e(13);t.exports=function(t){const n=[];function e(t,e,o){n.forEach(n=>n(t,e,o))}const a={set:(t,n,o)=>(t[n]=o,e(t,n,o),!0)},l=new(window.AudioContext||window.webkitAudioContext),u={},p={currentIdx:0,audioCtx:l,mediaStream:t,items:new Proxy(new Array(10),a),types:u,connections:new Array(10).fill(0).map(t=>({})),dispatch:e,update(t,n){this[t]=n,this.dispatch(this,t,n)},register(t){n.push(t)}};return u.oscillator=o(l,p),u.filter=r(l,p),u.delay=i(l,p),u.echo=c(l,p),u.gain=s(l,p),window.model=p,p}},function(t,n,e){const o=e(1),r=e(0),i=["sawtooth","sine","square","triangle"];class c extends o{constructor(t,n,e){super(t,n,e,r.OSCILLATOR,!0),this.osc=t.createOscillator(),this.gain=t.createGain(),this.delay=t.createDelay(),this.osc.connect(this.gain),this.gain.connect(this.delay),this.osc.start(0),this.delay.delayTime.setTargetAtTime(.001,0,0),this._controls=this.initControls(),this._controls[0].set(100),this._controls[2].set(1),this._controls[4].set("sine")}title(){return`${this.idx} ${this.type} ${this.osc.type}`}connector(){return this.delay}subtype(){const t=this;return{values:[],set(n){t.osc.type=n},get:()=>t.osc.type}}destroy(){super.destroy(),this.disconnectOtherFromParam(this.freqConnectValue,this.osc.frequency),this.disconnectOtherFromParam(this.gainConnectValue,this.gain.gain),this.osc.stop()}controls(){return this._controls}initControls(){const t=this;return[{type:"val",short:"f",label:"Freq",set(n){t.freqValue=n,t.osc.frequency.setTargetAtTime(n,0,0)},get:()=>t.freqValue},{type:"in",short:"fm",label:"Freq Mod",set(n){t.replaceOtherOnParam(t.freqConnectValue,n,t.osc.frequency,"freqConnect"),t.freqConnectValue=n},get:()=>t.freqConnectValue},{type:"val",short:"g",label:"Gain",set(n){t.gainValue=n,t.gain.gain.setTargetAtTime(n,0,0)},get:()=>t.gainValue},{type:"in",short:"gm",label:"Gain Mod",set(n){t.replaceOtherOnParam(t.gainConnectValue,n,t.gain.gain,"gainConnect"),t.gainConnectValue=n},get:()=>t.gainConnectValue},{type:"type",short:"t",label:"Type",values:i,set(n){i.includes(n)&&(t.osc.type=n)},get:()=>t.osc.type}]}}t.exports=function(t,n){return function(e){return new c(t,n,e)}}},function(t,n,e){const o=e(1),r=e(0),i=["lowpass","highpass","bandpass","notch"];class c extends o{constructor(t,n,e){super(t,n,e,r.FILTER,!0),this.model=n,this.filter=t.createBiquadFilter(),this._controls=this.initControls(),this._controls[0].set(100),this._controls[2].set(.707),this._controls[4].set("lowpass")}title(){return`${this.idx} ${this.type} ${this.filter.type}`}connector(){return this.filter}controls(){return this._controls}initControls(){const t=this;return[{type:"val",short:"f",label:"Freq",set(n){t.freqValue=n,t.filter.frequency.setTargetAtTime(n,0,0)},get:()=>t.freqValue},{type:"in",short:"fm",label:"Freq Mod",set(n){t.replaceOtherOnParam(t.freqConnectValue,n,t.filter.frequency,"freqConnect"),t.freqConnectValue=n},get:()=>t.freqConnectValue},{type:"val",short:"q",label:"Q",set(n){t.qValue=n,t.filter.Q.setTargetAtTime(n,0,0)},get:()=>t.qValue},{type:"in",short:"qm",label:"Q Mod",set(n){t.replaceOtherOnParam(t.qConnectValue,n,t.filter.Q,"qConnect"),t.qConnectValue=n},get:()=>t.qConnectValue},{type:"type",short:"t",label:"Type",values:i,set(n){i.includes(n)&&(t.filter.type=n)},get:()=>t.filter.type},{type:"in",short:"i",label:"Input",set(n){t.replaceOtherOnParam(t.inputConnectValue,n,t.filter,"input"),t.inputConnectValue=n},get:()=>t.inputConnectValue}]}destroy(){super.destroy(),this.disconnectOtherFromParam(this.freqConnectValue,this.filter.frequency),this.disconnectOtherFromParam(this.qConnectValue,this.filter.Q),this.disconnectOtherFromParam(this.inputConnectValue,this.filter)}}t.exports=function(t,n){return function(e){return new c(t,n,e)}}},function(t,n,e){const o=e(1),r=e(0);class i extends o{constructor(t,n,e){super(t,n,e,r.DELAY,!0),this.delay=t.createDelay(r.MAX_DELAY_SECONDS),this._controls=this.initControls(),this._controls[0].set(1)}connector(){return this.delay}controls(){return this._controls}initControls(){const t=this;return[{type:"val",short:"t",label:"Time <= 10s",max:r.MAX_DELAY_SECONDS,set(n){t.delayTimeValue=n,t.delay.delayTime.setTargetAtTime(1e3*n,0,0)},get:()=>t.delayTimeValue},{type:"in",short:"i",label:"Input",set(n){t.replaceOtherOnParam(t.inputConnectValue,n,t.delay,"input"),t.inputConnectValue=n},get:()=>t.inputConnectValue}]}destroy(){super.destroy(),this.disconnectOtherFromParam(this.inputConnectValue,this.delay)}}t.exports=function(t,n){return function(e){return new i(t,n,e)}}},function(t,n,e){const o=e(1),r=e(0);class i extends o{constructor(t,n,e){super(t,n,e,r.ECHO,!0),this.delay=t.createDelay(),this.gain=t.createGain(),this.delay.connect(this.gain),this.gain.connect(this.delay),this._controls=this.initControls(),this._controls[0].set(1e3),this._controls[1].set(.5)}connector(){return this.gain}controls(){return this._controls}initControls(){const t=this;return[{type:"val",short:"t",label:"Time <= 10s",max:r.MAX_DELAY_SECONDS,set(n){t.delayTimeValue=n,t.delay.delayTime.setTargetAtTime(1e3*n,0,0)},get:()=>t.delayTimeValue},{type:"val",short:"s",label:"Sustain",set(n){t.gainValue=n,t.gain.gain.setTargetAtTime(n,0,0)},get:()=>t.gainValue},{type:"in",short:"i",label:"Input",set(n){t.replaceOtherOnParam(t.inputConnectValue,n,t.delay,"input"),t.inputConnectValue=n},get:()=>t.inputConnectValue}]}destroy(){super.destroy(),this.disconnectOtherFromParam(this.inputConnectValue,this.delay)}}t.exports=function(t,n){return function(e){return new i(t,n,e)}}},function(t,n,e){const o=e(1),r=e(0);class i extends o{constructor(t,n,e){super(t,n,e,r.GAIN,!0),this.gain=t.createGain(),this._controls=this.initControls(),this._controls[0].set(1)}connector(){return this.gain}controls(){return this._controls}initControls(){const t=this;return[{type:"val",short:"g",label:"Gain",set(n){t.gainValue=n,t.gain.gain.setTargetAtTime(n,0,0)},get:()=>t.gainValue},{type:"in",short:"gm",label:"Gain Mod",set(n){t.replaceOtherOnParam(t.gainConnectValue,n,t.gain.gain,"gainConnect"),t.gainConnectValue=n},get:()=>t.gainConnectValue},{type:"in",short:"i",label:"Input",set(n){t.replaceOtherOnParam(t.inputConnectValue,n,t.gain,"input"),t.inputConnectValue=n},get:()=>t.inputConnectValue}]}destroy(){super.destroy(),this.disconnectOtherFromParam(this.inputConnectValue,this.gain)}}t.exports=function(t,n){return function(e){return new i(t,n,e)}}},function(t,n){t.exports=function(t){const n={audio:!0,video:!1};navigator.mediaDevices?navigator.mediaDevices.getUserMedia(n).then((function(n){t(n)})).catch((function(n){console.log(n),t(null)})):(console.log("navigator.mediaDevices not supported"),t(null))}},function(t,n,e){const o=e(0),r=e(16),i=e(2).graph;t.exports=function(t){const{items:n,types:e,connections:c}=t;let s=null,a=null,l=null;function u(t){const e=n[t].type+(n[t].playing?" playing":"");i.optionButtons[t].className=e,i.optionButtons[t].setAttribute("title",e)}function p(t){s=n[t],i.componentLabel.textContent=s.label();const{playing:e,playable:c}=s;c?(i.playButton.checked=e,i.playButton.show(!0),i.playLabel.show(!0)):(i.playButton.show(!1),i.playLabel.show(!1)),i.convertButtons.forEach(t=>{t.value===s.type?t.selected():t.unselect()});const a=s.controls();for(let e=0;e<6;e++){const c=a[e],s=i.controls[e];s.area.show(!1),c&&(s.shortText.textContent=`(${c.short})`,s.longText.textContent=c.label,s.input.show(!1),s.select.show(!1),"val"===c.type?(s.input.value=c.get(),s.input.show(!0)):"in"===c.type?(r(s.select,c.get(),n.map(t=>t.asOption()).filter(n=>n.value!==t&&n.type!==o.EMPTY),!0),s.select.show(!0)):"type"===c.type&&(r(s.select,c.get(),c.values.map(t=>({value:t,label:t}))),s.select.show(!0)),s.area.show(!0))}}function h(){const o=e[a](t.currentIdx);l.setValuesTo(o);const r=t.connections[t.currentIdx];Object.keys(r).forEach(t=>{l.connector().connect(r[t]),o.connector().connect(r[t])}),l.destroy(),n[t.currentIdx]=o,p(t.currentIdx),u(t.currentIdx)}i.playButton.onclick=function(n){s&&(s.play(n.target.checked),u(t.currentIdx))},i.optionButtons.forEach((n,e)=>{n.onclick=function(){const o=t.currentIdx;t.update("currentIdx",e),n.selected(),i.optionButtons[o].unselect()}}),i.controls.forEach((t,n)=>{t.select.onchange=function(t){s&&(s.controls()[n].set(t.target.value),i.componentLabel.textContent=s.label())},t.input.onchange=function(e){if(s){const o=e.target.value;let r=parseFloat(o);const c=s.controls()[n];c.max&&r&&r>c.max&&(r=c.max,t.input.value=r),s.controls()[n].set(r||o),i.componentLabel.textContent=s.label()}}}),i.convertButtons.forEach((e,r)=>{e.onclick=function(e){if(s){if(a=e.target.value,l=n[t.currentIdx],l.type===a||l.type===o.MICROPHONE)return;l.type===o.EMPTY?h():(i.changeButton.textContent="Change to "+a,i.controlsArea.show(!1),i.confirmArea.show(!0))}}}),i.changeButton.onclick=function(t){i.controlsArea.show(!0),i.confirmArea.show(!1),h()},i.cancelButton.onclick=function(n){i.controlsArea.show(!0),i.confirmArea.show(!1),p(t.currentIdx)},t.register((t,n,e)=>{Array.isArray(t)?u(n):"currentIdx"===n?p(e):"window"===n&&i.area.show("graph"===e)}),t.update("currentIdx",0)}},function(t,n){t.exports=function(t,n,e,o){if(t.replaceChildren(),o){const e=document.createElement("option");e.setAttribute("value",""),e.text="-",null!=n&&""!==n||e.setAttribute("selected",!0),t.appendChild(e)}for(let o=0;o<e.length;o++){const{value:r,label:i}=e[o],c=document.createElement("option");c.setAttribute("value",r),c.text=i,String(n)===String(r)&&c.setAttribute("selected",!0),t.appendChild(c)}}},function(t,n,e){e(3);const o=e(4),{FALLBACK_DELAY:r,MAX_DELAY_SECONDS:i}=e(0),c=/^([0-9]{1}) *([a-zA-Z]{1,2}) *([0-9.]*)$/,s=/^([a-zA-Z]{1,2}) *([0-9.]*)$/,a=/^w *([0-9.]*)(.*)$/,l=e(2).sequencer;t.exports=function(t){const n=o(t);let e=0,i=null,u=!1,p=-1;function h(){const t=l.delay.value;return 1e3*parseFloat(t)||r}function d(){const t=l.content.value.split("\n");e>=t.length&&(e=0);const o=(t[e]||"").split(";");for(let t of o){const o=c.exec(t.trim());if(o){const[,t,e,r]=o;n(t,e,r),p=t}else{const o=s.exec(t.trim());if(o){const[,t,e]=o;n(p,t,e)}else{const n=a.exec(t.trim());if(n){const[,t,o]=n,r="ms"===o?Math.floor(parseFloat(t)):Math.floor(1e3*parseFloat(t));return e++,void(i=setTimeout(d,r))}}}}u&&(e++,i=setTimeout(d,h()))}l.startStopButton.onclick=function(){u=!u,u?(l.startStopButton.textContent="Stop",i=setTimeout(d,h())):(l.startStopButton.textContent="Start",clearTimeout(i))},t.register((t,n,e)=>{"window"===n&&l.area.show("sequencer"===e)})}},function(t,n,e){const o=e(0),r=e(4),i=e(5),c=/^([0-9]{1}) *([a-zA-Z]*) *(.*)$/,s=e(2),{backup:a,sequencer:l}=s;t.exports=function(t){const n=r(t);function e(){const n=t.items.filter(t=>![o.EMPTY,o.MICROPHONE].includes(t.type)).map(t=>`${t.idx} control ${t.type}`),e=t.items.map(t=>t.describe().join("\n")).filter(t=>t),r=t.items.filter(t=>t.type!==o.EMPTY&&t.playing).map(t=>t.idx+" play");let i=l.content.value||"";i.length>0&&(i="\n"+o.SEQUENCE_SEPARATOR+l.delayField.value+"\n"+i),a.content.value=n.concat(e).concat(r).join("\n")+i}function s(){i(t),l.delayField.value="",l.content.value=""}a.resetButton.onclick=function(){s(),e(),t.update("currentIdx",0)},a.importButton.onclick=function(){const e=a.content.value,[r,i]=e.split(o.SEQUENCE_SEPARATOR),u=r.split("\n");s(),u.forEach(t=>{t.split(";").forEach(t=>{const e=c.exec(t.trim());if(e){const[,t,o,r]=e;n(t,o,r)}})});const[p,h]=i.split(/\n(.*)/s);l.delayField.value=p,l.content.value=h,t.update("currentIdx",0)},a.copyButton.onclick=function(){const t=a.content;t.select(),t.setSelectionRange(0,99999),navigator.clipboard.writeText(t.value)},t.register((t,n,o)=>{"window"===n&&("backup"===o?(a.area.show(!0),e()):a.area.show(!1))})}},function(t,n,e){const o=e(1),r=e(0);class i extends o{constructor(t,n,e,o){super(t,n,e,r.MICROPHONE,!0),this.input=t.createMediaStreamSource(o),this.gain=t.createGain(),this.input.connect(this.gain),this._controls=this.initControls(),this._controls[0].set(1)}connector(){return this.gain}initControls(){const t=this;return[{type:"val",short:"g",label:"Gain",set(n){t.gainValue=n,t.gain.gain.setTargetAtTime(n,0,0)},get:()=>t.gainValue}]}controls(){return this._controls}destroy(){}}t.exports=function(t,n,e,o){return new i(t,n,e,o)}},function(t,n,e){const o=e(2).windows;t.exports=function(t){const{graphButton:n,sequencerButton:e,backupButton:r}=o;n.onclick=function(){n.selected(),e.unselect(),r.unselect(),t.update("window","graph")},e.onclick=function(){n.unselect(),e.selected(),r.unselect(),t.update("window","sequencer")},r.onclick=function(){n.unselect(),e.unselect(),r.selected(),t.update("window","backup")},n.click()}},function(t,n,e){var o=e(22),r=e(23);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[t.i,r,""]]);var i={insert:"head",singleton:!1};o(r,i);t.exports=r.locals||{}},function(t,n,e){"use strict";var o,r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},i=function(){var t={};return function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}t[n]=e}return t[n]}}(),c=[];function s(t){for(var n=-1,e=0;e<c.length;e++)if(c[e].identifier===t){n=e;break}return n}function a(t,n){for(var e={},o=[],r=0;r<t.length;r++){var i=t[r],a=n.base?i[0]+n.base:i[0],l=e[a]||0,u="".concat(a," ").concat(l);e[a]=l+1;var p=s(u),h={css:i[1],media:i[2],sourceMap:i[3]};-1!==p?(c[p].references++,c[p].updater(h)):c.push({identifier:u,updater:g(h,n),references:1}),o.push(u)}return o}function l(t){var n=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var r=e.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(t){n.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(n);else{var c=i(t.insert||"head");if(!c)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");c.appendChild(n)}return n}var u,p=(u=[],function(t,n){return u[t]=n,u.filter(Boolean).join("\n")});function h(t,n,e,o){var r=e?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=p(n,r);else{var i=document.createTextNode(r),c=t.childNodes;c[n]&&t.removeChild(c[n]),c.length?t.insertBefore(i,c[n]):t.appendChild(i)}}function d(t,n,e){var o=e.css,r=e.media,i=e.sourceMap;if(r?t.setAttribute("media",r):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var f=null,y=0;function g(t,n){var e,o,r;if(n.singleton){var i=y++;e=f||(f=l(n)),o=h.bind(null,e,i,!1),r=h.bind(null,e,i,!0)}else e=l(n),o=d.bind(null,e,n),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)};return o(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;o(t=n)}else r()}}t.exports=function(t,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=r());var e=a(t=t||[],n);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<e.length;o++){var r=s(e[o]);c[r].references--}for(var i=a(t,n),l=0;l<e.length;l++){var u=s(e[l]);0===c[u].references&&(c[u].updater(),c.splice(u,1))}e=i}}}},function(t,n,e){var o=e(24),r=e(25),i=e(26);n=o(!1);var c=r(i);n.push([t.i,'html,\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: "Arial", "Helvetica", sans-serif;\n  height: 100%;\n  width: 100%;\n  background: #ddd;\n  overflow-y: hidden;\n}\n\nbody {\n  text-align: center;\n}\n\ndiv {\n  margin-bottom: 8px;\n}\n\nbutton {\n  background: transparent;\n  background-color: transparent;\n  border: 1px solid gray;\n  padding: 4px;\n}\n\nbutton.microphone {\n  box-shadow: 0px 4px black;\n}\n\nbutton.oscillator {\n  box-shadow: 0px 4px red;\n}\n\nbutton.filter {\n  box-shadow: 0px 4px green;\n}\n\nbutton.delay {\n  box-shadow: 0px 4px blue;\n}\n\nbutton.echo {\n  box-shadow: 0px 4px yellow;\n}\n\nbutton.gain {\n  box-shadow: 0px 4px magenta;\n}\n\nbutton.playing {\n  animation: blink 1s;\n  animation-iteration-count: infinite;\n}\n\n@keyframes blink {\n  50% {\n    box-shadow: 0px 4px white;\n  }\n}\n\nbutton[data-selected="true"],\nbutton.selected {\n  background: black;\n  color: white;\n  border-bottom-color: white;\n  font-weight: 700;\n}\n\ntextarea {\n  width: 280px;\n  height: 200px;\n}\n\nol {\n  font-family: monospace;\n  white-space: pre;\n}\n\nli::marker {\n  font-size: 10px;\n  color: grey;\n}\n\na.home,\na.sourceCode {\n  display: inline-block;\n  cursor: pointer;\n  outline: 0;\n  width: 32px;\n  height: 32px;\n  text-indent: -99999px;\n  background-image: url('+c+');\n  background-repeat: no-repeat;\n}\n\na.home {\n  background-position: 0 -32px;\n  position: relative;\n  left: 146px;\n  top: -6px;\n}\n\na.sourceCode {\n  background-position: 0 0;\n  position: relative;\n  left: 146px;\n  top: -6px;\n}\n\n.options button {\n  width: 24px;\n}\n\n[data-hide="true"],\n.hide {\n  display: none !important;\n}\n\n.controls,\n.started .info {\n  display: none;\n}\n\n.started .controls {\n  display: block;\n  text-align: left;\n}\n\n.wrapper {\n  display: inline-block;\n  background: #ffffff;\n  width: 300px;\n  padding: 8px 30px 16px 30px;\n}\n\n.controls div label {\n  width: 100px;\n}\n\n.header {\n  margin-top: 12px;\n}\n\n.header .name {\n  display: inline-block;\n  width: 130px;\n}\n\n.wrapper.graph .graph {\n  display: block;\n}\n.wrapper.sequencer .sequencer {\n  display: block;\n}\n\n.controls.types .types {\n  display: block;\n}\n\n.header,\n.control {\n  text-align: left;\n}\n\n.control .short {\n  display: inline-block;\n  width: 35px;\n}\n\n.control .long {\n  display: inline-block;\n  width: 100px;\n}\n\n.control select,\n.control input {\n  width: 150px;\n  max-width: 150px;\n  padding: 0px;\n}\n',""]),t.exports=n},function(t,n,e){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e=function(t,n){var e=t[1]||"",o=t[3];if(!o)return e;if(n&&"function"==typeof btoa){var r=(c=o,s=btoa(unescape(encodeURIComponent(JSON.stringify(c)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(a," */")),i=o.sources.map((function(t){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(t," */")}));return[e].concat(i).concat([r]).join("\n")}var c,s,a;return[e].join("\n")}(n,t);return n[2]?"@media ".concat(n[2]," {").concat(e,"}"):e})).join("")},n.i=function(t,e,o){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(r[c]=!0)}for(var s=0;s<t.length;s++){var a=[].concat(t[s]);o&&r[a[0]]||(e&&(a[2]?a[2]="".concat(e," and ").concat(a[2]):a[2]=e),n.push(a))}},n}},function(t,n,e){"use strict";t.exports=function(t,n){return n||(n={}),"string"!=typeof(t=t&&t.__esModule?t.default:t)?t:(/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),n.hash&&(t+=n.hash),/["'() \t\n]/.test(t)||n.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t)}},function(t,n,e){"use strict";e.r(n),n.default=e.p+"e9313ed9dc957fbef59dedcf3e9da6f32ae6b7926a79de81c5f19ec2ee5d999d.png"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,