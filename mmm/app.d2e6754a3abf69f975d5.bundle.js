!function(n){var t={};function e(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=n,e.c=t,e.d=function(n,t,o){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:o})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var r in n)e.d(o,r,function(t){return n[t]}.bind(null,r));return o},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=5)}([function(n,t){n.exports={DELAY:"delay",ECHO:"echo",EMPTY:"empty",FILTER:"filter",GAIN:"gain",MICROPHONE:"microphone",OSCILLATOR:"oscillator",FALLBACK_DELAY:1e3,MAX_DELAY_SECONDS:10}},function(n,t){n.exports=class{constructor(n,t,e,o,r){this.ctx=n,this.model=t,this.idx=e,this.type=o,this.playable=r,this.playing=!1}connector(){return{connect(){},disconnect(){}}}disconnectOtherFromParam(n,t,e){"number"==typeof n&&(this.model.items[n].connector().disconnect(t),delete this.model.connections[this.idx][`${this.idx}_${e}`])}connectOtherToParam(n,t,e){"number"==typeof n&&(this.model.items[n].connector().connect(t),this.model.connections[this.idx][`${n}_${e}`]=t)}replaceOtherOnParam(n,t,e,o){this.disconnectOtherFromParam(n,e,o),this.connectOtherToParam(t,e,o)}play(n){n?(this.connector().connect(this.ctx.destination),this.playing=!0):(this.connector().disconnect(this.ctx.destination),this.playing=!1)}label(){return`${this.idx} ${this.type}`}controls(){return[]}setValuesTo(n){const t=this.controls()||[],e=n.controls()||[];for(let n=0;n<t.length;n++){if(!e[n])return;t[n].type===e[n].type&&e[n].set(t[n].get())}}describe(){const n=[];return this.idx>0&&"empty"!==this.type&&n.push(`${this.idx} control ${this.type}`),this.controls().filter(n=>void 0!==n.get()&&""!==n.get()).forEach(t=>n.push(`${this.idx} ${t.short} ${t.get()}`)),n}destroy(){this.playing&&this.play(!1)}asOption(){return{value:this.idx,label:this.label(),type:this.type}}}},function(n,t){n.exports=function(n){const t=document.querySelectorAll(n);return t.length>1?t:t[0]}},function(n,t){n.exports=function(n){const{items:t}=n;return function(e,o,r){if(e<0)return;if("control"===o&&e>0)return void(t[e]=n.types[r](e));const i=(t[e].controls()||[]).find(n=>n.short===o)||{};if("val"===i.type){const n=parseFloat(r);n&&i.set(n)}else if("in"===i.type){const n=parseInt(r);n&&e!==n&&i.set(n)}else"type"===i.type&&i.set(r)}}},function(n,t,e){const o=e(0),r=e(19),i=e(1);n.exports=function(n,t){const{audioCtx:e,items:c}=n;c[0]||(c[0]=r(e,n,0,t));for(let t=1;t<10;t++)c[t]&&c[t].destroy(),c[t]=new i(e,n,t,o.EMPTY,!1)}},function(n,t,e){"use strict";e.r(t);e(6),e(20)},function(n,t,e){const o=e(7),r=e(8),i=e(14),c=e(15),s=e(17),l=e(18),a=e(4);window.onload=function(){const n=document.querySelector(".wrapper");o((function(t,e){if(t){document.body.className="started",n.style="";const t=r();i(t),c(t),s(t),l(t),a(t,e),t.dispatch(null,"currentIdx",0)}else n.innerHTML="Failed to connect audio",n.style="",console.log(t)}))}},function(n,t){n.exports=function(n){const t={audio:!0,video:!1};navigator.mediaDevices?navigator.mediaDevices.getUserMedia(t).then((function(t){n(null,t)})).catch((function(t){n(t)})):n(new Error("navigator.mediaDevices not supported"))}},function(n,t,e){const o=e(9),r=e(10),i=e(11),c=e(12),s=e(13);n.exports=function(){const n=[],t=(t,e,o)=>{n.forEach(n=>n(t,e,o))},e={set:(n,e,o)=>(n[e]=o,t(n,e,o),!0)},l=new(window.AudioContext||window.webkitAudioContext),a={},u={audioCtx:l,items:new Proxy(new Array(10),e),types:a,connections:new Array(10).fill(0).map(n=>({})),dispatch:t,register(t){n.push(t)}};return a.oscillator=o(l,u),a.filter=r(l,u),a.delay=i(l,u),a.echo=c(l,u),a.gain=s(l,u),window.model=u,u}},function(n,t,e){const o=e(1),r=e(0),i=["sawtooth","sine","square","triangle"];class c extends o{constructor(n,t,e){super(n,t,e,r.OSCILLATOR,!0),this.osc=n.createOscillator(),this.gain=n.createGain(),this.delay=n.createDelay(),this.osc.connect(this.gain),this.gain.connect(this.delay),this.osc.start(0),this.delay.delayTime.setTargetAtTime(.001,0,0),this._controls=this.initControls(),this._controls[0].set(100),this._controls[2].set(1),this._controls[4].set("sine")}label(){return`${this.idx} ${this.type} ${this.osc.type}`}connector(){return this.delay}subtype(){const n=this;return{values:[],set(t){n.osc.type=t},get:()=>n.osc.type}}destroy(){super.destroy(),this.disconnectOtherFromParam(this.freqConnectValue,this.osc.frequency),this.disconnectOtherFromParam(this.gainConnectValue,this.gain.gain),this.osc.stop()}controls(){return this._controls}initControls(){const n=this;return[{type:"val",short:"f",label:"Freq",set(t){n.freqValue=t,n.osc.frequency.setTargetAtTime(t,0,0)},get:()=>n.freqValue},{type:"in",short:"fm",label:"Freq Mod",set(t){n.replaceOtherOnParam(n.freqConnectValue,t,n.osc.frequency,"freqConnect"),n.freqConnectValue=t},get:()=>n.freqConnectValue},{type:"val",short:"g",label:"Gain",set(t){n.gainValue=t,n.gain.gain.setTargetAtTime(t,0,0)},get:()=>n.gainValue},{type:"in",short:"gm",label:"Gain Mod",set(t){n.replaceOtherOnParam(n.gainConnectValue,t,n.gain.gain,"gainConnect"),n.gainConnectValue=t},get:()=>n.gainConnectValue},{type:"type",short:"t",label:"Type",values:i,set(t){i.includes(t)&&(n.osc.type=t)},get:()=>n.osc.type}]}}n.exports=function(n,t){return function(e){return new c(n,t,e)}}},function(n,t,e){const o=e(1),r=e(0),i=["lowpass","highpass","bandpass","notch"];class c extends o{constructor(n,t,e){super(n,t,e,r.FILTER,!0),this.model=t,this.filter=n.createBiquadFilter(),this._controls=this.initControls(),this._controls[0].set(100),this._controls[2].set(.707),this._controls[4].set("lowpass")}label(){return`${this.idx} ${this.type} ${this.filter.type}`}connector(){return this.filter}controls(){return this._controls}initControls(){const n=this;return[{type:"val",short:"f",label:"Freq",set(t){n.freqValue=t,n.filter.frequency.setTargetAtTime(t,0,0)},get:()=>n.freqValue},{type:"in",short:"fm",label:"Freq Mod",set(t){n.replaceOtherOnParam(n.freqConnectValue,t,n.filter.frequency,"freqConnect"),n.freqConnectValue=t},get:()=>n.freqConnectValue},{type:"val",short:"q",label:"Q",set(t){n.qValue=t,n.filter.Q.setTargetAtTime(t,0,0)},get:()=>n.qValue},{type:"in",short:"qm",label:"Q Mod",set(t){n.replaceOtherOnParam(n.qConnectValue,t,n.filter.Q,"qConnect"),n.qConnectValue=t},get:()=>n.qConnectValue},{type:"type",short:"t",label:"Type",values:i,set(t){i.includes(t)&&(n.filter.type=t)},get:()=>n.filter.type},{type:"in",short:"i",label:"Input",set(t){n.replaceOtherOnParam(n.inputConnectValue,t,n.filter,"input"),n.inputConnectValue=t},get:()=>n.inputConnectValue}]}destroy(){super.destroy(),this.disconnectOtherFromParam(this.freqConnectValue,this.filter.frequency),this.disconnectOtherFromParam(this.qConnectValue,this.filter.Q),this.disconnectOtherFromParam(this.inputConnectValue,this.filter)}}n.exports=function(n,t){return function(e){return new c(n,t,e)}}},function(n,t,e){const o=e(1),r=e(0);class i extends o{constructor(n,t,e){super(n,t,e,r.DELAY,!0),this.delay=n.createDelay(r.MAX_DELAY_SECONDS),this._controls=this.initControls(),this._controls[0].set(1e3)}connector(){return this.delay}controls(){return this._controls}initControls(){const n=this;return[{type:"val",short:"t",label:"Time (ms)",max:r.MAX_DELAY_SECONDS,set(t){n.delayTimeValue=t,n.delay.delayTime.setTargetAtTime(t,0,0)},get:()=>n.delayTimeValue},{type:"in",short:"i",label:"Input",set(t){n.replaceOtherOnParam(n.inputConnectValue,t,n.delay,"input"),n.inputConnectValue=t},get:()=>n.inputConnectValue}]}destroy(){super.destroy(),this.disconnectOtherFromParam(this.inputConnectValue,this.delay)}}n.exports=function(n,t){return function(e){return new i(n,t,e)}}},function(n,t,e){const o=e(1),r=e(0);class i extends o{constructor(n,t,e){super(n,t,e,r.ECHO,!0),this.delay=n.createDelay(),this.gain=n.createGain(),this.delay.connect(this.gain),this.gain.connect(this.delay),this._controls=this.initControls(),this._controls[0].set(1e3),this._controls[1].set(.5)}connector(){return this.gain}controls(){return this._controls}initControls(){const n=this;return[{type:"val",short:"t",label:"Time (ms)",set(t){n.delayTimeValue=t,n.delay.delayTime.setTargetAtTime(t,0,0)},get:()=>n.delayTimeValue},{type:"val",short:"s",label:"Sustain",set(t){n.gainValue=t,n.gain.gain.setTargetAtTime(t,0,0)},get:()=>n.gainValue},{type:"in",short:"i",label:"Input",set(t){n.replaceOtherOnParam(n.inputConnectValue,t,n.delay,"input"),n.inputConnectValue=t},get:()=>n.inputConnectValue}]}destroy(){super.destroy(),this.disconnectOtherFromParam(this.inputConnectValue,this.delay)}}n.exports=function(n,t){return function(e){return new i(n,t,e)}}},function(n,t,e){const o=e(1),r=e(0);class i extends o{constructor(n,t,e){super(n,t,e,r.GAIN,!0),this.gain=n.createGain(),this._controls=this.initControls(),this._controls[0].set(1)}connector(){return this.gain}controls(){return this._controls}initControls(){const n=this;return[{type:"val",short:"g",label:"Gain",set(t){n.gainValue=t,n.gain.gain.setTargetAtTime(t,0,0)},get:()=>n.gainValue},{type:"in",short:"g",label:"Gain Mod",set(t){n.replaceOtherOnParam(n.gainConnectValue,t,n.gain.gain,"gainConnect"),n.gainConnectValue=t},get:()=>n.gainConnectValue},{type:"in",short:"i",label:"Input",set(t){n.replaceOtherOnParam(n.inputConnectValue,t,n.gain,"input"),n.inputConnectValue=t},get:()=>n.inputConnectValue}]}destroy(){super.destroy(),this.disconnectOtherFromParam(this.inputConnectValue,this.gain)}}n.exports=function(n,t){return function(e){return new i(n,t,e)}}},function(n,t,e){const o=e(2);n.exports=function(){const n=o("button[value=graph]"),t=o("button[value=sequencer]"),e=o("button[value=export]"),r=o(".graph"),i=o(".sequencer"),c=o(".export");n.addEventListener("click",(function(){n.className="selected",t.className="",e.className="",r.className="graph",i.className="sequencer hide",c.className="export hide"}),!1),t.addEventListener("click",(function(){n.className="",t.className="selected",e.className="",r.className="graph hide",i.className="sequencer",c.className="export hide"}),!1),e.addEventListener("click",(function(){n.className="",t.className="",e.className="selected",r.className="graph hide",i.className="sequencer hide",c.className="export"}),!1),n.click()}},function(n,t,e){const o=e(0),r=e(16),i=e(2);n.exports=function(n){const{items:t,types:e,connections:c}=n;let s=0,l=null,a=null,u=null;const p=i(".header"),d=i(".controls"),h=i(".confirm"),f=i(".header span"),y=i("#play"),g=i(".controls .control .short"),m=i(".controls .control .long"),b=i(".controls .control input"),x=i(".controls .control select"),v=i(".nodes button"),C=i(".options button");function w(n){const e=t[n].type+(t[n].playing?" playing":"")+(n===s?" selected":"");C[n].className=e,C[n].setAttribute("title",e)}function O(n){s=n,l=t[n],f.textContent=`${l.idx} ${l.type}`;const{playing:e,playable:i}=l;let c="controls "+l.type+" ";y.checked=e;const a=l.controls();for(let e=0;e<a.length;e++){const i=a[e];c+="control"+(e+1)+i.type+" ",g[e].textContent=`(${i.short})`,m[e].textContent=i.label,"val"===i.type?b[e].value=i.get():"in"===i.type?r(x[e],i.get(),t.map(n=>n.asOption()).filter(t=>t.value!==n&&t.type!==o.EMPTY),!0):"type"===i.type&&r(x[e],i.get(),i.values.map(n=>({value:n,label:n})))}p.className="header"+(i?" playable":""),d.className=c}y.checked=!1;for(let n=0;n<C.length;n++)C[n].onclick=function(){const t=s;O(n),w(t),w(n)};y.onclick=function(n){l&&(l.play(n.target.checked),w(s))};for(let n=0;n<b.length;n++)b[n].value=null,b[n].onchange=function(t){l&&(l.controls()[n].set(t.target.value),f.textContent=l.label())};for(let n=0;n<x.length;n++)x[n].onchange=function(t){if(l){const e=t.target.value;l.controls()[n].set(parseInt(e)||e),f.textContent=l.label()}};function T(){const o=e[a](s);u.setValuesTo(o);const r=n.connections[s];Object.keys(r).forEach(n=>{u.connector().connect(r[n]),o.connector().connect(r[n])}),u.destroy(),t[s]=o,O(s),w(s)}for(let n=0;n<v.length;n++)v[n].onclick=function(n){if(l){if(a=n.target.value,u=t[s],u.type===e[a]||u.type===o.MICROPHONE)return;u.type===o.EMPTY?T():(d.className="controls hide",h.className="confirm")}};i("button[value=change").onclick=function(n){d.className="controls",h.className="confirm hide",T()},i("button[value=cancel").onclick=function(n){d.className="controls",h.className="confirm hide"},n.register((n,t,e)=>{Array.isArray(n)?w(t):"currentIdx"===t&&O(e)})}},function(n,t){n.exports=function(n,t,e,o){if(n.replaceChildren(),o){const e=document.createElement("option");e.setAttribute("value",""),e.text="-",null!=t&&""!==t||e.setAttribute("selected",!0),n.appendChild(e)}for(let o=0;o<e.length;o++){const{value:r,label:i}=e[o],c=document.createElement("option");c.setAttribute("value",r),c.text=i,String(t)===String(r)&&c.setAttribute("selected",!0),n.appendChild(c)}}},function(n,t,e){const o=e(2),r=e(3),{FALLBACK_DELAY:i}=e(0),c=/^([0-9]{1}) *([a-zA-Z]{1,2}) *([0-9.]*)$/,s=/^([a-zA-Z]{1,2}) *([0-9.]*)$/,l=/^w *([0-9.]*)(.*)$/;n.exports=function(n){const t=r(n),e=o(".sequencer"),a=o("#sequencerControl"),u=o("#sequence"),p=o("#delay");let d=0,h=null,f=!1,y=-1;function g(){return parseFloat(p)||i}function m(){const n=u.value.split("\n");d>=n.length&&(d=0);const e=(n[d]||"").split(";");for(let n of e){const e=c.exec(n.trim());if(e){const[,n,o,r]=e;t(n,o,r),y=n}else{const e=s.exec(n.trim());if(e){const[,n,o]=e;t(y,n,o)}else{const t=l.exec(n.trim());if(t){const[,n,e]=t,o="ms"===e?Math.floor(n):Math.floor(1e3*n);return d++,void(h=setTimeout(m,o))}}}}f&&(d++,h=setTimeout(m,g()))}a.onclick=function(){f=!f,f?(e.className="sequencer running",a.textContent="Stop",h=setTimeout(m,g())):(e.className="sequencer",a.textContent="Start",clearTimeout(h))}}},function(n,t,e){const o=e(2),r=e(3),i=e(4),c=/^([0-9]{1}) *([a-zA-Z]*) *(.*)$/;n.exports=function(n){const t=r(n),e=o("#import"),s=o("#copy"),l=o("#reset"),a=o("button[value=export]"),u=o("#content");function p(){const t=n.items.map(n=>n.describe().join("\n")).filter(n=>n).join("\n");u.value=t}function d(){i(n)}a.addEventListener("click",p,!1),l.addEventListener("click",(function(){d(),p(),n.dispatch(null,"currentIdx",0)}),!1),e.addEventListener("click",(function(){const e=u.value.split("\n");d(),e.forEach(n=>{n.split(";").forEach(n=>{const e=c.exec(n.trim());if(e){const[,n,o,r]=e;t(n,o,r)}})}),n.dispatch(null,"currentIdx",0)}),!1),s.addEventListener("click",(function(){u.select(),u.setSelectionRange(0,99999),navigator.clipboard.writeText(u.value)}))}},function(n,t,e){const o=e(1),r=e(0);class i extends o{constructor(n,t,e,o){super(n,t,e,r.MICROPHONE,!0),this.input=n.createMediaStreamSource(o),this.gain=n.createGain(),this.input.connect(this.gain),this._controls=this.initControls(),this._controls[0].set(1)}connector(){return this.gain}initControls(){const n=this;return[{type:"val",short:"g",label:"Gain",set(t){n.gainValue=t,n.gain.gain.setTargetAtTime(t,0,0)},get:()=>n.gainValue}]}controls(){return this._controls}destroy(){}}n.exports=function(n,t,e,o){return new i(n,t,e,o)}},function(n,t,e){var o=e(21),r=e(22);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[n.i,r,""]]);var i={insert:"head",singleton:!1};o(r,i);n.exports=r.locals||{}},function(n,t,e){"use strict";var o,r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},i=function(){var n={};return function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}n[t]=e}return n[t]}}(),c=[];function s(n){for(var t=-1,e=0;e<c.length;e++)if(c[e].identifier===n){t=e;break}return t}function l(n,t){for(var e={},o=[],r=0;r<n.length;r++){var i=n[r],l=t.base?i[0]+t.base:i[0],a=e[l]||0,u="".concat(l," ").concat(a);e[l]=a+1;var p=s(u),d={css:i[1],media:i[2],sourceMap:i[3]};-1!==p?(c[p].references++,c[p].updater(d)):c.push({identifier:u,updater:g(d,t),references:1}),o.push(u)}return o}function a(n){var t=document.createElement("style"),o=n.attributes||{};if(void 0===o.nonce){var r=e.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(n){t.setAttribute(n,o[n])})),"function"==typeof n.insert)n.insert(t);else{var c=i(n.insert||"head");if(!c)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");c.appendChild(t)}return t}var u,p=(u=[],function(n,t){return u[n]=t,u.filter(Boolean).join("\n")});function d(n,t,e,o){var r=e?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(n.styleSheet)n.styleSheet.cssText=p(t,r);else{var i=document.createTextNode(r),c=n.childNodes;c[t]&&n.removeChild(c[t]),c.length?n.insertBefore(i,c[t]):n.appendChild(i)}}function h(n,t,e){var o=e.css,r=e.media,i=e.sourceMap;if(r?n.setAttribute("media",r):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=o;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(o))}}var f=null,y=0;function g(n,t){var e,o,r;if(t.singleton){var i=y++;e=f||(f=a(t)),o=d.bind(null,e,i,!1),r=d.bind(null,e,i,!0)}else e=a(t),o=h.bind(null,e,t),r=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)};return o(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;o(n=t)}else r()}}n.exports=function(n,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=r());var e=l(n=n||[],t);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var o=0;o<e.length;o++){var r=s(e[o]);c[r].references--}for(var i=l(n,t),a=0;a<e.length;a++){var u=s(e[a]);0===c[u].references&&(c[u].updater(),c.splice(u,1))}e=i}}}},function(n,t,e){var o=e(23),r=e(24),i=e(25);t=o(!1);var c=r(i);t.push([n.i,'html,\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: "Arial", "Helvetica", sans-serif;\n  height: 100%;\n  width: 100%;\n  background: #ddd;\n  overflow-y: hidden;\n}\n\nbody {\n  text-align: center;\n}\n\ndiv {\n  margin-bottom: 8px;\n}\n\nbutton {\n  background: transparent;\n  background-color: transparent;\n  border: 1px solid gray;\n  padding: 4px;\n}\n\nbutton.microphone {\n  box-shadow: 0px 4px black;\n}\n\nbutton.oscillator {\n  box-shadow: 0px 4px red;\n}\n\nbutton.filter {\n  box-shadow: 0px 4px green;\n}\n\nbutton.delay {\n  box-shadow: 0px 4px blue;\n}\n\nbutton.echo {\n  box-shadow: 0px 4px yellow;\n}\n\nbutton.gain {\n  box-shadow: 0px 4px magenta;\n}\n\nbutton.playing {\n  animation: blink 1s;\n  animation-iteration-count: infinite;\n}\n\n@keyframes blink {\n  50% {\n    box-shadow: 0px 4px white;\n  }\n}\n\nbutton.selected {\n  background: black;\n  color: white;\n  border-bottom-color: white;\n  font-weight: 700;\n}\n\ntextarea {\n  width: 280px;\n  height: 200px;\n}\n\nol {\n  font-family: monospace;\n  white-space: pre;\n}\n\nli::marker {\n  font-size: 10px;\n  color: grey;\n}\n\na.home,\na.sourceCode {\n  display: inline-block;\n  cursor: pointer;\n  outline: 0;\n  width: 32px;\n  height: 32px;\n  text-indent: -99999px;\n  background-image: url('+c+');\n  background-repeat: no-repeat;\n}\n\na.home {\n  background-position: 0 -32px;\n  position: relative;\n  left: 146px;\n  top: -6px;\n}\n\na.sourceCode {\n  background-position: 0 0;\n  position: relative;\n  left: 146px;\n  top: -6px;\n}\n\n.options button {\n  width: 24px;\n}\n\n.hide {\n  display: none;\n}\n\n.controls,\n.started .info {\n  display: none;\n}\n\n.started .controls {\n  display: block;\n  text-align: left;\n}\n\n.wrapper {\n  display: inline-block;\n  background: #ffffff;\n  width: 300px;\n  padding: 16px 30px 16px 30px;\n}\n\n.controls div label {\n  width: 100px;\n}\n\n.controls > div:not(.header),\n.controls .control input,\n.controls .control select {\n  display: none;\n}\n\n.header {\n  margin-top: 12px;\n}\n.header .name {\n  display: inline-block;\n  width: 130px;\n}\n\n.wrapper.graph .graph {\n  display: block;\n}\n.wrapper.sequencer .sequencer {\n  display: block;\n}\n\n.header #play,\n.header [for="play"] {\n  display: none;\n}\n.header.playable #play,\n.header.playable [for="play"] {\n  display: inline-block;\n}\n\n.controls.types .types {\n  display: block;\n}\n.controls.control1in .control:nth-child(1),\n.controls.control1val .control:nth-child(1),\n.controls.control1type .control:nth-child(1) {\n  display: block;\n}\n.controls.control1in #control1in,\n.controls.control1type #control1in {\n  display: inline;\n}\n.controls.control1val #control1val {\n  display: inline;\n}\n.controls.control2in .control:nth-child(2),\n.controls.control2val .control:nth-child(2),\n.controls.control2type .control:nth-child(2) {\n  display: block;\n}\n.controls.control2in #control2in,\n.controls.control2type #control2in {\n  display: inline;\n}\n.controls.control2val #control2val {\n  display: inline;\n}\n.controls.control3in .control:nth-child(3),\n.controls.control3val .control:nth-child(3),\n.controls.control3type .control:nth-child(3) {\n  display: block;\n}\n.controls.control3in #control3in,\n.controls.control3type #control3in {\n  display: inline;\n}\n.controls.control3val #control3val {\n  display: inline;\n}\n.controls.control4in .control:nth-child(4),\n.controls.control4val .control:nth-child(4),\n.controls.control4type .control:nth-child(4) {\n  display: block;\n}\n.controls.control4in #control4in,\n.controls.control4type #control4in {\n  display: inline;\n}\n.controls.control4val #control4val {\n  display: inline;\n}\n.controls.control5in .control:nth-child(5),\n.controls.control5val .control:nth-child(5),\n.controls.control5type .control:nth-child(5) {\n  display: block;\n}\n.controls.control5in #control5in,\n.controls.control5type #control5in {\n  display: inline;\n}\n.controls.control5val #control5val {\n  display: inline;\n}\n.controls.control6in .control:nth-child(6),\n.controls.control6val .control:nth-child(6),\n.controls.control6type .control:nth-child(6) {\n  display: block;\n}\n.controls.control6in #control6in,\n.controls.control6type #control6in {\n  display: inline;\n}\n.controls.control6val #control6val {\n  display: inline;\n}\n\n.header,\n.control {\n  text-align: left;\n}\n\n.control .short {\n  display: inline-block;\n  width: 40px;\n}\n\n.control .long {\n  display: inline-block;\n  width: 90px;\n}\n\n.control select,\n.control input {\n  width: 150px;\n  max-width: 150px;\n  padding: 0px;\n}\n',""]),n.exports=t},function(n,t,e){"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=function(n,t){var e=n[1]||"",o=n[3];if(!o)return e;if(t&&"function"==typeof btoa){var r=(c=o,s=btoa(unescape(encodeURIComponent(JSON.stringify(c)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(l," */")),i=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([r]).join("\n")}var c,s,l;return[e].join("\n")}(t,n);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,o){"string"==typeof n&&(n=[[null,n,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(r[c]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);o&&r[l[0]]||(e&&(l[2]?l[2]="".concat(e," and ").concat(l[2]):l[2]=e),t.push(l))}},t}},function(n,t,e){"use strict";n.exports=function(n,t){return t||(t={}),"string"!=typeof(n=n&&n.__esModule?n.default:n)?n:(/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n)}},function(n,t,e){"use strict";e.r(t),t.default=e.p+"e9313ed9dc957fbef59dedcf3e9da6f32ae6b7926a79de81c5f19ec2ee5d999d.png"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,