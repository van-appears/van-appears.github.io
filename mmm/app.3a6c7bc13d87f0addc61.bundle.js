!function(n){var t={};function e(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return n[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=n,e.c=t,e.d=function(n,t,o){e.o(n,t)||Object.defineProperty(n,t,{enumerable:!0,get:o})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,t){if(1&t&&(n=e(n)),8&t)return n;if(4&t&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&t&&"string"!=typeof n)for(var r in n)e.d(o,r,function(t){return n[t]}.bind(null,r));return o},e.n=function(n){var t=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(t,"a",t),t},e.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},e.p="",e(e.s=3)}([function(n,t){n.exports={DELAY:"delay",ECHO:"echo",EMPTY:"empty",FILTER:"filter",GAIN:"gain",MICROPHONE:"microphone",OSCILLATOR:"oscillator",FALLBACK_DELAY:1e3}},function(n,t){n.exports=class{constructor(n,t,e,o,r){this.ctx=n,this.model=t,this.idx=e,this.type=o,this.playable=r,this.playing=!1}connector(){return{connect(){},disconnect(){}}}disconnectOtherFromParam(n,t,e){n>=0&&(this.model.items[n].connector().disconnect(t),delete this.model.connections[this.idx][`${this.idx}_${e}`])}connectOtherToParam(n,t,e){n>=0&&(this.model.items[n].connector().connect(t),this.model.connections[this.idx][`${n}_${e}`]=t)}replaceOtherOnParam(n,t,e,o){this.disconnectOtherFromParam(n,e,o),this.connectOtherToParam(t,e,o)}play(n){n?(this.connector().connect(this.ctx.destination),this.playing=!0):(this.connector().disconnect(this.ctx.destination),this.playing=!1)}label(){return`${this.idx} ${this.type}`}controls(){return[]}setValuesTo(n){const t=this.controls()||[],e=n.controls()||[];for(let n=0;n<t.length;n++){if(!e[n])return;t[n].type===e[n].type&&e[n].set(t[n].get())}}describe(){return this.controls().map(n=>`${idx} ${n.short} ${n.get()}`)}destroy(){this.playing&&this.play(!1)}asOption(){return{value:this.idx,label:this.label(),type:this.type}}}},function(n,t){n.exports=function(n){const t=document.querySelectorAll(n);return t.length>1?t:t[0]}},function(n,t,e){"use strict";e.r(t);e(4),e(16)},function(n,t,e){const o=e(5),r=e(6),i=e(9);window.onload=function(){o((function(n,t){if(n)console.log(n);else{document.body.className="started";const n=i(t);r(n)}}))}},function(n,t){n.exports=function(n){const t={audio:!0,video:!1};navigator.mediaDevices?navigator.mediaDevices.getUserMedia(t).then((function(t){n(null,t)})).catch((function(t){n(t)})):n(new Error("navigator.mediaDevices not supported"))}},function(n,t,e){const o=e(0),r=e(7),i=e(8),c=e(2);n.exports=function(n){const{items:t,types:e,connections:l}=n;i(n);let s=null,a=null,u=null,p=null;const h=c(".wrapper"),d=c(".controls"),f=c(".confirm"),y=c("#name"),g=c("#play"),m=c(".controls .control .short"),b=c(".controls .control .long"),v=c(".controls .control input"),x=c(".controls .control select"),C=c(".nodes button"),O=c(".options button");function w(){const n=t[s].type+(t[s].playing?" playing":"");O[s].className=n,O[s].setAttribute("title",n)}function T(n){s=n,a=t[n],y.textContent=a.label();const{playing:e,playable:i}=a;let c="controls ";i&&(c+="playable ",g.checked=e);const l=a.controls();for(let e=0;e<l.length;e++){const i=l[e];c+="control"+(e+1)+i.type+" ",m[e].textContent=`(${i.short})`,b[e].textContent=i.label,"val"===i.type?v[e].value=i.get():"in"===i.type?r(x[e],i.get(),t.map(n=>n.asOption()).filter(t=>t.value!==n&&t.type!==o.EMPTY),!0):"type"===i.type&&r(x[e],i.get(),i.values.map(n=>({value:n,label:n})))}d.className=c}g.checked=!1;for(let n=0;n<O.length;n++)O[n].onclick=function(){T(n)};c("button[value=graph]").onclick=function(){h.className="wrapper graph"};c("button[value=sequencer]").onclick=function(){h.className="wrapper sequencer"},g.onclick=function(n){a&&(a.play(n.target.checked),w())};for(let n=0;n<v.length;n++)v[n].value=null,v[n].onchange=function(t){a&&(a.controls()[n].set(t.target.value),y.textContent=a.label())};for(let n=0;n<x.length;n++)x[n].onchange=function(t){if(a){const e=t.target.value;a.controls()[n].set(parseInt(e)||e)}};function V(){const o=e[u](s);p.setValuesTo(o);const r=n.connections[s];Object.keys(r).forEach(n=>{p.connector().connect(r[n]),o.connector().connect(r[n])}),p.destroy(),t[s]=o,T(s),w()}for(let n=0;n<C.length;n++)C[n].onclick=function(n){if(a){if(u=n.target.value,p=t[s],p.type===e[u]||p.type===o.MICROPHONE)return;p.type===o.EMPTY?V():(d.className="controls hide",f.className="confirm")}};c("button[value=change").onclick=function(n){d.className="controls",f.className="confirm hide",V()},c("button[value=cancel").onclick=function(n){d.className="controls",f.className="confirm hide"}}},function(n,t){n.exports=function(n,t,e,o){if(n.replaceChildren(),o){const e=document.createElement("option");e.setAttribute("value",""),e.text="-",null!=t&&""!==t||e.setAttribute("selected",!0),n.appendChild(e)}for(let o=0;o<e.length;o++){const{value:r,label:i}=e[o],c=document.createElement("option");c.setAttribute("value",r),c.text=i,String(t)===String(r)&&c.setAttribute("selected",!0),n.appendChild(c)}}},function(n,t,e){const o=e(2),{FALLBACK_DELAY:r}=e(0),i=/^([0-9]{1}) *([a-zA-Z]{1,2}) *([0-9.]*)$/,c=/^([a-zA-Z]{1,2}) *([0-9.]*)$/,l=/^w *([0-9.]*)(.*)$/;n.exports=function(n){const t=o(".sequencer"),e=o("#sequencerControl"),s=o("#sequence"),a=o("#delay");let u=0,p=null,h=!1,d=-1;function f(t,e,o){if(t<0)return;const r=(n.items[t].controls()||[]).find(n=>n.short===e)||{};if("val"===r.type){const n=parseFloat(o);n&&r.set(n)}else if("in"===r.type){const n=parseInt(o);n&&t!==n&&r.set(n)}else"type"===r.type&&r.set(o)}function y(){return parseFloat(a)||r}function g(){const n=s.value.split("\n");u>=n.length&&(u=0);const t=(n[u]||"").split(";");for(let n of t){const t=i.exec(n.trim());if(t){const[,n,e,o]=t;f(n,e,o),d=n}else{const t=c.exec(n.trim());if(t){const[,n,e]=t;f(d,n,e)}else{const t=l.exec(n.trim());if(t){const[,n,e]=t,o="ms"===e?Math.floor(n):Math.floor(1e3*n);return u++,void(p=setTimeout(g,o))}}}}h&&(u++,p=setTimeout(g,y()))}e.onclick=function(){h=!h,h?(t.className="sequencer running",e.textContent="Stop",p=setTimeout(g,y())):(t.className="sequencer",e.textContent="Start",clearTimeout(p))}}},function(n,t,e){const o=e(0),r=e(10),i=e(11),c=e(12),l=e(13),s=e(14),a=e(15),u=e(1);n.exports=function(n){const t=new(window.AudioContext||window.webkitAudioContext),e=new Array(10),p={},h={items:e,types:p,connections:new Array(10).fill(0).map(n=>({}))};p.oscillator=i(t,h),p.filter=c(t,h),p.delay=l(t,h),p.echo=s(t,h),p.gain=a(t,h),e[0]=r(t,h,0,n);for(let n=1;n<10;n++)e[n]=new u(t,h,n,o.EMPTY,!1);return window.model=h,h}},function(n,t,e){const o=e(1),r=e(0);class i extends o{constructor(n,t,e,o){super(n,t,e,r.MICROPHONE,!0),this.input=n.createMediaStreamSource(o),this.gain=n.createGain(),this.input.connect(this.gain),this._controls=this.initControls(),this._controls[0].set(1)}connector(){return this.gain}initControls(){const n=this;return[{type:"val",short:"g",label:"Gain",set(t){n.gainValue=t,n.gain.gain.setTargetAtTime(t,0,0)},get:()=>n.gainValue}]}controls(){return this._controls}destroy(){}}n.exports=function(n,t,e,o){return new i(n,t,e,o)}},function(n,t,e){const o=e(1),r=e(0),i=["sawtooth","sine","square","triangle"];class c extends o{constructor(n,t,e){super(n,t,e,r.OSCILLATOR,!0),this.osc=n.createOscillator(),this.gain=n.createGain(),this.delay=n.createDelay(),this.osc.connect(this.gain),this.gain.connect(this.delay),this.osc.start(0),this.delay.delayTime.setTargetAtTime(.001,0,0),this._controls=this.initControls(),this._controls[0].set(100),this._controls[2].set(1),this._controls[4].set("sine")}label(){return`${this.idx} ${this.type} ${this.osc.type}`}connector(){return this.delay}subtype(){const n=this;return{values:[],set(t){n.osc.type=t},get:()=>n.osc.type}}destroy(){super.destroy(),this.disconnectOtherFromParam(this.freqConnectValue,this.osc.frequency),this.disconnectOtherFromParam(this.gainConnectValue,this.gain.gain),this.osc.stop()}controls(){return this._controls}initControls(){const n=this;return[{type:"val",short:"f",label:"Freq",set(t){n.freqValue=t,n.osc.frequency.setTargetAtTime(t,0,0)},get:()=>n.freqValue},{type:"in",short:"fm",label:"Freq Mod",set(t){n.replaceOtherOnParam(n.freqConnectValue,t,n.osc.frequency,"freqConnect"),console.log("<<<",t),n.freqConnectValue=t},get:()=>(console.log(">>>",n.freqConnectValue),n.freqConnectValue)},{type:"val",short:"g",label:"Gain",set(t){n.gainValue=t,n.gain.gain.setTargetAtTime(t,0,0)},get:()=>n.gainValue},{type:"in",short:"g",label:"Gain Mod",set(t){n.replaceOtherOnParam(n.gainConnectValue,t,n.gain.gain,"gainConnect"),n.gainConnectValue=t},get:()=>n.gainConnectValue},{type:"type",short:"t",label:"Type",values:i,set(t){i.includes(t)&&(n.osc.type=t)},get:()=>n.osc.type}]}}n.exports=function(n,t){return function(e){const o=t.items[e];return[r.OSCILLATOR,r.MICROPHONE].includes(o.type)?o:new c(n,t,e)}}},function(n,t,e){const o=e(1),r=e(0),i=["lowpass","highpass","bandpass","notch"];class c extends o{constructor(n,t,e){super(n,t,e,r.FILTER,!0),this.model=t,this.filter=n.createBiquadFilter(),this._controls=this.initControls(),this._controls[0].set(100),this._controls[2].set(.707),this._controls[4].set("lowpass")}label(){return`${this.idx} ${this.type} ${this.filter.type}`}connector(){return this.filter}controls(){return this._controls}initControls(){const n=this;return[{type:"val",short:"f",label:"Freq",set(t){n.freqValue=t,n.filter.frequency.setTargetAtTime(t,0,0)},get:()=>n.freqValue},{type:"in",short:"fm",label:"Freq Mod",set(t){n.replaceOtherOnParam(n.freqConnectValue,t,n.filter.frequency,"freqConnect"),n.freqConnectValue=t},get:()=>n.freqConnectValue},{type:"val",short:"q",label:"Q",set(t){n.qValue=t,n.filter.Q.setTargetAtTime(t,0,0)},get:()=>n.qValue},{type:"in",short:"qm",label:"Q Mod",set(t){n.replaceOtherOnParam(n.qConnectValue,t,n.filter.Q,"qConnect"),n.qConnectValue=t},get:()=>n.qConnectValue},{type:"type",short:"t",label:"Type",values:i,set(t){i.includes(t)&&(n.filter.type=t)},get:()=>n.filter.type},{type:"in",short:"i",label:"Input",set(t){n.replaceOtherOnParam(n.inputConnectValue,t,n.filter,"input"),n.inputConnectValue=t},get:()=>n.inputConnectValue}]}destroy(){super.destroy(),this.disconnectOtherFromParam(this.freqConnectValue,this.filter.frequency),this.disconnectOtherFromParam(this.qConnectValue,this.filter.Q),this.disconnectOtherFromParam(this.inputConnectValue,this.filter)}}n.exports=function(n,t){return function(e){const o=t.items[e];return[r.FILTER,r.MICROPHONE].includes(o.type)?o:new c(n,t,e)}}},function(n,t,e){const o=e(1),r=e(0);class i extends o{constructor(n,t,e){super(n,t,e,r.DELAY,!0),this.delay=n.createDelay(),this._controls=this.initControls(),this._controls[0].set(1e3)}connector(){return this.delay}controls(){return this._controls}initControls(){const n=this;return[{type:"val",short:"t",label:"Time (ms)",set(t){n.delayTimeValue=t,n.delay.delayTime.setTargetAtTime(t,0,0)},get:()=>n.delayTimeValue},{type:"in",short:"i",label:"Input",set(t){n.replaceOtherOnParam(n.inputConnectValue,t,n.delay,"input"),n.inputConnectValue=t},get:()=>n.inputConnectValue}]}destroy(){super.destroy(),this.disconnectOtherFromParam(this.inputConnectValue,this.delay)}}n.exports=function(n,t){return function(e){const o=t.items[e];return[r.DELAY,r.MICROPHONE].includes(o.type)?o:new i(n,t,e)}}},function(n,t,e){const o=e(1),r=e(0);class i extends o{constructor(n,t,e){super(n,t,e,r.ECHO,!0),this.delay=n.createDelay(),this.gain=n.createGain(),this.delay.connect(this.gain),this.gain.connect(this.delay),this._controls=this.initControls(),this._controls[0].set(1e3),this._controls[1].set(.5)}connector(){return this.gain}controls(){return this._controls}initControls(){const n=this;return[{type:"val",short:"t",label:"Time (ms)",set(t){n.delayTimeValue=t,n.delay.delayTime.setTargetAtTime(t,0,0)},get:()=>n.delayTimeValue},{type:"val",short:"s",label:"Sustain",set(t){n.gainValue=t,n.gain.gain.setTargetAtTime(t,0,0)},get:()=>n.gainValue},{type:"in",short:"i",label:"Input",set(t){n.replaceOtherOnParam(n.inputConnectValue,t,n.delay,"input"),n.inputConnectValue=t},get:()=>n.inputConnectValue}]}destroy(){super.destroy(),this.disconnectOtherFromParam(this.inputConnectValue,this.delay)}}n.exports=function(n,t){return function(e){const o=t.items[e];return[r.ECHO,r.MICROPHONE].includes(o.type)?o:new i(n,t,e)}}},function(n,t,e){const o=e(1),r=e(0);class i extends o{constructor(n,t,e){super(n,t,e,r.GAIN,!0),this.gain=n.createGain(),this._controls=this.initControls(),this._controls[0].set(1)}connector(){return this.gain}controls(){return this._controls}initControls(){const n=this;return[{type:"val",short:"g",label:"Gain",set(t){n.gainValue=t,n.gain.gain.setTargetAtTime(t,0,0)},get:()=>n.gainValue},{type:"in",short:"g",label:"Gain Mod",set(t){n.replaceOtherOnParam(n.gainConnectValue,t,n.gain.gain,"gainConnect"),n.gainConnectValue=t},get:()=>n.gainConnectValue},{type:"in",short:"i",label:"Input",set(t){n.replaceOtherOnParam(n.inputConnectValue,t,n.gain,"input"),n.inputConnectValue=t},get:()=>n.inputConnectValue}]}destroy(){super.destroy(),this.disconnectOtherFromParam(this.inputConnectValue,this.gain)}}n.exports=function(n,t){return function(e){const o=t.items[e];return[r.GAIN,r.MICROPHONE].includes(o.type)?o:new i(n,t,e)}}},function(n,t,e){var o=e(17),r=e(18);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[n.i,r,""]]);var i={insert:"head",singleton:!1};o(r,i);n.exports=r.locals||{}},function(n,t,e){"use strict";var o,r=function(){return void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o},i=function(){var n={};return function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}n[t]=e}return n[t]}}(),c=[];function l(n){for(var t=-1,e=0;e<c.length;e++)if(c[e].identifier===n){t=e;break}return t}function s(n,t){for(var e={},o=[],r=0;r<n.length;r++){var i=n[r],s=t.base?i[0]+t.base:i[0],a=e[s]||0,u="".concat(s," ").concat(a);e[s]=a+1;var p=l(u),h={css:i[1],media:i[2],sourceMap:i[3]};-1!==p?(c[p].references++,c[p].updater(h)):c.push({identifier:u,updater:g(h,t),references:1}),o.push(u)}return o}function a(n){var t=document.createElement("style"),o=n.attributes||{};if(void 0===o.nonce){var r=e.nc;r&&(o.nonce=r)}if(Object.keys(o).forEach((function(n){t.setAttribute(n,o[n])})),"function"==typeof n.insert)n.insert(t);else{var c=i(n.insert||"head");if(!c)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");c.appendChild(t)}return t}var u,p=(u=[],function(n,t){return u[n]=t,u.filter(Boolean).join("\n")});function h(n,t,e,o){var r=e?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(n.styleSheet)n.styleSheet.cssText=p(t,r);else{var i=document.createTextNode(r),c=n.childNodes;c[t]&&n.removeChild(c[t]),c.length?n.insertBefore(i,c[t]):n.appendChild(i)}}function d(n,t,e){var o=e.css,r=e.media,i=e.sourceMap;if(r?n.setAttribute("media",r):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleSheet)n.styleSheet.cssText=o;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(o))}}var f=null,y=0;function g(n,t){var e,o,r;if(t.singleton){var i=y++;e=f||(f=a(t)),o=h.bind(null,e,i,!1),r=h.bind(null,e,i,!0)}else e=a(t),o=d.bind(null,e,t),r=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)};return o(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;o(n=t)}else r()}}n.exports=function(n,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=r());var e=s(n=n||[],t);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var o=0;o<e.length;o++){var r=l(e[o]);c[r].references--}for(var i=s(n,t),a=0;a<e.length;a++){var u=l(e[a]);0===c[u].references&&(c[u].updater(),c.splice(u,1))}e=i}}}},function(n,t,e){var o=e(19),r=e(20),i=e(21);t=o(!1);var c=r(i);t.push([n.i,'html,\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: "Arial", "Helvetica", sans-serif;\n  height: 100%;\n  width: 100%;\n  background: #ddd;\n  overflow-y: hidden;\n}\n\nbody {\n  text-align: center;\n}\n\nbutton {\n  background: transparent;\n  background-color: transparent;\n  border: 1px solid gray;\n  padding: 4px;\n}\n\n.options button {\n  width: 24px;\n}\n\nbutton.microphone {\n  box-shadow: 0px 4px black;\n}\n\nbutton.oscillator {\n  box-shadow: 0px 4px red;\n}\n\nbutton.filter {\n  box-shadow: 0px 4px green;\n}\n\nbutton.delay {\n  box-shadow: 0px 4px blue;\n}\n\nbutton.echo {\n  box-shadow: 0px 4px yellow;\n}\n\nbutton.gain {\n  box-shadow: 0px 4px magenta;\n}\n\nbutton.playing {\n  background: black;\n  color: white;\n  border-bottom-color: white;\n  font-weight: 700;\n}\n\n.hide {\n  display: none;\n}\n\n.graph > div {\n  margin-bottom: 8px;\n}\n\n.controls,\n.started .info {\n  display: none;\n}\n\n.started .controls {\n  display: block;\n  text-align: left;\n}\n\n.wrapper {\n  display: inline-block;\n  background: #ffffff;\n  width: 300px;\n  padding: 20px;\n}\n\n.controls div label {\n  width: 100px;\n}\n\n.controls > *,\n.controls .control input,\n.controls .control select,\n.wrapper .graph,\n.wrapper .sequencer {\n  display: none;\n}\n\n.wrapper.graph .graph {\n  display: block;\n}\n.wrapper.sequencer .sequencer {\n  display: block;\n}\n\n.controls.playable .play {\n  display: block;\n}\n.controls.types .types {\n  display: block;\n}\n.controls.control1in .control:nth-child(3),\n.controls.control1val .control:nth-child(3),\n.controls.control1type .control:nth-child(3) {\n  display: block;\n}\n.controls.control1in #control1in,\n.controls.control1type #control1in {\n  display: inline;\n}\n.controls.control1val #control1val {\n  display: inline;\n}\n.controls.control2in .control:nth-child(4),\n.controls.control2val .control:nth-child(4),\n.controls.control2type .control:nth-child(4) {\n  display: block;\n}\n.controls.control2in #control2in,\n.controls.control2type #control2in {\n  display: inline;\n}\n.controls.control2val #control2val {\n  display: inline;\n}\n.controls.control3in .control:nth-child(5),\n.controls.control3val .control:nth-child(5),\n.controls.control3type .control:nth-child(5) {\n  display: block;\n}\n.controls.control3in #control3in,\n.controls.control3type #control3in {\n  display: inline;\n}\n.controls.control3val #control3val {\n  display: inline;\n}\n.controls.control4in .control:nth-child(6),\n.controls.control4val .control:nth-child(6),\n.controls.control4type .control:nth-child(6) {\n  display: block;\n}\n.controls.control4in #control4in,\n.controls.control4type #control4in {\n  display: inline;\n}\n.controls.control4val #control4val {\n  display: inline;\n}\n.controls.control5in .control:nth-child(7),\n.controls.control5val .control:nth-child(7),\n.controls.control5type .control:nth-child(7) {\n  display: block;\n}\n.controls.control5in #control5in,\n.controls.control5type #control5in {\n  display: inline;\n}\n.controls.control5val #control5val {\n  display: inline;\n}\n.controls.control6in .control:nth-child(8),\n.controls.control6val .control:nth-child(8),\n.controls.control6type .control:nth-child(8) {\n  display: block;\n}\n.controls.control6in #control6in,\n.controls.control6type #control6in {\n  display: inline;\n}\n.controls.control6val #control6val {\n  display: inline;\n}\n\n.control {\n  margin-bottom: 8px;\n}\n\n.control .short {\n  display: inline-block;\n  width: 40px;\n}\n\n.control .long {\n  display: inline-block;\n  width: 90px;\n}\n\n.control select,\n.control input {\n  width: 160px;\n  max-width: 160px;\n}\n\ninput[type="number"] {\n  width: 100px;\n}\n\ntextarea {\n  width: 280px;\n  height: 200px;\n}\n\na.home,\na.sourceCode {\n  display: inline-block;\n  cursor: pointer;\n  outline: 0;\n  width: 32px;\n  height: 32px;\n  text-indent: -99999px;\n  background-image: url('+c+");\n  background-repeat: no-repeat;\n}\n\na.home {\n  background-position: -736px -32px;\n  position: relative;\n  left: 136px;\n  top: 2px;\n}\n\na.sourceCode {\n  background-position: -736px 0;\n  position: relative;\n  left: 136px;\n  top: 2px;\n}\n\nol {\n  font-family: monospace;\n  white-space: pre;\n}\n\nli::marker {\n  font-size: 10px;\n  color: grey;\n}\n",""]),n.exports=t},function(n,t,e){"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=function(n,t){var e=n[1]||"",o=n[3];if(!o)return e;if(t&&"function"==typeof btoa){var r=(c=o,l=btoa(unescape(encodeURIComponent(JSON.stringify(c)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(s," */")),i=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([r]).join("\n")}var c,l,s;return[e].join("\n")}(t,n);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,o){"string"==typeof n&&(n=[[null,n,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(r[c]=!0)}for(var l=0;l<n.length;l++){var s=[].concat(n[l]);o&&r[s[0]]||(e&&(s[2]?s[2]="".concat(e," and ").concat(s[2]):s[2]=e),t.push(s))}},t}},function(n,t,e){"use strict";n.exports=function(n,t){return t||(t={}),"string"!=typeof(n=n&&n.__esModule?n.default:n)?n:(/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),t.hash&&(n+=t.hash),/["'() \t\n]/.test(n)||t.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n)}},function(n,t,e){"use strict";e.r(t),t.default=e.p+"0c363c6fb5a37d44f6b7e0aa49a4cc5536e55819de80cbb04334ccdd3d6649d2.png"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbm9kZXMvTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvc2VsZWN0LmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbW1tLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb25uZWN0LWF1ZGlvLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb25uZWN0LWxpc3RlbmVycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvZmlsbC1zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3NlcXVlbmNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY3JlYXRlLW1vZGVsLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9ub2Rlcy9jcmVhdGUtbWljcm9waG9uZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbm9kZXMvY3JlYXRlLW9zY2lsbGF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL25vZGVzL2NyZWF0ZS1maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL25vZGVzL2NyZWF0ZS1kZWxheS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvbm9kZXMvY3JlYXRlLWVjaG8uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL25vZGVzL2NyZWF0ZS1nYWluLmpzIiwid2VicGFjazovLy8uL3NyYy9jc3MvbW1tLmNzcz80YTEwIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY3NzL21tbS5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovLy8uL3NyYy9pbWcvaWNvbnMucG5nIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiREVMQVkiLCJFQ0hPIiwiRU1QVFkiLCJGSUxURVIiLCJHQUlOIiwiTUlDUk9QSE9ORSIsIk9TQ0lMTEFUT1IiLCJGQUxMQkFDS19ERUxBWSIsImNvbnN0cnVjdG9yIiwiY3R4IiwibW9kZWwiLCJpZHgiLCJ0eXBlIiwicGxheWFibGUiLCJ0aGlzIiwicGxheWluZyIsImNvbm5lY3RvciIsImNvbm5lY3QiLCJkaXNjb25uZWN0IiwiZGlzY29ubmVjdE90aGVyRnJvbVBhcmFtIiwib3RoZXJJZHgiLCJwYXJhbSIsIml0ZW1zIiwiY29ubmVjdGlvbnMiLCJjb25uZWN0T3RoZXJUb1BhcmFtIiwicmVwbGFjZU90aGVyT25QYXJhbSIsIm9sZElkeCIsIm5ld0lkeCIsInBsYXkiLCJib29sIiwiZGVzdGluYXRpb24iLCJsYWJlbCIsImNvbnRyb2xzIiwic2V0VmFsdWVzVG8iLCJuZXdOb2RlIiwibGFzdENvbnRyb2xzIiwibmV3Q29udHJvbHMiLCJpbmRleCIsImxlbmd0aCIsInNldCIsImRlc2NyaWJlIiwibWFwIiwieCIsInNob3J0IiwiZGVzdHJveSIsImFzT3B0aW9uIiwiaWQiLCJub2RlcyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImNvbm5lY3RBdWRpbyIsInJlcXVpcmUiLCJjb25uZWN0TGlzdGVuZXJzIiwiY3JlYXRlTW9kZWwiLCJ3aW5kb3ciLCJvbmxvYWQiLCJlcnIiLCJhdWRpbyIsImNvbnNvbGUiLCJsb2ciLCJib2R5IiwiY2xhc3NOYW1lIiwiY2FsbGJhY2siLCJNRURJQV9DT05TVFJBSU5UUyIsInZpZGVvIiwibmF2aWdhdG9yIiwibWVkaWFEZXZpY2VzIiwiZ2V0VXNlck1lZGlhIiwidGhlbiIsIm1lZGlhU3RyZWFtIiwiY2F0Y2giLCJFcnJvciIsImNvbnN0YW50cyIsImZpbGxTZWxlY3QiLCJzZXF1ZW5jZXJGYWN0b3J5Iiwic2VsZWN0IiwidHlwZXMiLCJjdXJyZW50SWR4IiwiY3VycmVudCIsIm5leHRUeXBlIiwibGFzdENvbnRyb2wiLCJ3cmFwcGVyIiwiY29udHJvbEFyZWEiLCJjb25maXJtRWwiLCJjb250cm9sU2hvcnRFbHMiLCJjb250cm9sTG9uZ0VscyIsImNvbnRyb2xWYWxFbHMiLCJjb250cm9sSW5FbHMiLCJjb252ZXJ0RWxzIiwib3B0aW9uRWxzIiwic2V0T3B0aW9uU3R5bGUiLCJzdHlsZSIsInNldEF0dHJpYnV0ZSIsInRleHRDb250ZW50IiwiY2xhc3NlcyIsImNoZWNrZWQiLCJjSW5kZXgiLCJjb250cm9sIiwiZmlsdGVyIiwidmFsdWVzIiwib25jbGljayIsImV2dCIsInRhcmdldCIsIm9uY2hhbmdlIiwidmFsIiwicGFyc2VJbnQiLCJjb252ZXJ0IiwibmV3Q29udHJvbCIsImN1cnJlbnRDb25uZWN0aW9ucyIsImtleXMiLCJmb3JFYWNoIiwic2VsZWN0RWwiLCJjdXJyZW50VmFsIiwiaW5jbHVkZUVtcHR5IiwicmVwbGFjZUNoaWxkcmVuIiwidW5zZWxlY3RlZCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0IiwiYXBwZW5kQ2hpbGQiLCJvcHRpb24iLCJTdHJpbmciLCJjb21tYW5kU3BsaXR0ZXIiLCJjb21tYW5kU3BsaXR0ZXJOb0lkeCIsIndhaXRTcGxpdHRlciIsInNlcXVlbmNlckVsIiwic2VxdWVuY2VyQ29udHJvbEVsIiwibGluZXNFbCIsImRlbGF5IiwibGluZU51bSIsInRpbWVvdXRJZCIsInJ1bm5pbmciLCJsYXN0SWR4IiwiZXhlY3V0ZUNvbW1hbmQiLCJmaW5kIiwicGFyc2VkIiwicGFyc2VGbG9hdCIsInBhcnNlRGVsYXkiLCJwcm9jZXNzTGluZSIsImxpbmVzIiwic3BsaXQiLCJwaWVjZXMiLCJwaWVjZSIsImNvbW1hbmQiLCJleGVjIiwidHJpbSIsImNvbW1hbmQyIiwid2FpdENvbW1hbmQiLCJkdXJhdGlvbiIsIm9wdFVuaXQiLCJNYXRoIiwiZmxvb3IiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3JlYXRlTWljcm9waG9uZSIsImNyZWF0ZU9zY2lsbGF0b3IiLCJjcmVhdGVGaWx0ZXIiLCJjcmVhdGVEZWxheSIsImNyZWF0ZUVjaG8iLCJjcmVhdGVHYWluIiwiTm9kZSIsInN0cmVhbSIsImF1ZGlvQ3R4IiwiQXVkaW9Db250ZXh0Iiwid2Via2l0QXVkaW9Db250ZXh0IiwiQXJyYXkiLCJmaWxsIiwib3NjaWxsYXRvciIsImVjaG8iLCJnYWluIiwiTWljcm9waG9uZSIsInN1cGVyIiwiaW5wdXQiLCJjcmVhdGVNZWRpYVN0cmVhbVNvdXJjZSIsIl9jb250cm9scyIsImluaXRDb250cm9scyIsInRoYXQiLCJnYWluVmFsdWUiLCJzZXRUYXJnZXRBdFRpbWUiLCJUWVBFUyIsIk9zY2lsbGF0b3IiLCJvc2MiLCJzdGFydCIsImRlbGF5VGltZSIsInN1YnR5cGUiLCJmcmVxQ29ubmVjdFZhbHVlIiwiZnJlcXVlbmN5IiwiZ2FpbkNvbm5lY3RWYWx1ZSIsInN0b3AiLCJmcmVxVmFsdWUiLCJpbmNsdWRlcyIsImxhc3QiLCJGaWx0ZXIiLCJjcmVhdGVCaXF1YWRGaWx0ZXIiLCJxVmFsdWUiLCJRIiwicUNvbm5lY3RWYWx1ZSIsImlucHV0Q29ubmVjdFZhbHVlIiwiRGVsYXkiLCJkZWxheVRpbWVWYWx1ZSIsIkVjaG8iLCJHYWluIiwiYXBpIiwiY29udGVudCIsImRlZmF1bHQiLCJvcHRpb25zIiwibG9jYWxzIiwibWVtbyIsImlzT2xkSUUiLCJCb29sZWFuIiwiYWxsIiwiYXRvYiIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwicXVlcnlTZWxlY3RvciIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsImxpc3QiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJpdGVtIiwiYmFzZSIsImNvdW50IiwiY29uY2F0Iiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsInB1c2giLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJub25jZSIsImluc2VydCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJqb2luIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInJlbW92ZSIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJwYXJlbnROb2RlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsInRvU3RyaW5nIiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJzcGxpY2UiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwidXNlU291cmNlTWFwIiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJiYXNlNjQiLCJkYXRhIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwidXJsIiwidGVzdCIsInNsaWNlIiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJyZXBsYWNlIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFT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LEdBRTdCLEdBQUlELEVBQ0YsSUFBSyxJQUFJcFUsRUFBSSxFQUFHQSxFQUFJOEMsS0FBS3dCLE9BQVF0RSxJQUFLLENBRXBDLElBQUk4RSxFQUFLaEMsS0FBSzlDLEdBQUcsR0FFUCxNQUFOOEUsSUFDRnVQLEVBQXVCdlAsSUFBTSxHQUtuQyxJQUFLLElBQUlvTyxFQUFLLEVBQUdBLEVBQUtoVCxFQUFRb0UsT0FBUTRPLElBQU0sQ0FDMUMsSUFBSWhELEVBQU8sR0FBR0csT0FBT25RLEVBQVFnVCxJQUV6QmtCLEdBQVVDLEVBQXVCbkUsRUFBSyxNQUt0Q2lFLElBQ0dqRSxFQUFLLEdBR1JBLEVBQUssR0FBSyxHQUFHRyxPQUFPOEQsRUFBWSxTQUFTOUQsT0FBT0gsRUFBSyxJQUZyREEsRUFBSyxHQUFLaUUsR0FNZHBFLEVBQUthLEtBQUtWLE1BSVBILEksNkJDOURUaFEsRUFBT0QsUUFBVSxTQUFVd1UsRUFBSzFGLEdBUzlCLE9BUktBLElBRUhBLEVBQVUsSUFNTyxpQkFGbkIwRixFQUFNQSxHQUFPQSxFQUFJbFQsV0FBYWtULEVBQUkzRixRQUFVMkYsR0FHbkNBLEdBSUwsZUFBZUMsS0FBS0QsS0FFdEJBLEVBQU1BLEVBQUlFLE1BQU0sR0FBSSxJQUdsQjVGLEVBQVE2RixPQUVWSCxHQUFPMUYsRUFBUTZGLE1BS2IsY0FBY0YsS0FBS0QsSUFBUTFGLEVBQVE4RixXQUM5QixJQUFLckUsT0FBT2lFLEVBQUlLLFFBQVEsS0FBTSxPQUFPQSxRQUFRLE1BQU8sT0FBUSxLQUc5REwsSyw2QkNoQ1QsT0FBZSxjQUEwQiIsImZpbGUiOiJhcHAuM2E2YzdiYzEzZDg3ZjBhZGRjNjEuYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDMpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIERFTEFZOiBcImRlbGF5XCIsXG4gIEVDSE86IFwiZWNob1wiLFxuICBFTVBUWTogXCJlbXB0eVwiLFxuICBGSUxURVI6IFwiZmlsdGVyXCIsXG4gIEdBSU46IFwiZ2FpblwiLFxuICBNSUNST1BIT05FOiBcIm1pY3JvcGhvbmVcIixcbiAgT1NDSUxMQVRPUjogXCJvc2NpbGxhdG9yXCIsXG4gIEZBTExCQUNLX0RFTEFZOiAxMDAwXG59O1xuIiwiY2xhc3MgTm9kZSB7XG4gIGNvbnN0cnVjdG9yKGN0eCwgbW9kZWwsIGlkeCwgdHlwZSwgcGxheWFibGUpIHtcbiAgICB0aGlzLmN0eCA9IGN0eDtcbiAgICB0aGlzLm1vZGVsID0gbW9kZWw7XG4gICAgdGhpcy5pZHggPSBpZHg7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnBsYXlhYmxlID0gcGxheWFibGU7XG4gICAgdGhpcy5wbGF5aW5nID0gZmFsc2U7XG4gIH1cblxuICBjb25uZWN0b3IoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbm5lY3QoKSB7fSxcbiAgICAgIGRpc2Nvbm5lY3QoKSB7fVxuICAgIH07XG4gIH1cblxuICBkaXNjb25uZWN0T3RoZXJGcm9tUGFyYW0ob3RoZXJJZHgsIHBhcmFtLCBrZXkpIHtcbiAgICBpZiAob3RoZXJJZHggPj0gMCkge1xuICAgICAgdGhpcy5tb2RlbC5pdGVtc1tvdGhlcklkeF0uY29ubmVjdG9yKCkuZGlzY29ubmVjdChwYXJhbSk7XG4gICAgICBkZWxldGUgdGhpcy5tb2RlbC5jb25uZWN0aW9uc1t0aGlzLmlkeF1bYCR7dGhpcy5pZHh9XyR7a2V5fWBdO1xuICAgIH1cbiAgfVxuXG4gIGNvbm5lY3RPdGhlclRvUGFyYW0ob3RoZXJJZHgsIHBhcmFtLCBrZXkpIHtcbiAgICBpZiAob3RoZXJJZHggPj0gMCkge1xuICAgICAgdGhpcy5tb2RlbC5pdGVtc1tvdGhlcklkeF0uY29ubmVjdG9yKCkuY29ubmVjdChwYXJhbSk7XG4gICAgICB0aGlzLm1vZGVsLmNvbm5lY3Rpb25zW3RoaXMuaWR4XVtgJHtvdGhlcklkeH1fJHtrZXl9YF0gPSBwYXJhbTtcbiAgICB9XG4gIH1cblxuICByZXBsYWNlT3RoZXJPblBhcmFtKG9sZElkeCwgbmV3SWR4LCBwYXJhbSwga2V5KSB7XG4gICAgdGhpcy5kaXNjb25uZWN0T3RoZXJGcm9tUGFyYW0ob2xkSWR4LCBwYXJhbSwga2V5KTtcbiAgICB0aGlzLmNvbm5lY3RPdGhlclRvUGFyYW0obmV3SWR4LCBwYXJhbSwga2V5KTtcbiAgfVxuXG4gIHBsYXkoYm9vbCkge1xuICAgIGlmIChib29sKSB7XG4gICAgICB0aGlzLmNvbm5lY3RvcigpLmNvbm5lY3QodGhpcy5jdHguZGVzdGluYXRpb24pO1xuICAgICAgdGhpcy5wbGF5aW5nID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb25uZWN0b3IoKS5kaXNjb25uZWN0KHRoaXMuY3R4LmRlc3RpbmF0aW9uKTtcbiAgICAgIHRoaXMucGxheWluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGxhYmVsKCkge1xuICAgIHJldHVybiBgJHt0aGlzLmlkeH0gJHt0aGlzLnR5cGV9YDtcbiAgfVxuXG4gIGNvbnRyb2xzKCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHNldFZhbHVlc1RvKG5ld05vZGUpIHtcbiAgICBjb25zdCBsYXN0Q29udHJvbHMgPSB0aGlzLmNvbnRyb2xzKCkgfHwgW107XG4gICAgY29uc3QgbmV3Q29udHJvbHMgPSBuZXdOb2RlLmNvbnRyb2xzKCkgfHwgW107XG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxhc3RDb250cm9scy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmICghbmV3Q29udHJvbHNbaW5kZXhdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0Q29udHJvbHNbaW5kZXhdLnR5cGUgPT09IG5ld0NvbnRyb2xzW2luZGV4XS50eXBlKSB7XG4gICAgICAgIG5ld0NvbnRyb2xzW2luZGV4XS5zZXQobGFzdENvbnRyb2xzW2luZGV4XS5nZXQoKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZGVzY3JpYmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbHMoKS5tYXAoeCA9PiBgJHtpZHh9ICR7eC5zaG9ydH0gJHt4LmdldCgpfWApO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5wbGF5aW5nKSB7XG4gICAgICB0aGlzLnBsYXkoZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGFzT3B0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdGhpcy5pZHgsXG4gICAgICBsYWJlbDogdGhpcy5sYWJlbCgpLFxuICAgICAgdHlwZTogdGhpcy50eXBlXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE5vZGU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpZCkge1xuICBjb25zdCBub2RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoaWQpO1xuICByZXR1cm4gbm9kZXMubGVuZ3RoID4gMSA/IG5vZGVzIDogbm9kZXNbMF07XG59O1xuIiwiaW1wb3J0IFwiLi9qcy9tbW0uanNcIjtcbmltcG9ydCBcIi4vY3NzL21tbS5jc3NcIjtcbiIsImNvbnN0IGNvbm5lY3RBdWRpbyA9IHJlcXVpcmUoXCIuL2Nvbm5lY3QtYXVkaW9cIik7XG5jb25zdCBjb25uZWN0TGlzdGVuZXJzID0gcmVxdWlyZShcIi4vY29ubmVjdC1saXN0ZW5lcnNcIik7XG5jb25zdCBjcmVhdGVNb2RlbCA9IHJlcXVpcmUoXCIuL2NyZWF0ZS1tb2RlbFwiKTtcblxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgY29ubmVjdEF1ZGlvKGZ1bmN0aW9uIChlcnIsIGF1ZGlvKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgLy9kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmluZm9cIikuaW5uZXJIVE1MID1cbiAgICAgIC8vICBcIkZhaWxlZCB0byBjb25uZWN0IHRvIGF1ZGlvOiBcIiArIGVyci5tZXNzYWdlO1xuICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc05hbWUgPSBcInN0YXJ0ZWRcIjtcbiAgICAgIGNvbnN0IG1vZGVsID0gY3JlYXRlTW9kZWwoYXVkaW8pO1xuICAgICAgY29ubmVjdExpc3RlbmVycyhtb2RlbCk7XG4gICAgfVxuICB9KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbm5lY3RBdWRpbyhjYWxsYmFjaykge1xuICBjb25zdCBNRURJQV9DT05TVFJBSU5UUyA9IHtcbiAgICBhdWRpbzogdHJ1ZSxcbiAgICB2aWRlbzogZmFsc2VcbiAgfTtcblxuICBpZiAobmF2aWdhdG9yLm1lZGlhRGV2aWNlcykge1xuICAgIG5hdmlnYXRvci5tZWRpYURldmljZXNcbiAgICAgIC5nZXRVc2VyTWVkaWEoTUVESUFfQ09OU1RSQUlOVFMpXG4gICAgICAudGhlbihmdW5jdGlvbiAobWVkaWFTdHJlYW0pIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgbWVkaWFTdHJlYW0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjayhuZXcgRXJyb3IoXCJuYXZpZ2F0b3IubWVkaWFEZXZpY2VzIG5vdCBzdXBwb3J0ZWRcIikpO1xuICB9XG59O1xuIiwiY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuY29uc3QgZmlsbFNlbGVjdCA9IHJlcXVpcmUoXCIuL2ZpbGwtc2VsZWN0XCIpO1xuY29uc3Qgc2VxdWVuY2VyRmFjdG9yeSA9IHJlcXVpcmUoXCIuL3NlcXVlbmNlclwiKTtcbmNvbnN0IHNlbGVjdCA9IHJlcXVpcmUoXCIuL3NlbGVjdFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjb25uZWN0TGlzdGVuZXJzKG1vZGVsKSB7XG4gIGNvbnN0IHsgaXRlbXMsIHR5cGVzLCBjb25uZWN0aW9ucyB9ID0gbW9kZWw7XG4gIHNlcXVlbmNlckZhY3RvcnkobW9kZWwpO1xuICBsZXQgY3VycmVudElkeCA9IG51bGw7XG4gIGxldCBjdXJyZW50ID0gbnVsbDtcbiAgbGV0IG5leHRUeXBlID0gbnVsbDtcbiAgbGV0IGxhc3RDb250cm9sID0gbnVsbDtcblxuICBjb25zdCB3cmFwcGVyID0gc2VsZWN0KFwiLndyYXBwZXJcIik7XG4gIGNvbnN0IGNvbnRyb2xBcmVhID0gc2VsZWN0KFwiLmNvbnRyb2xzXCIpO1xuICBjb25zdCBjb25maXJtRWwgPSBzZWxlY3QoXCIuY29uZmlybVwiKTtcbiAgY29uc3QgbGFiZWwgPSBzZWxlY3QoXCIjbmFtZVwiKTtcbiAgY29uc3QgcGxheSA9IHNlbGVjdChcIiNwbGF5XCIpO1xuICBjb25zdCBjb250cm9sU2hvcnRFbHMgPSBzZWxlY3QoXCIuY29udHJvbHMgLmNvbnRyb2wgLnNob3J0XCIpO1xuICBjb25zdCBjb250cm9sTG9uZ0VscyA9IHNlbGVjdChcIi5jb250cm9scyAuY29udHJvbCAubG9uZ1wiKTtcbiAgY29uc3QgY29udHJvbFZhbEVscyA9IHNlbGVjdChcIi5jb250cm9scyAuY29udHJvbCBpbnB1dFwiKTtcbiAgY29uc3QgY29udHJvbEluRWxzID0gc2VsZWN0KFwiLmNvbnRyb2xzIC5jb250cm9sIHNlbGVjdFwiKTtcbiAgY29uc3QgY29udmVydEVscyA9IHNlbGVjdChcIi5ub2RlcyBidXR0b25cIik7XG4gIGNvbnN0IG9wdGlvbkVscyA9IHNlbGVjdChcIi5vcHRpb25zIGJ1dHRvblwiKTtcbiAgcGxheS5jaGVja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gc2V0T3B0aW9uU3R5bGUoKSB7XG4gICAgY29uc3Qgc3R5bGUgPSBpdGVtc1tjdXJyZW50SWR4XS50eXBlICsgKGl0ZW1zW2N1cnJlbnRJZHhdLnBsYXlpbmcgPyBcIiBwbGF5aW5nXCIgOiBcIlwiKTtcbiAgICBvcHRpb25FbHNbY3VycmVudElkeF0uY2xhc3NOYW1lID0gc3R5bGU7XG4gICAgb3B0aW9uRWxzW2N1cnJlbnRJZHhdLnNldEF0dHJpYnV0ZShcInRpdGxlXCIsIHN0eWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbm5lY3QoaW5kZXgpIHtcbiAgICBjdXJyZW50SWR4ID0gaW5kZXg7XG4gICAgY3VycmVudCA9IGl0ZW1zW2luZGV4XTtcbiAgICBsYWJlbC50ZXh0Q29udGVudCA9IGN1cnJlbnQubGFiZWwoKTtcbiAgICBjb25zdCB7IHBsYXlpbmcsIHBsYXlhYmxlIH0gPSBjdXJyZW50O1xuXG4gICAgbGV0IGNsYXNzZXMgPSBcImNvbnRyb2xzIFwiO1xuICAgIGlmIChwbGF5YWJsZSkge1xuICAgICAgY2xhc3NlcyArPSBcInBsYXlhYmxlIFwiO1xuICAgICAgcGxheS5jaGVja2VkID0gcGxheWluZztcbiAgICB9XG5cbiAgICBjb25zdCBjb250cm9scyA9IGN1cnJlbnQuY29udHJvbHMoKTtcbiAgICBmb3IgKGxldCBjSW5kZXggPSAwOyBjSW5kZXggPCBjb250cm9scy5sZW5ndGg7IGNJbmRleCsrKSB7XG4gICAgICBjb25zdCBjb250cm9sID0gY29udHJvbHNbY0luZGV4XTtcbiAgICAgIGNsYXNzZXMgKz0gXCJjb250cm9sXCIgKyAoY0luZGV4ICsgMSkgKyBjb250cm9sLnR5cGUgKyBcIiBcIjtcbiAgICAgIGNvbnRyb2xTaG9ydEVsc1tjSW5kZXhdLnRleHRDb250ZW50ID0gYCgke2NvbnRyb2wuc2hvcnR9KWA7XG4gICAgICBjb250cm9sTG9uZ0Vsc1tjSW5kZXhdLnRleHRDb250ZW50ID0gY29udHJvbC5sYWJlbDtcblxuICAgICAgaWYgKGNvbnRyb2wudHlwZSA9PT0gXCJ2YWxcIikge1xuICAgICAgICBjb250cm9sVmFsRWxzW2NJbmRleF0udmFsdWUgPSBjb250cm9sLmdldCgpO1xuICAgICAgfSBlbHNlIGlmIChjb250cm9sLnR5cGUgPT09IFwiaW5cIikge1xuICAgICAgICBmaWxsU2VsZWN0KFxuICAgICAgICAgIGNvbnRyb2xJbkVsc1tjSW5kZXhdLFxuICAgICAgICAgIGNvbnRyb2wuZ2V0KCksXG4gICAgICAgICAgaXRlbXNcbiAgICAgICAgICAgIC5tYXAoeCA9PiB4LmFzT3B0aW9uKCkpXG4gICAgICAgICAgICAuZmlsdGVyKHggPT4geC52YWx1ZSAhPT0gaW5kZXggJiYgeC50eXBlICE9PSBjb25zdGFudHMuRU1QVFkpLFxuICAgICAgICAgIHRydWVcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoY29udHJvbC50eXBlID09PSBcInR5cGVcIikge1xuICAgICAgICBmaWxsU2VsZWN0KFxuICAgICAgICAgIGNvbnRyb2xJbkVsc1tjSW5kZXhdLFxuICAgICAgICAgIGNvbnRyb2wuZ2V0KCksXG4gICAgICAgICAgY29udHJvbC52YWx1ZXMubWFwKHggPT4gKHsgdmFsdWU6IHgsIGxhYmVsOiB4IH0pKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnRyb2xBcmVhLmNsYXNzTmFtZSA9IGNsYXNzZXM7XG4gIH1cblxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgb3B0aW9uRWxzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIG9wdGlvbkVsc1tpbmRleF0ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbm5lY3QoaW5kZXgpO1xuICAgIH07XG4gIH1cblxuICBjb25zdCB3aW5kb3dHcmFwaCA9IHNlbGVjdChcImJ1dHRvblt2YWx1ZT1ncmFwaF1cIik7XG4gIHdpbmRvd0dyYXBoLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgd3JhcHBlci5jbGFzc05hbWUgPSBcIndyYXBwZXIgZ3JhcGhcIjtcbiAgfTtcblxuICBjb25zdCB3aW5kb3dTZXF1ZW5jZXIgPSBzZWxlY3QoXCJidXR0b25bdmFsdWU9c2VxdWVuY2VyXVwiKTtcbiAgd2luZG93U2VxdWVuY2VyLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgd3JhcHBlci5jbGFzc05hbWUgPSBcIndyYXBwZXIgc2VxdWVuY2VyXCI7XG4gIH07XG5cbiAgcGxheS5vbmNsaWNrID0gZnVuY3Rpb24gKGV2dCkge1xuICAgIGlmIChjdXJyZW50KSB7XG4gICAgICBjdXJyZW50LnBsYXkoZXZ0LnRhcmdldC5jaGVja2VkKTtcbiAgICAgIHNldE9wdGlvblN0eWxlKCk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjb250cm9sVmFsRWxzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnRyb2xWYWxFbHNbaW5kZXhdLnZhbHVlID0gbnVsbDtcbiAgICBjb250cm9sVmFsRWxzW2luZGV4XS5vbmNoYW5nZSA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIGlmIChjdXJyZW50KSB7XG4gICAgICAgIGN1cnJlbnQuY29udHJvbHMoKVtpbmRleF0uc2V0KGV2dC50YXJnZXQudmFsdWUpO1xuICAgICAgICBsYWJlbC50ZXh0Q29udGVudCA9IGN1cnJlbnQubGFiZWwoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGNvbnRyb2xJbkVscy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBjb250cm9sSW5FbHNbaW5kZXhdLm9uY2hhbmdlID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgY29uc3QgdmFsID0gZXZ0LnRhcmdldC52YWx1ZTtcbiAgICAgICAgY3VycmVudC5jb250cm9scygpW2luZGV4XS5zZXQocGFyc2VJbnQodmFsKSB8fCB2YWwpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjb252ZXJ0KCkge1xuICAgIGNvbnN0IG5ld0NvbnRyb2wgPSB0eXBlc1tuZXh0VHlwZV0oY3VycmVudElkeCk7XG4gICAgbGFzdENvbnRyb2wuc2V0VmFsdWVzVG8obmV3Q29udHJvbCk7XG4gICAgY29uc3QgY3VycmVudENvbm5lY3Rpb25zID0gbW9kZWwuY29ubmVjdGlvbnNbY3VycmVudElkeF07XG4gICAgT2JqZWN0LmtleXMoY3VycmVudENvbm5lY3Rpb25zKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBsYXN0Q29udHJvbC5jb25uZWN0b3IoKS5jb25uZWN0KGN1cnJlbnRDb25uZWN0aW9uc1trZXldKTtcbiAgICAgIG5ld0NvbnRyb2wuY29ubmVjdG9yKCkuY29ubmVjdChjdXJyZW50Q29ubmVjdGlvbnNba2V5XSk7XG4gICAgfSk7XG5cbiAgICBsYXN0Q29udHJvbC5kZXN0cm95KCk7XG4gICAgaXRlbXNbY3VycmVudElkeF0gPSBuZXdDb250cm9sO1xuICAgIGNvbm5lY3QoY3VycmVudElkeCk7XG4gICAgc2V0T3B0aW9uU3R5bGUoKTtcbiAgfVxuXG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBjb252ZXJ0RWxzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnZlcnRFbHNbaW5kZXhdLm9uY2xpY2sgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICBuZXh0VHlwZSA9IGV2dC50YXJnZXQudmFsdWU7XG4gICAgICAgIGxhc3RDb250cm9sID0gaXRlbXNbY3VycmVudElkeF07XG4gICAgICAgIGlmIChsYXN0Q29udHJvbC50eXBlID09PSB0eXBlc1tuZXh0VHlwZV0gfHxcbiAgICAgICAgICBsYXN0Q29udHJvbC50eXBlID09PSBjb25zdGFudHMuTUlDUk9QSE9ORSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdENvbnRyb2wudHlwZSA9PT0gY29uc3RhbnRzLkVNUFRZKSB7XG4gICAgICAgICAgY29udmVydCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRyb2xBcmVhLmNsYXNzTmFtZSA9IFwiY29udHJvbHMgaGlkZVwiO1xuICAgICAgICAgIGNvbmZpcm1FbC5jbGFzc05hbWUgPSBcImNvbmZpcm1cIjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBzZWxlY3QoXCJidXR0b25bdmFsdWU9Y2hhbmdlXCIpLm9uY2xpY2sgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgY29udHJvbEFyZWEuY2xhc3NOYW1lID0gXCJjb250cm9sc1wiO1xuICAgIGNvbmZpcm1FbC5jbGFzc05hbWUgPSBcImNvbmZpcm0gaGlkZVwiO1xuICAgIGNvbnZlcnQoKTtcbiAgfVxuXG4gIHNlbGVjdChcImJ1dHRvblt2YWx1ZT1jYW5jZWxcIikub25jbGljayA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICBjb250cm9sQXJlYS5jbGFzc05hbWUgPSBcImNvbnRyb2xzXCI7XG4gICAgY29uZmlybUVsLmNsYXNzTmFtZSA9IFwiY29uZmlybSBoaWRlXCI7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzZWxlY3RFbCwgY3VycmVudFZhbCwgaXRlbXMsIGluY2x1ZGVFbXB0eSkge1xuICBzZWxlY3RFbC5yZXBsYWNlQ2hpbGRyZW4oKTtcblxuICBpZiAoaW5jbHVkZUVtcHR5KSB7XG4gICAgY29uc3QgdW5zZWxlY3RlZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvcHRpb25cIik7XG4gICAgdW5zZWxlY3RlZC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcIlwiKTtcbiAgICB1bnNlbGVjdGVkLnRleHQgPSBcIi1cIjtcbiAgICBpZiAoY3VycmVudFZhbCA9PT0gbnVsbCB8fCBjdXJyZW50VmFsID09PSB1bmRlZmluZWQgfHwgY3VycmVudFZhbCA9PT0gXCJcIikge1xuICAgICAgdW5zZWxlY3RlZC5zZXRBdHRyaWJ1dGUoXCJzZWxlY3RlZFwiLCB0cnVlKTtcbiAgICB9XG4gICAgc2VsZWN0RWwuYXBwZW5kQ2hpbGQodW5zZWxlY3RlZCk7XG4gIH1cblxuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgaXRlbXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY29uc3QgeyB2YWx1ZSwgbGFiZWwgfSA9IGl0ZW1zW2luZGV4XTtcbiAgICBjb25zdCBvcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgIG9wdGlvbi5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCB2YWx1ZSk7XG4gICAgb3B0aW9uLnRleHQgPSBsYWJlbDtcbiAgICBpZiAoU3RyaW5nKGN1cnJlbnRWYWwpID09PSBTdHJpbmcodmFsdWUpKSB7XG4gICAgICBvcHRpb24uc2V0QXR0cmlidXRlKFwic2VsZWN0ZWRcIiwgdHJ1ZSk7XG4gICAgfVxuICAgIHNlbGVjdEVsLmFwcGVuZENoaWxkKG9wdGlvbik7XG4gIH1cbn07XG4iLCJjb25zdCBzZWxlY3QgPSByZXF1aXJlKFwiLi9zZWxlY3RcIik7XG5jb25zdCB7IEZBTExCQUNLX0RFTEFZIH0gPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jb25zdCBjb21tYW5kU3BsaXR0ZXIgPSAvXihbMC05XXsxfSkgKihbYS16QS1aXXsxLDJ9KSAqKFswLTkuXSopJC87XG5jb25zdCBjb21tYW5kU3BsaXR0ZXJOb0lkeCA9IC9eKFthLXpBLVpdezEsMn0pICooWzAtOS5dKikkLztcbmNvbnN0IHdhaXRTcGxpdHRlciA9IC9edyAqKFswLTkuXSopKC4qKSQvO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtb2RlbCkge1xuICBjb25zdCBzZXF1ZW5jZXJFbCA9IHNlbGVjdChcIi5zZXF1ZW5jZXJcIik7XG4gIGNvbnN0IHNlcXVlbmNlckNvbnRyb2xFbCA9IHNlbGVjdChcIiNzZXF1ZW5jZXJDb250cm9sXCIpO1xuICBjb25zdCBsaW5lc0VsID0gc2VsZWN0KFwiI3NlcXVlbmNlXCIpO1xuICBjb25zdCBkZWxheSA9IHNlbGVjdChcIiNkZWxheVwiKTtcblxuICBsZXQgbGluZU51bSA9IDA7XG4gIGxldCB0aW1lb3V0SWQgPSBudWxsO1xuICBsZXQgcnVubmluZyA9IGZhbHNlO1xuICBsZXQgbGFzdElkeCA9IC0xO1xuXG4gIGZ1bmN0aW9uIGV4ZWN1dGVDb21tYW5kKGlkeCwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChpZHggPCAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY29udHJvbHMgPSBtb2RlbC5pdGVtc1tpZHhdLmNvbnRyb2xzKCkgfHwgW107XG4gICAgY29uc3QgY29udHJvbCA9IGNvbnRyb2xzLmZpbmQoeCA9PiB4LnNob3J0ID09PSBrZXkpIHx8IHt9O1xuICAgIGlmIChjb250cm9sLnR5cGUgPT09IFwidmFsXCIpIHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlRmxvYXQodmFsdWUpO1xuICAgICAgaWYgKHBhcnNlZCkge1xuICAgICAgICBjb250cm9sLnNldChwYXJzZWQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY29udHJvbC50eXBlID09PSBcImluXCIpIHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlSW50KHZhbHVlKTtcbiAgICAgIGlmIChwYXJzZWQgJiYgaWR4ICE9PSBwYXJzZWQpIHtcbiAgICAgICAgY29udHJvbC5zZXQocGFyc2VkKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvbnRyb2wudHlwZSA9PT0gXCJ0eXBlXCIpIHtcbiAgICAgIGNvbnRyb2wuc2V0KHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZURlbGF5KCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KGRlbGF5KSB8fCBGQUxMQkFDS19ERUxBWTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NMaW5lKCkge1xuICAgIGNvbnN0IGxpbmVzID0gbGluZXNFbC52YWx1ZS5zcGxpdChcIlxcblwiKTtcbiAgICBpZiAobGluZU51bSA+PSBsaW5lcy5sZW5ndGgpIHtcbiAgICAgIGxpbmVOdW0gPSAwO1xuICAgIH1cbiAgICBjb25zdCBwaWVjZXMgPSAobGluZXNbbGluZU51bV0gfHwgXCJcIikuc3BsaXQoXCI7XCIpO1xuICAgIGZvciAobGV0IHBpZWNlIG9mIHBpZWNlcykge1xuICAgICAgY29uc3QgY29tbWFuZCA9IGNvbW1hbmRTcGxpdHRlci5leGVjKHBpZWNlLnRyaW0oKSk7XG4gICAgICBpZiAoY29tbWFuZCkge1xuICAgICAgICBjb25zdCBbLCBpZHgsIGtleSwgdmFsdWVdID0gY29tbWFuZDtcbiAgICAgICAgZXhlY3V0ZUNvbW1hbmQoaWR4LCBrZXksIHZhbHVlKTtcbiAgICAgICAgbGFzdElkeCA9IGlkeDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQyID0gY29tbWFuZFNwbGl0dGVyTm9JZHguZXhlYyhwaWVjZS50cmltKCkpO1xuICAgICAgICBpZiAoY29tbWFuZDIpIHtcbiAgICAgICAgICBjb25zdCBbLCBrZXksIHZhbHVlXSA9IGNvbW1hbmQyO1xuICAgICAgICAgIGV4ZWN1dGVDb21tYW5kKGxhc3RJZHgsIGtleSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHdhaXRDb21tYW5kID0gd2FpdFNwbGl0dGVyLmV4ZWMocGllY2UudHJpbSgpKTtcbiAgICAgICAgICBpZiAod2FpdENvbW1hbmQpIHtcbiAgICAgICAgICAgIGNvbnN0IFssIGR1cmF0aW9uLCBvcHRVbml0XSA9IHdhaXRDb21tYW5kO1xuICAgICAgICAgICAgY29uc3QgZGVsYXkgPVxuICAgICAgICAgICAgICBvcHRVbml0ID09PSBcIm1zXCJcbiAgICAgICAgICAgICAgICA/IE1hdGguZmxvb3IoZHVyYXRpb24pXG4gICAgICAgICAgICAgICAgOiBNYXRoLmZsb29yKGR1cmF0aW9uICogMTAwMCk7XG5cbiAgICAgICAgICAgIGxpbmVOdW0rKztcbiAgICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQocHJvY2Vzc0xpbmUsIGRlbGF5KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocnVubmluZykge1xuICAgICAgbGluZU51bSsrO1xuICAgICAgdGltZW91dElkID0gc2V0VGltZW91dChwcm9jZXNzTGluZSwgcGFyc2VEZWxheSgpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgcnVubmluZyA9ICFydW5uaW5nO1xuICAgIGlmIChydW5uaW5nKSB7XG4gICAgICBzZXF1ZW5jZXJFbC5jbGFzc05hbWUgPSBcInNlcXVlbmNlciBydW5uaW5nXCI7XG4gICAgICBzZXF1ZW5jZXJDb250cm9sRWwudGV4dENvbnRlbnQgPSBcIlN0b3BcIjtcbiAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQocHJvY2Vzc0xpbmUsIHBhcnNlRGVsYXkoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlcXVlbmNlckVsLmNsYXNzTmFtZSA9IFwic2VxdWVuY2VyXCI7XG4gICAgICBzZXF1ZW5jZXJDb250cm9sRWwudGV4dENvbnRlbnQgPSBcIlN0YXJ0XCI7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICB9XG4gIH1cblxuICBzZXF1ZW5jZXJDb250cm9sRWwub25jbGljayA9IHRvZ2dsZTtcbn07XG4iLCJjb25zdCBjb25zdGFudHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5jb25zdCBjcmVhdGVNaWNyb3Bob25lID0gcmVxdWlyZShcIi4vbm9kZXMvY3JlYXRlLW1pY3JvcGhvbmVcIik7XG5jb25zdCBjcmVhdGVPc2NpbGxhdG9yID0gcmVxdWlyZShcIi4vbm9kZXMvY3JlYXRlLW9zY2lsbGF0b3JcIik7XG5jb25zdCBjcmVhdGVGaWx0ZXIgPSByZXF1aXJlKFwiLi9ub2Rlcy9jcmVhdGUtZmlsdGVyXCIpO1xuY29uc3QgY3JlYXRlRGVsYXkgPSByZXF1aXJlKFwiLi9ub2Rlcy9jcmVhdGUtZGVsYXlcIik7XG5jb25zdCBjcmVhdGVFY2hvID0gcmVxdWlyZShcIi4vbm9kZXMvY3JlYXRlLWVjaG9cIik7XG5jb25zdCBjcmVhdGVHYWluID0gcmVxdWlyZShcIi4vbm9kZXMvY3JlYXRlLWdhaW5cIik7XG5jb25zdCBOb2RlID0gcmVxdWlyZShcIi4vbm9kZXMvTm9kZVwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVNb2RlbChzdHJlYW0pIHtcbiAgY29uc3QgYXVkaW9DdHggPSBuZXcgKHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCkoKTtcbiAgY29uc3QgaXRlbXMgPSBuZXcgQXJyYXkoMTApO1xuICBjb25zdCBjb25uZWN0aW9ucyA9IG5ldyBBcnJheSgxMCkuZmlsbCgwKS5tYXAoeCA9PiAoe30pKTtcbiAgY29uc3QgdHlwZXMgPSB7fTtcbiAgY29uc3QgbW9kZWwgPSB7XG4gICAgaXRlbXMsXG4gICAgdHlwZXMsXG4gICAgY29ubmVjdGlvbnNcbiAgfTtcbiAgdHlwZXMub3NjaWxsYXRvciA9IGNyZWF0ZU9zY2lsbGF0b3IoYXVkaW9DdHgsIG1vZGVsKTtcbiAgdHlwZXMuZmlsdGVyID0gY3JlYXRlRmlsdGVyKGF1ZGlvQ3R4LCBtb2RlbCk7XG4gIHR5cGVzLmRlbGF5ID0gY3JlYXRlRGVsYXkoYXVkaW9DdHgsIG1vZGVsKTtcbiAgdHlwZXMuZWNobyA9IGNyZWF0ZUVjaG8oYXVkaW9DdHgsIG1vZGVsKTtcbiAgdHlwZXMuZ2FpbiA9IGNyZWF0ZUdhaW4oYXVkaW9DdHgsIG1vZGVsKTtcblxuICBpdGVtc1swXSA9IGNyZWF0ZU1pY3JvcGhvbmUoYXVkaW9DdHgsIG1vZGVsLCAwLCBzdHJlYW0pO1xuICBmb3IgKGxldCBpbmRleCA9IDE7IGluZGV4IDwgMTA7IGluZGV4KyspIHtcbiAgICBpdGVtc1tpbmRleF0gPSBuZXcgTm9kZShhdWRpb0N0eCwgbW9kZWwsIGluZGV4LCBjb25zdGFudHMuRU1QVFksIGZhbHNlKTtcbiAgfVxuXG4gIC8vIGZvciBkaWFnbm9zdGljc1xuICB3aW5kb3cubW9kZWwgPSBtb2RlbDtcblxuICByZXR1cm4gbW9kZWw7XG59O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoXCIuL05vZGVcIik7XG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG5jbGFzcyBNaWNyb3Bob25lIGV4dGVuZHMgTm9kZSB7XG4gIGNvbnN0cnVjdG9yKGN0eCwgbW9kZWwsIGlkeCwgc3RyZWFtKSB7XG4gICAgc3VwZXIoY3R4LCBtb2RlbCwgaWR4LCBjb25zdGFudHMuTUlDUk9QSE9ORSwgdHJ1ZSk7XG4gICAgdGhpcy5pbnB1dCA9IGN0eC5jcmVhdGVNZWRpYVN0cmVhbVNvdXJjZShzdHJlYW0pO1xuICAgIHRoaXMuZ2FpbiA9IGN0eC5jcmVhdGVHYWluKCk7XG4gICAgdGhpcy5pbnB1dC5jb25uZWN0KHRoaXMuZ2Fpbik7XG5cbiAgICB0aGlzLl9jb250cm9scyA9IHRoaXMuaW5pdENvbnRyb2xzKCk7XG4gICAgdGhpcy5fY29udHJvbHNbMF0uc2V0KDEpO1xuICB9XG5cbiAgY29ubmVjdG9yKCkge1xuICAgIHJldHVybiB0aGlzLmdhaW47XG4gIH1cblxuICBpbml0Q29udHJvbHMoKSB7XG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIFtcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJ2YWxcIixcbiAgICAgICAgc2hvcnQ6IFwiZ1wiLFxuICAgICAgICBsYWJlbDogXCJHYWluXCIsXG4gICAgICAgIHNldCh2YWwpIHtcbiAgICAgICAgICB0aGF0LmdhaW5WYWx1ZSA9IHZhbDtcbiAgICAgICAgICB0aGF0LmdhaW4uZ2Fpbi5zZXRUYXJnZXRBdFRpbWUodmFsLCAwLCAwKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGF0LmdhaW5WYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF07XG4gIH1cblxuICBjb250cm9scygpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udHJvbHM7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIC8vIGRvIG5vdGhpbmdcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjdHgsIG1vZGVsLCBpZHgsIHN0cmVhbSkge1xuICByZXR1cm4gbmV3IE1pY3JvcGhvbmUoY3R4LCBtb2RlbCwgaWR4LCBzdHJlYW0pO1xufTtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKFwiLi9Ob2RlXCIpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbmNvbnN0IFRZUEVTID0gW1wic2F3dG9vdGhcIiwgXCJzaW5lXCIsIFwic3F1YXJlXCIsIFwidHJpYW5nbGVcIl07XG5cbmNsYXNzIE9zY2lsbGF0b3IgZXh0ZW5kcyBOb2RlIHtcbiAgY29uc3RydWN0b3IoY3R4LCBtb2RlbCwgaWR4KSB7XG4gICAgc3VwZXIoY3R4LCBtb2RlbCwgaWR4LCBjb25zdGFudHMuT1NDSUxMQVRPUiwgdHJ1ZSk7XG4gICAgdGhpcy5vc2MgPSBjdHguY3JlYXRlT3NjaWxsYXRvcigpO1xuICAgIHRoaXMuZ2FpbiA9IGN0eC5jcmVhdGVHYWluKCk7XG4gICAgdGhpcy5kZWxheSA9IGN0eC5jcmVhdGVEZWxheSgpO1xuICAgIHRoaXMub3NjLmNvbm5lY3QodGhpcy5nYWluKTtcbiAgICB0aGlzLmdhaW4uY29ubmVjdCh0aGlzLmRlbGF5KTtcbiAgICB0aGlzLm9zYy5zdGFydCgwKTtcblxuICAgIHRoaXMuZGVsYXkuZGVsYXlUaW1lLnNldFRhcmdldEF0VGltZSgwLjAwMSwgMCwgMCk7XG4gICAgdGhpcy5fY29udHJvbHMgPSB0aGlzLmluaXRDb250cm9scygpO1xuICAgIHRoaXMuX2NvbnRyb2xzWzBdLnNldCgxMDApO1xuICAgIHRoaXMuX2NvbnRyb2xzWzJdLnNldCgxKTtcbiAgICB0aGlzLl9jb250cm9sc1s0XS5zZXQoXCJzaW5lXCIpO1xuICB9XG5cbiAgbGFiZWwoKSB7XG4gICAgcmV0dXJuIGAke3RoaXMuaWR4fSAke3RoaXMudHlwZX0gJHt0aGlzLm9zYy50eXBlfWA7XG4gIH1cblxuICBjb25uZWN0b3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVsYXk7XG4gIH1cblxuICBzdWJ0eXBlKCkge1xuICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZXM6IFtdLFxuICAgICAgc2V0KHZhbCkge1xuICAgICAgICB0aGF0Lm9zYy50eXBlID0gdmFsO1xuICAgICAgfSxcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoYXQub3NjLnR5cGU7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGRlc3Ryb3koKSB7XG4gICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIHRoaXMuZGlzY29ubmVjdE90aGVyRnJvbVBhcmFtKHRoaXMuZnJlcUNvbm5lY3RWYWx1ZSwgdGhpcy5vc2MuZnJlcXVlbmN5KTtcbiAgICB0aGlzLmRpc2Nvbm5lY3RPdGhlckZyb21QYXJhbSh0aGlzLmdhaW5Db25uZWN0VmFsdWUsIHRoaXMuZ2Fpbi5nYWluKTtcbiAgICB0aGlzLm9zYy5zdG9wKCk7XG4gIH1cblxuICBjb250cm9scygpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udHJvbHM7XG4gIH1cblxuICBpbml0Q29udHJvbHMoKSB7XG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIFtcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJ2YWxcIixcbiAgICAgICAgc2hvcnQ6IFwiZlwiLFxuICAgICAgICBsYWJlbDogXCJGcmVxXCIsXG4gICAgICAgIHNldCh2YWwpIHtcbiAgICAgICAgICB0aGF0LmZyZXFWYWx1ZSA9IHZhbDtcbiAgICAgICAgICB0aGF0Lm9zYy5mcmVxdWVuY3kuc2V0VGFyZ2V0QXRUaW1lKHZhbCwgMCwgMCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhhdC5mcmVxVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwiaW5cIixcbiAgICAgICAgc2hvcnQ6IFwiZm1cIixcbiAgICAgICAgbGFiZWw6IFwiRnJlcSBNb2RcIixcbiAgICAgICAgc2V0KHZhbCkge1xuICAgICAgICAgIHRoYXQucmVwbGFjZU90aGVyT25QYXJhbShcbiAgICAgICAgICAgIHRoYXQuZnJlcUNvbm5lY3RWYWx1ZSxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIHRoYXQub3NjLmZyZXF1ZW5jeSxcbiAgICAgICAgICAgIFwiZnJlcUNvbm5lY3RcIlxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc29sZS5sb2coXCI8PDxcIiwgdmFsKTtcbiAgICAgICAgICB0aGF0LmZyZXFDb25uZWN0VmFsdWUgPSB2YWw7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIj4+PlwiLCB0aGF0LmZyZXFDb25uZWN0VmFsdWUpO1xuICAgICAgICAgIHJldHVybiB0aGF0LmZyZXFDb25uZWN0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwidmFsXCIsXG4gICAgICAgIHNob3J0OiBcImdcIixcbiAgICAgICAgbGFiZWw6IFwiR2FpblwiLFxuICAgICAgICBzZXQodmFsKSB7XG4gICAgICAgICAgdGhhdC5nYWluVmFsdWUgPSB2YWw7XG4gICAgICAgICAgdGhhdC5nYWluLmdhaW4uc2V0VGFyZ2V0QXRUaW1lKHZhbCwgMCwgMCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhhdC5nYWluVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwiaW5cIixcbiAgICAgICAgc2hvcnQ6IFwiZ1wiLFxuICAgICAgICBsYWJlbDogXCJHYWluIE1vZFwiLFxuICAgICAgICBzZXQodmFsKSB7XG4gICAgICAgICAgdGhhdC5yZXBsYWNlT3RoZXJPblBhcmFtKFxuICAgICAgICAgICAgdGhhdC5nYWluQ29ubmVjdFZhbHVlLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgdGhhdC5nYWluLmdhaW4sXG4gICAgICAgICAgICBcImdhaW5Db25uZWN0XCJcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoYXQuZ2FpbkNvbm5lY3RWYWx1ZSA9IHZhbDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGF0LmdhaW5Db25uZWN0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwidHlwZVwiLFxuICAgICAgICBzaG9ydDogXCJ0XCIsXG4gICAgICAgIGxhYmVsOiBcIlR5cGVcIixcbiAgICAgICAgdmFsdWVzOiBUWVBFUyxcbiAgICAgICAgc2V0KHZhbCkge1xuICAgICAgICAgIGlmICghVFlQRVMuaW5jbHVkZXModmFsKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGF0Lm9zYy50eXBlID0gdmFsO1xuICAgICAgICB9LFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoYXQub3NjLnR5cGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGN0eCwgbW9kZWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpZHgpIHtcbiAgICBjb25zdCBsYXN0ID0gbW9kZWwuaXRlbXNbaWR4XTtcbiAgICBpZiAoW2NvbnN0YW50cy5PU0NJTExBVE9SLCBjb25zdGFudHMuTUlDUk9QSE9ORV0uaW5jbHVkZXMobGFzdC50eXBlKSkge1xuICAgICAgcmV0dXJuIGxhc3Q7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT3NjaWxsYXRvcihjdHgsIG1vZGVsLCBpZHgpO1xuICB9O1xufTtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKFwiLi9Ob2RlXCIpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbmNvbnN0IFRZUEVTID0gW1wibG93cGFzc1wiLCBcImhpZ2hwYXNzXCIsIFwiYmFuZHBhc3NcIiwgXCJub3RjaFwiXTtcblxuY2xhc3MgRmlsdGVyIGV4dGVuZHMgTm9kZSB7XG4gIGNvbnN0cnVjdG9yKGN0eCwgbW9kZWwsIGlkeCkge1xuICAgIHN1cGVyKGN0eCwgbW9kZWwsIGlkeCwgY29uc3RhbnRzLkZJTFRFUiwgdHJ1ZSk7XG4gICAgdGhpcy5tb2RlbCA9IG1vZGVsO1xuICAgIHRoaXMuZmlsdGVyID0gY3R4LmNyZWF0ZUJpcXVhZEZpbHRlcigpO1xuXG4gICAgdGhpcy5fY29udHJvbHMgPSB0aGlzLmluaXRDb250cm9scygpO1xuICAgIHRoaXMuX2NvbnRyb2xzWzBdLnNldCgxMDApO1xuICAgIHRoaXMuX2NvbnRyb2xzWzJdLnNldCgwLjcwNyk7XG4gICAgdGhpcy5fY29udHJvbHNbNF0uc2V0KFwibG93cGFzc1wiKTtcbiAgfVxuXG4gIGxhYmVsKCkge1xuICAgIHJldHVybiBgJHt0aGlzLmlkeH0gJHt0aGlzLnR5cGV9ICR7dGhpcy5maWx0ZXIudHlwZX1gO1xuICB9XG5cbiAgY29ubmVjdG9yKCkge1xuICAgIHJldHVybiB0aGlzLmZpbHRlcjtcbiAgfVxuXG4gIGNvbnRyb2xzKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250cm9scztcbiAgfVxuXG4gIGluaXRDb250cm9scygpIHtcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gW1xuICAgICAge1xuICAgICAgICB0eXBlOiBcInZhbFwiLFxuICAgICAgICBzaG9ydDogXCJmXCIsXG4gICAgICAgIGxhYmVsOiBcIkZyZXFcIixcbiAgICAgICAgc2V0KHZhbCkge1xuICAgICAgICAgIHRoYXQuZnJlcVZhbHVlID0gdmFsO1xuICAgICAgICAgIHRoYXQuZmlsdGVyLmZyZXF1ZW5jeS5zZXRUYXJnZXRBdFRpbWUodmFsLCAwLCAwKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGF0LmZyZXFWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJpblwiLFxuICAgICAgICBzaG9ydDogXCJmbVwiLFxuICAgICAgICBsYWJlbDogXCJGcmVxIE1vZFwiLFxuICAgICAgICBzZXQodmFsKSB7XG4gICAgICAgICAgdGhhdC5yZXBsYWNlT3RoZXJPblBhcmFtKFxuICAgICAgICAgICAgdGhhdC5mcmVxQ29ubmVjdFZhbHVlLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgdGhhdC5maWx0ZXIuZnJlcXVlbmN5LFxuICAgICAgICAgICAgXCJmcmVxQ29ubmVjdFwiXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGF0LmZyZXFDb25uZWN0VmFsdWUgPSB2YWw7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhhdC5mcmVxQ29ubmVjdFZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiBcInZhbFwiLFxuICAgICAgICBzaG9ydDogXCJxXCIsXG4gICAgICAgIGxhYmVsOiBcIlFcIixcbiAgICAgICAgc2V0KHZhbCkge1xuICAgICAgICAgIHRoYXQucVZhbHVlID0gdmFsO1xuICAgICAgICAgIHRoYXQuZmlsdGVyLlEuc2V0VGFyZ2V0QXRUaW1lKHZhbCwgMCwgMCk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhhdC5xVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwiaW5cIixcbiAgICAgICAgc2hvcnQ6IFwicW1cIixcbiAgICAgICAgbGFiZWw6IFwiUSBNb2RcIixcbiAgICAgICAgc2V0KHZhbCkge1xuICAgICAgICAgIHRoYXQucmVwbGFjZU90aGVyT25QYXJhbShcbiAgICAgICAgICAgIHRoYXQucUNvbm5lY3RWYWx1ZSxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIHRoYXQuZmlsdGVyLlEsXG4gICAgICAgICAgICBcInFDb25uZWN0XCJcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoYXQucUNvbm5lY3RWYWx1ZSA9IHZhbDtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGF0LnFDb25uZWN0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwidHlwZVwiLFxuICAgICAgICBzaG9ydDogXCJ0XCIsXG4gICAgICAgIGxhYmVsOiBcIlR5cGVcIixcbiAgICAgICAgdmFsdWVzOiBUWVBFUyxcbiAgICAgICAgc2V0KHZhbCkge1xuICAgICAgICAgIGlmICghVFlQRVMuaW5jbHVkZXModmFsKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGF0LmZpbHRlci50eXBlID0gdmFsO1xuICAgICAgICB9LFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoYXQuZmlsdGVyLnR5cGU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwiaW5cIixcbiAgICAgICAgc2hvcnQ6IFwiaVwiLFxuICAgICAgICBsYWJlbDogXCJJbnB1dFwiLFxuICAgICAgICBzZXQodmFsKSB7XG4gICAgICAgICAgdGhhdC5yZXBsYWNlT3RoZXJPblBhcmFtKFxuICAgICAgICAgICAgdGhhdC5pbnB1dENvbm5lY3RWYWx1ZSxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIHRoYXQuZmlsdGVyLFxuICAgICAgICAgICAgXCJpbnB1dFwiXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGF0LmlucHV0Q29ubmVjdFZhbHVlID0gdmFsO1xuICAgICAgICB9LFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoYXQuaW5wdXRDb25uZWN0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgdGhpcy5kaXNjb25uZWN0T3RoZXJGcm9tUGFyYW0odGhpcy5mcmVxQ29ubmVjdFZhbHVlLCB0aGlzLmZpbHRlci5mcmVxdWVuY3kpO1xuICAgIHRoaXMuZGlzY29ubmVjdE90aGVyRnJvbVBhcmFtKHRoaXMucUNvbm5lY3RWYWx1ZSwgdGhpcy5maWx0ZXIuUSk7XG4gICAgdGhpcy5kaXNjb25uZWN0T3RoZXJGcm9tUGFyYW0odGhpcy5pbnB1dENvbm5lY3RWYWx1ZSwgdGhpcy5maWx0ZXIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGN0eCwgbW9kZWwpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpZHgpIHtcbiAgICBjb25zdCBsYXN0ID0gbW9kZWwuaXRlbXNbaWR4XTtcbiAgICBpZiAoW2NvbnN0YW50cy5GSUxURVIsIGNvbnN0YW50cy5NSUNST1BIT05FXS5pbmNsdWRlcyhsYXN0LnR5cGUpKSB7XG4gICAgICByZXR1cm4gbGFzdDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBGaWx0ZXIoY3R4LCBtb2RlbCwgaWR4KTtcbiAgfTtcbn07XG4iLCJjb25zdCBOb2RlID0gcmVxdWlyZShcIi4vTm9kZVwiKTtcbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbmNsYXNzIERlbGF5IGV4dGVuZHMgTm9kZSB7XG4gIGNvbnN0cnVjdG9yKGN0eCwgbW9kZWwsIGlkeCkge1xuICAgIHN1cGVyKGN0eCwgbW9kZWwsIGlkeCwgY29uc3RhbnRzLkRFTEFZLCB0cnVlKTtcbiAgICB0aGlzLmRlbGF5ID0gY3R4LmNyZWF0ZURlbGF5KCk7XG5cbiAgICB0aGlzLl9jb250cm9scyA9IHRoaXMuaW5pdENvbnRyb2xzKCk7XG4gICAgdGhpcy5fY29udHJvbHNbMF0uc2V0KDEwMDApO1xuICB9XG5cbiAgY29ubmVjdG9yKCkge1xuICAgIHJldHVybiB0aGlzLmRlbGF5O1xuICB9XG5cbiAgY29udHJvbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbnRyb2xzO1xuICB9XG5cbiAgaW5pdENvbnRyb2xzKCkge1xuICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xuICAgIHJldHVybiBbXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwidmFsXCIsXG4gICAgICAgIHNob3J0OiBcInRcIixcbiAgICAgICAgbGFiZWw6IFwiVGltZSAobXMpXCIsXG4gICAgICAgIHNldCh2YWwpIHtcbiAgICAgICAgICB0aGF0LmRlbGF5VGltZVZhbHVlID0gdmFsO1xuICAgICAgICAgIHRoYXQuZGVsYXkuZGVsYXlUaW1lLnNldFRhcmdldEF0VGltZSh2YWwsIDAsIDApO1xuICAgICAgICB9LFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoYXQuZGVsYXlUaW1lVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwiaW5cIixcbiAgICAgICAgc2hvcnQ6IFwiaVwiLFxuICAgICAgICBsYWJlbDogXCJJbnB1dFwiLFxuICAgICAgICBzZXQodmFsKSB7XG4gICAgICAgICAgdGhhdC5yZXBsYWNlT3RoZXJPblBhcmFtKFxuICAgICAgICAgICAgdGhhdC5pbnB1dENvbm5lY3RWYWx1ZSxcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIHRoYXQuZGVsYXksXG4gICAgICAgICAgICBcImlucHV0XCJcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoYXQuaW5wdXRDb25uZWN0VmFsdWUgPSB2YWw7XG4gICAgICAgIH0sXG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhhdC5pbnB1dENvbm5lY3RWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF07XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHN1cGVyLmRlc3Ryb3koKTtcbiAgICB0aGlzLmRpc2Nvbm5lY3RPdGhlckZyb21QYXJhbSh0aGlzLmlucHV0Q29ubmVjdFZhbHVlLCB0aGlzLmRlbGF5KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjdHgsIG1vZGVsKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaWR4KSB7XG4gICAgY29uc3QgbGFzdCA9IG1vZGVsLml0ZW1zW2lkeF07XG4gICAgaWYgKFtjb25zdGFudHMuREVMQVksIGNvbnN0YW50cy5NSUNST1BIT05FXS5pbmNsdWRlcyhsYXN0LnR5cGUpKSB7XG4gICAgICByZXR1cm4gbGFzdDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEZWxheShjdHgsIG1vZGVsLCBpZHgpO1xuICB9O1xufTtcbiIsImNvbnN0IE5vZGUgPSByZXF1aXJlKFwiLi9Ob2RlXCIpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxuY2xhc3MgRWNobyBleHRlbmRzIE5vZGUge1xuICBjb25zdHJ1Y3RvcihjdHgsIG1vZGVsLCBpZHgpIHtcbiAgICBzdXBlcihjdHgsIG1vZGVsLCBpZHgsIGNvbnN0YW50cy5FQ0hPLCB0cnVlKTtcbiAgICB0aGlzLmRlbGF5ID0gY3R4LmNyZWF0ZURlbGF5KCk7XG4gICAgdGhpcy5nYWluID0gY3R4LmNyZWF0ZUdhaW4oKTtcblxuICAgIHRoaXMuZGVsYXkuY29ubmVjdCh0aGlzLmdhaW4pO1xuICAgIHRoaXMuZ2Fpbi5jb25uZWN0KHRoaXMuZGVsYXkpO1xuICAgIHRoaXMuX2NvbnRyb2xzID0gdGhpcy5pbml0Q29udHJvbHMoKTtcbiAgICB0aGlzLl9jb250cm9sc1swXS5zZXQoMTAwMCk7XG4gICAgdGhpcy5fY29udHJvbHNbMV0uc2V0KDAuNSk7XG4gIH1cblxuICBjb25uZWN0b3IoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2FpbjtcbiAgfVxuXG4gIGNvbnRyb2xzKCkge1xuICAgIHJldHVybiB0aGlzLl9jb250cm9scztcbiAgfVxuXG4gIGluaXRDb250cm9scygpIHtcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gW1xuICAgICAge1xuICAgICAgICB0eXBlOiBcInZhbFwiLFxuICAgICAgICBzaG9ydDogXCJ0XCIsXG4gICAgICAgIGxhYmVsOiBcIlRpbWUgKG1zKVwiLFxuICAgICAgICBzZXQodmFsKSB7XG4gICAgICAgICAgdGhhdC5kZWxheVRpbWVWYWx1ZSA9IHZhbDtcbiAgICAgICAgICB0aGF0LmRlbGF5LmRlbGF5VGltZS5zZXRUYXJnZXRBdFRpbWUodmFsLCAwLCAwKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGF0LmRlbGF5VGltZVZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiBcInZhbFwiLFxuICAgICAgICBzaG9ydDogXCJzXCIsXG4gICAgICAgIGxhYmVsOiBcIlN1c3RhaW5cIixcbiAgICAgICAgc2V0KHZhbCkge1xuICAgICAgICAgIHRoYXQuZ2FpblZhbHVlID0gdmFsO1xuICAgICAgICAgIHRoYXQuZ2Fpbi5nYWluLnNldFRhcmdldEF0VGltZSh2YWwsIDAsIDApO1xuICAgICAgICB9LFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoYXQuZ2FpblZhbHVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiBcImluXCIsXG4gICAgICAgIHNob3J0OiBcImlcIixcbiAgICAgICAgbGFiZWw6IFwiSW5wdXRcIixcbiAgICAgICAgc2V0KHZhbCkge1xuICAgICAgICAgIHRoYXQucmVwbGFjZU90aGVyT25QYXJhbShcbiAgICAgICAgICAgIHRoYXQuaW5wdXRDb25uZWN0VmFsdWUsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICB0aGF0LmRlbGF5LFxuICAgICAgICAgICAgXCJpbnB1dFwiXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGF0LmlucHV0Q29ubmVjdFZhbHVlID0gdmFsO1xuICAgICAgICB9LFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoYXQuaW5wdXRDb25uZWN0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgdGhpcy5kaXNjb25uZWN0T3RoZXJGcm9tUGFyYW0odGhpcy5pbnB1dENvbm5lY3RWYWx1ZSwgdGhpcy5kZWxheSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3R4LCBtb2RlbCkge1xuICByZXR1cm4gZnVuY3Rpb24gKGlkeCkge1xuICAgIGNvbnN0IGxhc3QgPSBtb2RlbC5pdGVtc1tpZHhdO1xuICAgIGlmIChbY29uc3RhbnRzLkVDSE8sIGNvbnN0YW50cy5NSUNST1BIT05FXS5pbmNsdWRlcyhsYXN0LnR5cGUpKSB7XG4gICAgICByZXR1cm4gbGFzdDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFY2hvKGN0eCwgbW9kZWwsIGlkeCk7XG4gIH07XG59O1xuIiwiY29uc3QgTm9kZSA9IHJlcXVpcmUoXCIuL05vZGVcIik7XG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG5jbGFzcyBHYWluIGV4dGVuZHMgTm9kZSB7XG4gIGNvbnN0cnVjdG9yKGN0eCwgbW9kZWwsIGlkeCkge1xuICAgIHN1cGVyKGN0eCwgbW9kZWwsIGlkeCwgY29uc3RhbnRzLkdBSU4sIHRydWUpO1xuICAgIHRoaXMuZ2FpbiA9IGN0eC5jcmVhdGVHYWluKCk7XG5cbiAgICB0aGlzLl9jb250cm9scyA9IHRoaXMuaW5pdENvbnRyb2xzKCk7XG4gICAgdGhpcy5fY29udHJvbHNbMF0uc2V0KDEpO1xuICB9XG5cbiAgY29ubmVjdG9yKCkge1xuICAgIHJldHVybiB0aGlzLmdhaW47XG4gIH1cblxuICBjb250cm9scygpIHtcbiAgICByZXR1cm4gdGhpcy5fY29udHJvbHM7XG4gIH1cblxuICBpbml0Q29udHJvbHMoKSB7XG4gICAgY29uc3QgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIFtcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJ2YWxcIixcbiAgICAgICAgc2hvcnQ6IFwiZ1wiLFxuICAgICAgICBsYWJlbDogXCJHYWluXCIsXG4gICAgICAgIHNldCh2YWwpIHtcbiAgICAgICAgICB0aGF0LmdhaW5WYWx1ZSA9IHZhbDtcbiAgICAgICAgICB0aGF0LmdhaW4uZ2Fpbi5zZXRUYXJnZXRBdFRpbWUodmFsLCAwLCAwKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiB0aGF0LmdhaW5WYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJpblwiLFxuICAgICAgICBzaG9ydDogXCJnXCIsXG4gICAgICAgIGxhYmVsOiBcIkdhaW4gTW9kXCIsXG4gICAgICAgIHNldCh2YWwpIHtcbiAgICAgICAgICB0aGF0LnJlcGxhY2VPdGhlck9uUGFyYW0oXG4gICAgICAgICAgICB0aGF0LmdhaW5Db25uZWN0VmFsdWUsXG4gICAgICAgICAgICB2YWwsXG4gICAgICAgICAgICB0aGF0LmdhaW4uZ2FpbixcbiAgICAgICAgICAgIFwiZ2FpbkNvbm5lY3RcIlxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhhdC5nYWluQ29ubmVjdFZhbHVlID0gdmFsO1xuICAgICAgICB9LFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoYXQuZ2FpbkNvbm5lY3RWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJpblwiLFxuICAgICAgICBzaG9ydDogXCJpXCIsXG4gICAgICAgIGxhYmVsOiBcIklucHV0XCIsXG4gICAgICAgIHNldCh2YWwpIHtcbiAgICAgICAgICB0aGF0LnJlcGxhY2VPdGhlck9uUGFyYW0oXG4gICAgICAgICAgICB0aGF0LmlucHV0Q29ubmVjdFZhbHVlLFxuICAgICAgICAgICAgdmFsLFxuICAgICAgICAgICAgdGhhdC5nYWluLFxuICAgICAgICAgICAgXCJpbnB1dFwiXG4gICAgICAgICAgKTtcbiAgICAgICAgICB0aGF0LmlucHV0Q29ubmVjdFZhbHVlID0gdmFsO1xuICAgICAgICB9LFxuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoYXQuaW5wdXRDb25uZWN0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICBzdXBlci5kZXN0cm95KCk7XG4gICAgdGhpcy5kaXNjb25uZWN0T3RoZXJGcm9tUGFyYW0odGhpcy5pbnB1dENvbm5lY3RWYWx1ZSwgdGhpcy5nYWluKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjdHgsIG1vZGVsKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaWR4KSB7XG4gICAgY29uc3QgbGFzdCA9IG1vZGVsLml0ZW1zW2lkeF07XG4gICAgaWYgKFtjb25zdGFudHMuR0FJTiwgY29uc3RhbnRzLk1JQ1JPUEhPTkVdLmluY2x1ZGVzKGxhc3QudHlwZSkpIHtcbiAgICAgIHJldHVybiBsYXN0O1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEdhaW4oY3R4LCBtb2RlbCwgaWR4KTtcbiAgfTtcbn07XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbW1tLmNzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHMgfHwge307IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBpc09sZElFID0gZnVuY3Rpb24gaXNPbGRJRSgpIHtcbiAgdmFyIG1lbW87XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSgpIHtcbiAgICBpZiAodHlwZW9mIG1lbW8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuICAgICAgLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuICAgICAgLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuICAgICAgLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG4gICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcbiAgICAgIG1lbW8gPSBCb29sZWFuKHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtbztcbiAgfTtcbn0oKTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uIGdldFRhcmdldCgpIHtcbiAgdmFyIG1lbW8gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKHRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWVtb1t0YXJnZXRdO1xuICB9O1xufSgpO1xuXG52YXIgc3R5bGVzSW5Eb20gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRvbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRvbVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdXG4gICAgfTtcblxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZXNJbkRvbS5wdXNoKHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogYWRkU3R5bGUob2JqLCBvcHRpb25zKSxcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgdmFyIGF0dHJpYnV0ZXMgPSBvcHRpb25zLmF0dHJpYnV0ZXMgfHwge307XG5cbiAgaWYgKHR5cGVvZiBhdHRyaWJ1dGVzLm5vbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gJ3VuZGVmaW5lZCcgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgICBpZiAobm9uY2UpIHtcbiAgICAgIGF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICB9KTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQob3B0aW9ucy5pbnNlcnQgfHwgJ2hlYWQnKTtcblxuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICAgIH1cblxuICAgIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbnZhciByZXBsYWNlVGV4dCA9IGZ1bmN0aW9uIHJlcGxhY2VUZXh0KCkge1xuICB2YXIgdGV4dFN0b3JlID0gW107XG4gIHJldHVybiBmdW5jdGlvbiByZXBsYWNlKGluZGV4LCByZXBsYWNlbWVudCkge1xuICAgIHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcbiAgICByZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgfTtcbn0oKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyhzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG4gIHZhciBjc3MgPSByZW1vdmUgPyAnJyA6IG9iai5tZWRpYSA/IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIikuY29uY2F0KG9iai5jc3MsIFwifVwiKSA6IG9iai5jc3M7IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG4gICAgaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICBzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyhzdHlsZSwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzO1xuICB2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZSgnbWVkaWEnLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKCdtZWRpYScpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlLmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyIHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlO1xuICB2YXIgdXBkYXRlO1xuICB2YXIgcmVtb3ZlO1xuXG4gIGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuICAgIHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUgPSBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblxuICAgIHJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfTtcbiAgfVxuXG4gIHVwZGF0ZShvYmopO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuICAvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cbiAgaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICdib29sZWFuJykge1xuICAgIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuICB9XG5cbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuZXdMaXN0KSAhPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCIpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gcmVxdWlyZShcIi4uL2ltZy9pY29ucy5wbmdcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImh0bWwsXFxuYm9keSB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgZm9udC1mYW1pbHk6IFxcXCJBcmlhbFxcXCIsIFxcXCJIZWx2ZXRpY2FcXFwiLCBzYW5zLXNlcmlmO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBiYWNrZ3JvdW5kOiAjZGRkO1xcbiAgb3ZlcmZsb3cteTogaGlkZGVuO1xcbn1cXG5cXG5ib2R5IHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuYnV0dG9uIHtcXG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICBib3JkZXI6IDFweCBzb2xpZCBncmF5O1xcbiAgcGFkZGluZzogNHB4O1xcbn1cXG5cXG4ub3B0aW9ucyBidXR0b24ge1xcbiAgd2lkdGg6IDI0cHg7XFxufVxcblxcbmJ1dHRvbi5taWNyb3Bob25lIHtcXG4gIGJveC1zaGFkb3c6IDBweCA0cHggYmxhY2s7XFxufVxcblxcbmJ1dHRvbi5vc2NpbGxhdG9yIHtcXG4gIGJveC1zaGFkb3c6IDBweCA0cHggcmVkO1xcbn1cXG5cXG5idXR0b24uZmlsdGVyIHtcXG4gIGJveC1zaGFkb3c6IDBweCA0cHggZ3JlZW47XFxufVxcblxcbmJ1dHRvbi5kZWxheSB7XFxuICBib3gtc2hhZG93OiAwcHggNHB4IGJsdWU7XFxufVxcblxcbmJ1dHRvbi5lY2hvIHtcXG4gIGJveC1zaGFkb3c6IDBweCA0cHggeWVsbG93O1xcbn1cXG5cXG5idXR0b24uZ2FpbiB7XFxuICBib3gtc2hhZG93OiAwcHggNHB4IG1hZ2VudGE7XFxufVxcblxcbmJ1dHRvbi5wbGF5aW5nIHtcXG4gIGJhY2tncm91bmQ6IGJsYWNrO1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYm9yZGVyLWJvdHRvbS1jb2xvcjogd2hpdGU7XFxuICBmb250LXdlaWdodDogNzAwO1xcbn1cXG5cXG4uaGlkZSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uZ3JhcGggPiBkaXYge1xcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xcbn1cXG5cXG4uY29udHJvbHMsXFxuLnN0YXJ0ZWQgLmluZm8ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnN0YXJ0ZWQgLmNvbnRyb2xzIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgdGV4dC1hbGlnbjogbGVmdDtcXG59XFxuXFxuLndyYXBwZXIge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgYmFja2dyb3VuZDogI2ZmZmZmZjtcXG4gIHdpZHRoOiAzMDBweDtcXG4gIHBhZGRpbmc6IDIwcHg7XFxufVxcblxcbi5jb250cm9scyBkaXYgbGFiZWwge1xcbiAgd2lkdGg6IDEwMHB4O1xcbn1cXG5cXG4uY29udHJvbHMgPiAqLFxcbi5jb250cm9scyAuY29udHJvbCBpbnB1dCxcXG4uY29udHJvbHMgLmNvbnRyb2wgc2VsZWN0LFxcbi53cmFwcGVyIC5ncmFwaCxcXG4ud3JhcHBlciAuc2VxdWVuY2VyIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi53cmFwcGVyLmdyYXBoIC5ncmFwaCB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuLndyYXBwZXIuc2VxdWVuY2VyIC5zZXF1ZW5jZXIge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbi5jb250cm9scy5wbGF5YWJsZSAucGxheSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuLmNvbnRyb2xzLnR5cGVzIC50eXBlcyB7XFxuICBkaXNwbGF5OiBibG9jaztcXG59XFxuLmNvbnRyb2xzLmNvbnRyb2wxaW4gLmNvbnRyb2w6bnRoLWNoaWxkKDMpLFxcbi5jb250cm9scy5jb250cm9sMXZhbCAuY29udHJvbDpudGgtY2hpbGQoMyksXFxuLmNvbnRyb2xzLmNvbnRyb2wxdHlwZSAuY29udHJvbDpudGgtY2hpbGQoMykge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5jb250cm9scy5jb250cm9sMWluICNjb250cm9sMWluLFxcbi5jb250cm9scy5jb250cm9sMXR5cGUgI2NvbnRyb2wxaW4ge1xcbiAgZGlzcGxheTogaW5saW5lO1xcbn1cXG4uY29udHJvbHMuY29udHJvbDF2YWwgI2NvbnRyb2wxdmFsIHtcXG4gIGRpc3BsYXk6IGlubGluZTtcXG59XFxuLmNvbnRyb2xzLmNvbnRyb2wyaW4gLmNvbnRyb2w6bnRoLWNoaWxkKDQpLFxcbi5jb250cm9scy5jb250cm9sMnZhbCAuY29udHJvbDpudGgtY2hpbGQoNCksXFxuLmNvbnRyb2xzLmNvbnRyb2wydHlwZSAuY29udHJvbDpudGgtY2hpbGQoNCkge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5jb250cm9scy5jb250cm9sMmluICNjb250cm9sMmluLFxcbi5jb250cm9scy5jb250cm9sMnR5cGUgI2NvbnRyb2wyaW4ge1xcbiAgZGlzcGxheTogaW5saW5lO1xcbn1cXG4uY29udHJvbHMuY29udHJvbDJ2YWwgI2NvbnRyb2wydmFsIHtcXG4gIGRpc3BsYXk6IGlubGluZTtcXG59XFxuLmNvbnRyb2xzLmNvbnRyb2wzaW4gLmNvbnRyb2w6bnRoLWNoaWxkKDUpLFxcbi5jb250cm9scy5jb250cm9sM3ZhbCAuY29udHJvbDpudGgtY2hpbGQoNSksXFxuLmNvbnRyb2xzLmNvbnRyb2wzdHlwZSAuY29udHJvbDpudGgtY2hpbGQoNSkge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5jb250cm9scy5jb250cm9sM2luICNjb250cm9sM2luLFxcbi5jb250cm9scy5jb250cm9sM3R5cGUgI2NvbnRyb2wzaW4ge1xcbiAgZGlzcGxheTogaW5saW5lO1xcbn1cXG4uY29udHJvbHMuY29udHJvbDN2YWwgI2NvbnRyb2wzdmFsIHtcXG4gIGRpc3BsYXk6IGlubGluZTtcXG59XFxuLmNvbnRyb2xzLmNvbnRyb2w0aW4gLmNvbnRyb2w6bnRoLWNoaWxkKDYpLFxcbi5jb250cm9scy5jb250cm9sNHZhbCAuY29udHJvbDpudGgtY2hpbGQoNiksXFxuLmNvbnRyb2xzLmNvbnRyb2w0dHlwZSAuY29udHJvbDpudGgtY2hpbGQoNikge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5jb250cm9scy5jb250cm9sNGluICNjb250cm9sNGluLFxcbi5jb250cm9scy5jb250cm9sNHR5cGUgI2NvbnRyb2w0aW4ge1xcbiAgZGlzcGxheTogaW5saW5lO1xcbn1cXG4uY29udHJvbHMuY29udHJvbDR2YWwgI2NvbnRyb2w0dmFsIHtcXG4gIGRpc3BsYXk6IGlubGluZTtcXG59XFxuLmNvbnRyb2xzLmNvbnRyb2w1aW4gLmNvbnRyb2w6bnRoLWNoaWxkKDcpLFxcbi5jb250cm9scy5jb250cm9sNXZhbCAuY29udHJvbDpudGgtY2hpbGQoNyksXFxuLmNvbnRyb2xzLmNvbnRyb2w1dHlwZSAuY29udHJvbDpudGgtY2hpbGQoNykge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5jb250cm9scy5jb250cm9sNWluICNjb250cm9sNWluLFxcbi5jb250cm9scy5jb250cm9sNXR5cGUgI2NvbnRyb2w1aW4ge1xcbiAgZGlzcGxheTogaW5saW5lO1xcbn1cXG4uY29udHJvbHMuY29udHJvbDV2YWwgI2NvbnRyb2w1dmFsIHtcXG4gIGRpc3BsYXk6IGlubGluZTtcXG59XFxuLmNvbnRyb2xzLmNvbnRyb2w2aW4gLmNvbnRyb2w6bnRoLWNoaWxkKDgpLFxcbi5jb250cm9scy5jb250cm9sNnZhbCAuY29udHJvbDpudGgtY2hpbGQoOCksXFxuLmNvbnRyb2xzLmNvbnRyb2w2dHlwZSAuY29udHJvbDpudGgtY2hpbGQoOCkge1xcbiAgZGlzcGxheTogYmxvY2s7XFxufVxcbi5jb250cm9scy5jb250cm9sNmluICNjb250cm9sNmluLFxcbi5jb250cm9scy5jb250cm9sNnR5cGUgI2NvbnRyb2w2aW4ge1xcbiAgZGlzcGxheTogaW5saW5lO1xcbn1cXG4uY29udHJvbHMuY29udHJvbDZ2YWwgI2NvbnRyb2w2dmFsIHtcXG4gIGRpc3BsYXk6IGlubGluZTtcXG59XFxuXFxuLmNvbnRyb2wge1xcbiAgbWFyZ2luLWJvdHRvbTogOHB4O1xcbn1cXG5cXG4uY29udHJvbCAuc2hvcnQge1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2lkdGg6IDQwcHg7XFxufVxcblxcbi5jb250cm9sIC5sb25nIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdpZHRoOiA5MHB4O1xcbn1cXG5cXG4uY29udHJvbCBzZWxlY3QsXFxuLmNvbnRyb2wgaW5wdXQge1xcbiAgd2lkdGg6IDE2MHB4O1xcbiAgbWF4LXdpZHRoOiAxNjBweDtcXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwibnVtYmVyXFxcIl0ge1xcbiAgd2lkdGg6IDEwMHB4O1xcbn1cXG5cXG50ZXh0YXJlYSB7XFxuICB3aWR0aDogMjgwcHg7XFxuICBoZWlnaHQ6IDIwMHB4O1xcbn1cXG5cXG5hLmhvbWUsXFxuYS5zb3VyY2VDb2RlIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIG91dGxpbmU6IDA7XFxuICB3aWR0aDogMzJweDtcXG4gIGhlaWdodDogMzJweDtcXG4gIHRleHQtaW5kZW50OiAtOTk5OTlweDtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIik7XFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcbn1cXG5cXG5hLmhvbWUge1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTczNnB4IC0zMnB4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgbGVmdDogMTM2cHg7XFxuICB0b3A6IDJweDtcXG59XFxuXFxuYS5zb3VyY2VDb2RlIHtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IC03MzZweCAwO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgbGVmdDogMTM2cHg7XFxuICB0b3A6IDJweDtcXG59XFxuXFxub2wge1xcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZTtcXG4gIHdoaXRlLXNwYWNlOiBwcmU7XFxufVxcblxcbmxpOjptYXJrZXIge1xcbiAgZm9udC1zaXplOiAxMHB4O1xcbiAgY29sb3I6IGdyZXk7XFxufVxcblwiLCBcIlwiXSk7XG4vLyBFeHBvcnRzXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHM7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcblxuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCAnJykuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufSAvLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5cblxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG4gIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgcmV0dXJuIFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXJsLCBvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIG9wdGlvbnMgPSB7fTtcbiAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGUsIG5vLXBhcmFtLXJlYXNzaWduXG5cblxuICB1cmwgPSB1cmwgJiYgdXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybDtcblxuICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG5cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9IC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcblxuXG4gIGlmICgvW1wiJygpIFxcdFxcbl0vLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csICdcXFxcbicpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMGMzNjNjNmZiNWEzN2Q0NGY2YjdlMGFhNDlhNGNjNTUzNmU1NTgxOWRlODBjYmIwNDMzNGNjZGQzZDY2NDlkMi5wbmdcIjsiXSwic291cmNlUm9vdCI6IiJ9