!function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=1)}([function(n,e,t){const r=t(6),o={};for(const n of Object.keys(r))o[r[n]]=n;const a={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};n.exports=a;for(const n of Object.keys(a)){if(!("channels"in a[n]))throw new Error("missing channels property: "+n);if(!("labels"in a[n]))throw new Error("missing channel labels property: "+n);if(a[n].labels.length!==a[n].channels)throw new Error("channel and label counts mismatch: "+n);const{channels:e,labels:t}=a[n];delete a[n].channels,delete a[n].labels,Object.defineProperty(a[n],"channels",{value:e}),Object.defineProperty(a[n],"labels",{value:t})}a.rgb.hsl=function(n){const e=n[0]/255,t=n[1]/255,r=n[2]/255,o=Math.min(e,t,r),a=Math.max(e,t,r),i=a-o;let l,c;a===o?l=0:e===a?l=(t-r)/i:t===a?l=2+(r-e)/i:r===a&&(l=4+(e-t)/i),l=Math.min(60*l,360),l<0&&(l+=360);const s=(o+a)/2;return c=a===o?0:s<=.5?i/(a+o):i/(2-a-o),[l,100*c,100*s]},a.rgb.hsv=function(n){let e,t,r,o,a;const i=n[0]/255,l=n[1]/255,c=n[2]/255,s=Math.max(i,l,c),u=s-Math.min(i,l,c),d=function(n){return(s-n)/6/u+.5};return 0===u?(o=0,a=0):(a=u/s,e=d(i),t=d(l),r=d(c),i===s?o=r-t:l===s?o=1/3+e-r:c===s&&(o=2/3+t-e),o<0?o+=1:o>1&&(o-=1)),[360*o,100*a,100*s]},a.rgb.hwb=function(n){const e=n[0],t=n[1];let r=n[2];const o=a.rgb.hsl(n)[0],i=1/255*Math.min(e,Math.min(t,r));return r=1-1/255*Math.max(e,Math.max(t,r)),[o,100*i,100*r]},a.rgb.cmyk=function(n){const e=n[0]/255,t=n[1]/255,r=n[2]/255,o=Math.min(1-e,1-t,1-r);return[100*((1-e-o)/(1-o)||0),100*((1-t-o)/(1-o)||0),100*((1-r-o)/(1-o)||0),100*o]},a.rgb.keyword=function(n){const e=o[n];if(e)return e;let t,a=1/0;for(const e of Object.keys(r)){const o=r[e],c=(l=o,((i=n)[0]-l[0])**2+(i[1]-l[1])**2+(i[2]-l[2])**2);c<a&&(a=c,t=e)}var i,l;return t},a.keyword.rgb=function(n){return r[n]},a.rgb.xyz=function(n){let e=n[0]/255,t=n[1]/255,r=n[2]/255;e=e>.04045?((e+.055)/1.055)**2.4:e/12.92,t=t>.04045?((t+.055)/1.055)**2.4:t/12.92,r=r>.04045?((r+.055)/1.055)**2.4:r/12.92;return[100*(.4124*e+.3576*t+.1805*r),100*(.2126*e+.7152*t+.0722*r),100*(.0193*e+.1192*t+.9505*r)]},a.rgb.lab=function(n){const e=a.rgb.xyz(n);let t=e[0],r=e[1],o=e[2];t/=95.047,r/=100,o/=108.883,t=t>.008856?t**(1/3):7.787*t+16/116,r=r>.008856?r**(1/3):7.787*r+16/116,o=o>.008856?o**(1/3):7.787*o+16/116;return[116*r-16,500*(t-r),200*(r-o)]},a.hsl.rgb=function(n){const e=n[0]/360,t=n[1]/100,r=n[2]/100;let o,a,i;if(0===t)return i=255*r,[i,i,i];o=r<.5?r*(1+t):r+t-r*t;const l=2*r-o,c=[0,0,0];for(let n=0;n<3;n++)a=e+1/3*-(n-1),a<0&&a++,a>1&&a--,i=6*a<1?l+6*(o-l)*a:2*a<1?o:3*a<2?l+(o-l)*(2/3-a)*6:l,c[n]=255*i;return c},a.hsl.hsv=function(n){const e=n[0];let t=n[1]/100,r=n[2]/100,o=t;const a=Math.max(r,.01);r*=2,t*=r<=1?r:2-r,o*=a<=1?a:2-a;return[e,100*(0===r?2*o/(a+o):2*t/(r+t)),100*((r+t)/2)]},a.hsv.rgb=function(n){const e=n[0]/60,t=n[1]/100;let r=n[2]/100;const o=Math.floor(e)%6,a=e-Math.floor(e),i=255*r*(1-t),l=255*r*(1-t*a),c=255*r*(1-t*(1-a));switch(r*=255,o){case 0:return[r,c,i];case 1:return[l,r,i];case 2:return[i,r,c];case 3:return[i,l,r];case 4:return[c,i,r];case 5:return[r,i,l]}},a.hsv.hsl=function(n){const e=n[0],t=n[1]/100,r=n[2]/100,o=Math.max(r,.01);let a,i;i=(2-t)*r;const l=(2-t)*o;return a=t*o,a/=l<=1?l:2-l,a=a||0,i/=2,[e,100*a,100*i]},a.hwb.rgb=function(n){const e=n[0]/360;let t=n[1]/100,r=n[2]/100;const o=t+r;let a;o>1&&(t/=o,r/=o);const i=Math.floor(6*e),l=1-r;a=6*e-i,0!=(1&i)&&(a=1-a);const c=t+a*(l-t);let s,u,d;switch(i){default:case 6:case 0:s=l,u=c,d=t;break;case 1:s=c,u=l,d=t;break;case 2:s=t,u=l,d=c;break;case 3:s=t,u=c,d=l;break;case 4:s=c,u=t,d=l;break;case 5:s=l,u=t,d=c}return[255*s,255*u,255*d]},a.cmyk.rgb=function(n){const e=n[0]/100,t=n[1]/100,r=n[2]/100,o=n[3]/100;return[255*(1-Math.min(1,e*(1-o)+o)),255*(1-Math.min(1,t*(1-o)+o)),255*(1-Math.min(1,r*(1-o)+o))]},a.xyz.rgb=function(n){const e=n[0]/100,t=n[1]/100,r=n[2]/100;let o,a,i;return o=3.2406*e+-1.5372*t+-.4986*r,a=-.9689*e+1.8758*t+.0415*r,i=.0557*e+-.204*t+1.057*r,o=o>.0031308?1.055*o**(1/2.4)-.055:12.92*o,a=a>.0031308?1.055*a**(1/2.4)-.055:12.92*a,i=i>.0031308?1.055*i**(1/2.4)-.055:12.92*i,o=Math.min(Math.max(0,o),1),a=Math.min(Math.max(0,a),1),i=Math.min(Math.max(0,i),1),[255*o,255*a,255*i]},a.xyz.lab=function(n){let e=n[0],t=n[1],r=n[2];e/=95.047,t/=100,r/=108.883,e=e>.008856?e**(1/3):7.787*e+16/116,t=t>.008856?t**(1/3):7.787*t+16/116,r=r>.008856?r**(1/3):7.787*r+16/116;return[116*t-16,500*(e-t),200*(t-r)]},a.lab.xyz=function(n){let e,t,r;t=(n[0]+16)/116,e=n[1]/500+t,r=t-n[2]/200;const o=t**3,a=e**3,i=r**3;return t=o>.008856?o:(t-16/116)/7.787,e=a>.008856?a:(e-16/116)/7.787,r=i>.008856?i:(r-16/116)/7.787,e*=95.047,t*=100,r*=108.883,[e,t,r]},a.lab.lch=function(n){const e=n[0],t=n[1],r=n[2];let o;o=360*Math.atan2(r,t)/2/Math.PI,o<0&&(o+=360);return[e,Math.sqrt(t*t+r*r),o]},a.lch.lab=function(n){const e=n[0],t=n[1],r=n[2]/360*2*Math.PI;return[e,t*Math.cos(r),t*Math.sin(r)]},a.rgb.ansi16=function(n,e=null){const[t,r,o]=n;let i=null===e?a.rgb.hsv(n)[2]:e;if(i=Math.round(i/50),0===i)return 30;let l=30+(Math.round(o/255)<<2|Math.round(r/255)<<1|Math.round(t/255));return 2===i&&(l+=60),l},a.hsv.ansi16=function(n){return a.rgb.ansi16(a.hsv.rgb(n),n[2])},a.rgb.ansi256=function(n){const e=n[0],t=n[1],r=n[2];if(e===t&&t===r)return e<8?16:e>248?231:Math.round((e-8)/247*24)+232;return 16+36*Math.round(e/255*5)+6*Math.round(t/255*5)+Math.round(r/255*5)},a.ansi16.rgb=function(n){let e=n%10;if(0===e||7===e)return n>50&&(e+=3.5),e=e/10.5*255,[e,e,e];const t=.5*(1+~~(n>50));return[(1&e)*t*255,(e>>1&1)*t*255,(e>>2&1)*t*255]},a.ansi256.rgb=function(n){if(n>=232){const e=10*(n-232)+8;return[e,e,e]}let e;n-=16;return[Math.floor(n/36)/5*255,Math.floor((e=n%36)/6)/5*255,e%6/5*255]},a.rgb.hex=function(n){const e=(((255&Math.round(n[0]))<<16)+((255&Math.round(n[1]))<<8)+(255&Math.round(n[2]))).toString(16).toUpperCase();return"000000".substring(e.length)+e},a.hex.rgb=function(n){const e=n.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!e)return[0,0,0];let t=e[0];3===e[0].length&&(t=t.split("").map(n=>n+n).join(""));const r=parseInt(t,16);return[r>>16&255,r>>8&255,255&r]},a.rgb.hcg=function(n){const e=n[0]/255,t=n[1]/255,r=n[2]/255,o=Math.max(Math.max(e,t),r),a=Math.min(Math.min(e,t),r),i=o-a;let l,c;return l=i<1?a/(1-i):0,c=i<=0?0:o===e?(t-r)/i%6:o===t?2+(r-e)/i:4+(e-t)/i,c/=6,c%=1,[360*c,100*i,100*l]},a.hsl.hcg=function(n){const e=n[1]/100,t=n[2]/100,r=t<.5?2*e*t:2*e*(1-t);let o=0;return r<1&&(o=(t-.5*r)/(1-r)),[n[0],100*r,100*o]},a.hsv.hcg=function(n){const e=n[1]/100,t=n[2]/100,r=e*t;let o=0;return r<1&&(o=(t-r)/(1-r)),[n[0],100*r,100*o]},a.hcg.rgb=function(n){const e=n[0]/360,t=n[1]/100,r=n[2]/100;if(0===t)return[255*r,255*r,255*r];const o=[0,0,0],a=e%1*6,i=a%1,l=1-i;let c=0;switch(Math.floor(a)){case 0:o[0]=1,o[1]=i,o[2]=0;break;case 1:o[0]=l,o[1]=1,o[2]=0;break;case 2:o[0]=0,o[1]=1,o[2]=i;break;case 3:o[0]=0,o[1]=l,o[2]=1;break;case 4:o[0]=i,o[1]=0,o[2]=1;break;default:o[0]=1,o[1]=0,o[2]=l}return c=(1-t)*r,[255*(t*o[0]+c),255*(t*o[1]+c),255*(t*o[2]+c)]},a.hcg.hsv=function(n){const e=n[1]/100,t=e+n[2]/100*(1-e);let r=0;return t>0&&(r=e/t),[n[0],100*r,100*t]},a.hcg.hsl=function(n){const e=n[1]/100,t=n[2]/100*(1-e)+.5*e;let r=0;return t>0&&t<.5?r=e/(2*t):t>=.5&&t<1&&(r=e/(2*(1-t))),[n[0],100*r,100*t]},a.hcg.hwb=function(n){const e=n[1]/100,t=e+n[2]/100*(1-e);return[n[0],100*(t-e),100*(1-t)]},a.hwb.hcg=function(n){const e=n[1]/100,t=1-n[2]/100,r=t-e;let o=0;return r<1&&(o=(t-r)/(1-r)),[n[0],100*r,100*o]},a.apple.rgb=function(n){return[n[0]/65535*255,n[1]/65535*255,n[2]/65535*255]},a.rgb.apple=function(n){return[n[0]/255*65535,n[1]/255*65535,n[2]/255*65535]},a.gray.rgb=function(n){return[n[0]/100*255,n[0]/100*255,n[0]/100*255]},a.gray.hsl=function(n){return[0,0,n[0]]},a.gray.hsv=a.gray.hsl,a.gray.hwb=function(n){return[0,100,n[0]]},a.gray.cmyk=function(n){return[0,0,0,n[0]]},a.gray.lab=function(n){return[n[0],0,0]},a.gray.hex=function(n){const e=255&Math.round(n[0]/100*255),t=((e<<16)+(e<<8)+e).toString(16).toUpperCase();return"000000".substring(t.length)+t},a.rgb.gray=function(n){return[(n[0]+n[1]+n[2])/3/255*100]}},function(n,e,t){"use strict";t.r(e);t(2),t(8)},function(n,e,t){const r=t(3);fetch=null,XMLHttpRequest=null,window.onload=function(){const n=n=>document.querySelector(n),e=n(".render");let t,o;function a(e){let t=n(`[name=${e}]`).value;return t=t.replace(/\n/g,"").trim(),t=t.replace(/;$/,""),t}function i(e){return n("[name="+e+"Scale]:checked").value}function l(e){return n("[name="+e+"Limit]:checked").value}function c(n){return{field:n,fn:a(n),scale:i(n),limit:l(n)}}function s(){o=n("#colourMode").checked?"hsv":"rgb",n("#model").className=o,"hsv"===o?(n("label[for=colourMode]").title="Hue, Saturation, Value",n("label[for=first]").innerHTML="Hue",n("label[for=first]").title="Hue formula (0 - 360)",n("label[for=second]").innerHTML="Saturation",n("label[for=second]").title="Saturation formula (0 - 100)",n("label[for=third]").innerHTML="Value",n("label[for=third]").title="Value formula (0 - 100)"):(n("label[for=colourMode]").title="Red, Green, Blue",n("label[for=first]").innerHTML="Red",n("label[for=first]").title="Red formula (0 - 255)",n("label[for=second]").innerHTML="Green",n("label[for=second]").title="Green formula (0 - 255)",n("label[for=third]").innerHTML="Blue",n("label[for=third]").title="Blue formula (0 - 255)")}function u(){t=n("[name=imageSize]").checked?"big":"small",n("label[for=imageSize]").title="big"===t?"Big (1400 x 1400)":"Small (512 x 512)"}function d(e){n("body").className=e?"generated":""}function f(n,e){const t=document.querySelectorAll(`[name=${n}]`);for(let n=0;n<t.length;n++)t[n].disabled=e}function h(){r(c("first"),c("second"),c("third"),o,t,(t,r)=>{!function(e){["first","second","third"].forEach(t=>{n("#"+t).className=e[t]?"invalid":"",n(`span[for=${t}].error`).innerHTML=e[t]||""})}(t||{}),n("#run").disabled=!1,t?d(!1):(r.onclick=()=>d(!1),e.appendChild(r))})}n("#run").onclick=function(){d(!0),n("#run").disabled=!0,e.firstChild&&e.removeChild(e.firstChild),setTimeout(h,100)},n("#shuffle").onclick=function(){const e=["first","second","third"];e.map(e=>({v:n(`[name=${e}]`).value,r:Math.random()})).sort((n,e)=>n.r-e.r).forEach(({v:t},r)=>{n(`[name=${e[r]}]`).value=t})},n("#colourMode").onclick=function(n){s(n.target.checked)},n("#imageSize").onclick=function(n){u(n.target.checked)},n("#model").onchange=function(n){"firstScale"===n.target.name?f("firstLimit","minMax"===n.target.value):"secondScale"===n.target.name?f("secondLimit","minMax"===n.target.value):"thirdScale"===n.target.name&&f("thirdLimit","minMax"===n.target.value)},n("#model").className=o,f("firstLimit",n("#firstMinMax").checked),f("secondLimit",n("#secondMinMax").checked),f("thirdLimit",n("#thirdMinMax").checked),s(),u()}},function(n,e,t){const r=t(4),o=t(5),a=2*Math.PI,i={big:1400,small:512},l={hsv:[360,100,100],rgb:[255,255,255]};function c(n){return new Function("x","y","pi2",`\ntry {\n  return (${n});\n} catch (e) {\n  return 0;\n}`)}function s(n){new Function("x","y","pi2",`return (${n})`)(0,0,a)}function u(n,e){return Math.min(Math.max(0,n),e)}function d(n){return"wrap"===n?(n,e)=>u(function(n,e){if(n<0)for(;n<0;)n+=e;else if(n>e)for(;n>e;)n-=e;return n}(n,e),e):"reflect"===n?(n,e)=>u(function(n,e){for(;n<0||n>e;)n=n<0?-n:2*e-n;return n}(n,e),e):u}function f(n){return"minusPlusOne"===n?(n,e)=>(n+1)/2*e:"zeroOne"===n?(n,e)=>n*e:"minMax"===n?(n,e,t,r)=>e*(n-t)/(r-t):n=>n}n.exports=function(n,e,t,u,h,b){let p,g,m,y,x,v,k,M,w=null;const S=i[h],j=r(S);try{s(n.fn),p=c(n.fn),y=f(n.scale),v=d(n.limit)}catch(e){console.error(e),w={[n.field]:e}}try{s(e.fn),g=c(e.fn),secondScale=f(e.scale),k=d(e.limit)}catch(n){console.error(n),w={[e.field]:n,...w}}try{s(t.fn),m=c(t.fn),x=f(t.scale),M=d(t.limit)}catch(n){console.error(n),w={[t.field]:n,...w}}if(w)return void b(w);const O=new Array(S);let L=1/0,C=-1/0,P=1/0,T=-1/0,q=1/0,H=-1/0;for(let n=0;n<S;n++){O[n]=new Array(S);for(let e=0;e<S;e++){const t=n/(S-1),r=e/(S-1),o=p(t,r,a),i=g(t,r,a),l=m(t,r,a);O[n][e]=[o,i,l],L=Math.min(o,L),C=Math.max(o,C),P=Math.min(i,P),T=Math.max(i,T),q=Math.min(l,q),H=Math.max(l,H)}}L===C&&(L=0),P===T&&(P=0),q===H&&(q=0);let[N,R,z]=l[u];for(let n=0;n<S;n++)for(let e=0;e<S;e++){let[t,r,a]=O[n][e];t=v(y(t,N,L,C),N),r=k(secondScale(r,R,P,T),R),a=M(x(a,z,q,H),z);const[i,l,c]="hsv"===u?o.hsv.rgb.raw(t,r,a):[t,r,a];j.drawPixel(n,e,i,l,c)}b(null,j.buildImage())}},function(n,e){n.exports=function(n){const e=document.querySelector("body"),t=document.createElement("canvas");t.width=n,t.height=n,e.appendChild(t);const r=t.getContext("2d"),o=r.getImageData(0,0,n,n);return{drawPixel:function(e,t,r,a,i){const l=4*(e+t*n);o.data[l+0]=r,o.data[l+1]=a,o.data[l+2]=i,o.data[l+3]=255},buildImage:function(){r.putImageData(o,0,0);const n=new Image;return n.src=t.toDataURL(),e.removeChild(t),n}}}},function(n,e,t){const r=t(0),o=t(7),a={};Object.keys(r).forEach(n=>{a[n]={},Object.defineProperty(a[n],"channels",{value:r[n].channels}),Object.defineProperty(a[n],"labels",{value:r[n].labels});const e=o(n);Object.keys(e).forEach(t=>{const r=e[t];a[n][t]=function(n){const e=function(...e){const t=e[0];if(null==t)return t;t.length>1&&(e=t);const r=n(e);if("object"==typeof r)for(let n=r.length,e=0;e<n;e++)r[e]=Math.round(r[e]);return r};return"conversion"in n&&(e.conversion=n.conversion),e}(r),a[n][t].raw=function(n){const e=function(...e){const t=e[0];return null==t?t:(t.length>1&&(e=t),n(e))};return"conversion"in n&&(e.conversion=n.conversion),e}(r)})}),n.exports=a},function(n,e,t){"use strict";n.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(n,e,t){const r=t(0);function o(n){const e=function(){const n={},e=Object.keys(r);for(let t=e.length,r=0;r<t;r++)n[e[r]]={distance:-1,parent:null};return n}(),t=[n];for(e[n].distance=0;t.length;){const n=t.pop(),o=Object.keys(r[n]);for(let r=o.length,a=0;a<r;a++){const r=o[a],i=e[r];-1===i.distance&&(i.distance=e[n].distance+1,i.parent=n,t.unshift(r))}}return e}function a(n,e){return function(t){return e(n(t))}}function i(n,e){const t=[e[n].parent,n];let o=r[e[n].parent][n],i=e[n].parent;for(;e[i].parent;)t.unshift(e[i].parent),o=a(r[e[i].parent][i],o),i=e[i].parent;return o.conversion=t,o}n.exports=function(n){const e=o(n),t={},r=Object.keys(e);for(let n=r.length,o=0;o<n;o++){const n=r[o];null!==e[n].parent&&(t[n]=i(n,e))}return t}},function(n,e,t){var r=t(9),o=t(10);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[n.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);n.exports=o.locals||{}},function(n,e,t){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),i=[];function l(n){for(var e=-1,t=0;t<i.length;t++)if(i[t].identifier===n){e=t;break}return e}function c(n,e){for(var t={},r=[],o=0;o<n.length;o++){var a=n[o],c=e.base?a[0]+e.base:a[0],s=t[c]||0,u="".concat(c," ").concat(s);t[c]=s+1;var d=l(u),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(i[d].references++,i[d].updater(f)):i.push({identifier:u,updater:g(f,e),references:1}),r.push(u)}return r}function s(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var o=t.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var i=a(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}return e}var u,d=(u=[],function(n,e){return u[n]=e,u.filter(Boolean).join("\n")});function f(n,e,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=d(e,o);else{var a=document.createTextNode(o),i=n.childNodes;i[e]&&n.removeChild(i[e]),i.length?n.insertBefore(a,i[e]):n.appendChild(a)}}function h(n,e,t){var r=t.css,o=t.media,a=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var b=null,p=0;function g(n,e){var t,r,o;if(e.singleton){var a=p++;t=b||(b=s(e)),r=f.bind(null,t,a,!1),o=f.bind(null,t,a,!0)}else t=s(e),r=h.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var t=c(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var o=l(t[r]);i[o].references--}for(var a=c(n,e),s=0;s<t.length;s++){var u=l(t[s]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}t=a}}}},function(n,e,t){var r=t(11),o=t(12),a=t(13);e=r(!1);var i=o(a);e.push([n.i,'html,\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: "Arial", "Helvetica", sans-serif;\n  width: 100%;\n  background: #000;\n  overflow-y: hidden;\n}\n\ncanvas {\n  margin: 0;\n  display: none;\n}\n\nbody {\n  height: 100vh;\n  display: flex;\n}\n\n#model {\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  width: 340px;\n  height: 100%;\n  background: #ffffff;\n}\n\n.render {\n  width: calc(100% - 300px);\n  height: 100%;\n}\n\n.render img {\n  object-fit: contain;\n  width: 100%;\n  height: 100%;\n}\n\n.group {\n  margin: 0 20px 20px 20px;\n  display: flex;\n  flex-direction: column;\n}\n\n.group:first-child {\n  margin-top: 20px;\n}\n\n.options {\n  display: flex;\n  flex-direction: row;\n  background: #ddd;\n  padding: 20px;\n}\n\ninput[type="radio"],\ninput[type="checkbox"] {\n  display: none;\n}\n\nbutton,\ninput[type="radio"] + label,\ninput[type="checkbox"] + label {\n  border-radius: 3px;\n  border-style: solid;\n  border-width: 1px;\n  border-color: black;\n}\n\ninput[type="radio"]:disabled + label,\ninput[type="checkbox"]:disabled + label {\n  display: none;\n}\n\nbutton,\nlabel,\na.home,\na.sourceCode {\n  display: inline-block;\n  cursor: pointer;\n  outline: 0;\n  width: 32px;\n  height: 32px;\n  text-indent: -99999px;\n  background-image: url('+i+');\n  background-repeat: no-repeat;\n}\n\n#run {\n  width: 34px;\n  height: 34px;\n  background-position: -384px 0;\n}\n\n#shuffle {\n  width: 34px;\n  height: 34px;\n  background-position: -384px -32px;\n  margin-right: 4px;\n}\n\n#run:disabled {\n  opacity: 0.1;\n}\n\n.rgb label[for="first"] {\n  background-position: 0 0;\n}\n\n.rgb label[for="second"] {\n  background-position: -32px 0;\n}\n\n.rgb label[for="third"] {\n  background-position: -64px 0;\n}\n\n.hsv label[for="first"] {\n  background-position: 0 -32px;\n}\n\n.hsv label[for="second"] {\n  background-position: -32px -32px;\n}\n\n.hsv label[for="third"] {\n  background-position: -64px -32px;\n}\n\nlabel[for="first"],\nlabel[for="second"],\nlabel[for="third"] {\n  text-indent: 40px;\n  line-height: 32px;\n}\n\nlabel[for="colourMode"] {\n  background-position: -96px 0;\n  margin-right: 4px;\n}\n\nlabel[for="imageSize"] {\n  background-position: -128px 0;\n  margin-right: 4px;\n}\n\nlabel[for="firstNone"],\nlabel[for="secondNone"],\nlabel[for="thirdNone"] {\n  background-position: -160px 0;\n}\n\nlabel[for="firstZeroOne"],\nlabel[for="secondZeroOne"],\nlabel[for="thirdZeroOne"] {\n  background-position: -192px 0;\n}\n\nlabel[for="firstMinusPlusOne"],\nlabel[for="secondMinusPlusOne"],\nlabel[for="thirdMinusPlusOne"] {\n  background-position: -224px 0;\n  margin-right: 32px;\n}\n\nlabel[for="firstMinMax"],\nlabel[for="secondMinMax"],\nlabel[for="thirdMinMax"] {\n  background-position: -256px 0;\n}\n\nlabel[for="firstLimit"],\nlabel[for="secondLimit"],\nlabel[for="thirdLimit"] {\n  background-position: -288px 0;\n}\n\nlabel[for="firstWrap"],\nlabel[for="secondWrap"],\nlabel[for="thirdWrap"] {\n  background-position: -320px 0;\n}\n\nlabel[for="firstReflect"],\nlabel[for="secondReflect"],\nlabel[for="thirdReflect"] {\n  background-position: -352px 0;\n}\n\ninput[type="radio"]:checked + label,\ninput[type="checkbox"]:checked + label {\n  background-position-y: -32px;\n}\n\ntextarea.invalid {\n  border-color: red;\n}\n\nspan.error {\n  color: red;\n}\n\na.home {\n  background-position: -416px -32px;\n  position: relative;\n  left: 88px;\n}\n\na.sourceCode {\n  background-position: -416px 0;\n  position: relative;\n  left: 90px;\n}\n\n@media only screen and (max-width: 768px) {\n  body {\n    justify-content: center;\n  }\n\n  .generated #model {\n    display: none;\n  }\n\n  .render {\n    display: none;\n  }\n\n  .generated .render {\n    width: 100%;\n    display: block;\n  }\n}\n',""]),n.exports=e},function(n,e,t){"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=function(n,e){var t=n[1]||"",r=n[3];if(!r)return t;if(e&&"function"==typeof btoa){var o=(i=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(c," */")),a=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[t].concat(a).concat([o]).join("\n")}var i,l,c;return[t].join("\n")}(e,n);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},function(n,e,t){"use strict";n.exports=function(n,e){return e||(e={}),"string"!=typeof(n=n&&n.__esModule?n.default:n)?n:(/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n)}},function(n,e,t){"use strict";t.r(e),e.default=t.p+"87520d56e933d38c1486af4abe103310.png"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvbG9yLWNvbnZlcnQvY29udmVyc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb2xvdXJmb3JtLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9yZW5kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NhbnZhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29sb3ItY29udmVydC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29sb3ItbmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29sb3ItY29udmVydC9yb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY3NzL2NvbG91cmZvcm0uY3NzPzRjY2MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovLy8uL3NyYy9jc3MvY29sb3VyZm9ybS5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovLy8uL3NyYy9pbWcvaWNvbnMucG5nIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiY3NzS2V5d29yZHMiLCJyZXZlcnNlS2V5d29yZHMiLCJrZXlzIiwiY29udmVydCIsInJnYiIsImNoYW5uZWxzIiwibGFiZWxzIiwiaHNsIiwiaHN2IiwiaHdiIiwiY215ayIsInh5eiIsImxhYiIsImxjaCIsImhleCIsImtleXdvcmQiLCJhbnNpMTYiLCJhbnNpMjU2IiwiaGNnIiwiYXBwbGUiLCJncmF5IiwibW9kZWwiLCJFcnJvciIsImxlbmd0aCIsImciLCJiIiwibWluIiwiTWF0aCIsIm1heCIsImRlbHRhIiwiaCIsInJkaWYiLCJnZGlmIiwiYmRpZiIsInYiLCJkaWZmIiwiZGlmZmMiLCJ3IiwiayIsInJldmVyc2VkIiwiY3VycmVudENsb3Nlc3RLZXl3b3JkIiwiY3VycmVudENsb3Nlc3REaXN0YW5jZSIsIkluZmluaXR5IiwiZGlzdGFuY2UiLCJ5IiwieCIsInoiLCJ0MiIsInQzIiwidmFsIiwidDEiLCJzbWluIiwibG1pbiIsImhpIiwiZmxvb3IiLCJmIiwicSIsInZtaW4iLCJzbCIsIndoIiwiYmwiLCJyYXRpbyIsInkyIiwieDIiLCJ6MiIsImEiLCJhdGFuMiIsIlBJIiwic3FydCIsImhyIiwiY29zIiwic2luIiwiYXJncyIsInNhdHVyYXRpb24iLCJyb3VuZCIsImFuc2kiLCJjb2xvciIsIm11bHQiLCJyZW0iLCJzdHJpbmciLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIiwic3Vic3RyaW5nIiwibWF0Y2giLCJjb2xvclN0cmluZyIsInNwbGl0IiwibWFwIiwiY2hhciIsImpvaW4iLCJpbnRlZ2VyIiwicGFyc2VJbnQiLCJjaHJvbWEiLCJncmF5c2NhbGUiLCJodWUiLCJwdXJlIiwibWciLCJyZW5kZXIiLCJyZXF1aXJlIiwiZmV0Y2giLCJYTUxIdHRwUmVxdWVzdCIsIndpbmRvdyIsIm9ubG9hZCIsInFzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicmVuZGVyQXJlYSIsImltYWdlU2l6ZSIsImNvbG91ck1vZGUiLCJnZXRDbGVhbmVkRm4iLCJmaWVsZCIsInJlcGxhY2UiLCJ0cmltIiwiZ2V0U2NhbGUiLCJnZXRMaW1pdCIsIm9wdCIsImZuIiwic2NhbGUiLCJsaW1pdCIsInNldENvbG91ck1vZGUiLCJjaGVja2VkIiwiY2xhc3NOYW1lIiwidGl0bGUiLCJpbm5lckhUTUwiLCJzZXRJbWFnZVNpemUiLCJzZXRHZW5lcmF0ZWQiLCJmbGFnIiwic2V0RW5hYmxlZCIsImRpc2FibGVkIiwiZmllbGRzIiwicXVlcnlTZWxlY3RvckFsbCIsImluZGV4IiwicnVuUmVuZGVyIiwiZmFpbHVyZXMiLCJpbWciLCJmb3JFYWNoIiwic2V0RmFpbHVyZXMiLCJvbmNsaWNrIiwiYXBwZW5kQ2hpbGQiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwicG9zaXRpb25zIiwicmFuZG9tIiwic29ydCIsImUiLCJ0YXJnZXQiLCJvbmNoYW5nZSIsImNhbnZhcyIsInBpMiIsInNpemVzIiwiYmlnIiwic21hbGwiLCJsaW1pdHMiLCJhc0ZuIiwic3RyIiwiRnVuY3Rpb24iLCJ0ZXN0Rm4iLCJhc0xpbWl0IiwibGltaXRPcHQiLCJ3cmFwIiwicmVmbGVjdCIsImFzU2NhbGUiLCJzY2FsZU9wdCIsImxvdyIsImhpZ2giLCJmaXJzdE9wdCIsInNlY29uZE9wdCIsInRoaXJkT3B0IiwiaW1nU2l6ZSIsImNhbGxiYWNrIiwiZmlyc3RGbiIsInNlY29uZEZuIiwidGhpcmRGbiIsImZpcnN0U2NhbGUiLCJ0aGlyZFNjYWxlIiwiZmlyc3RMaW1pdCIsInNlY29uZExpbWl0IiwidGhpcmRMaW1pdCIsInNpemUiLCJpbWdDYW52YXMiLCJjb25zb2xlIiwiZXJyb3IiLCJzZWNvbmRTY2FsZSIsInZhbHVlcyIsIkFycmF5IiwiZmlyc3RNaW4iLCJmaXJzdE1heCIsInNlY29uZE1pbiIsInNlY29uZE1heCIsInRoaXJkTWluIiwidGhpcmRNYXgiLCJ4ciIsInlyIiwiZmlyc3QiLCJzZWNvbmQiLCJ0aGlyZCIsImwxIiwibDIiLCJsMyIsInJhdyIsImRyYXdQaXhlbCIsImJ1aWxkSW1hZ2UiLCJib2R5IiwiY3JlYXRlRWxlbWVudCIsIndpZHRoIiwiaGVpZ2h0IiwiY29udGV4dCIsImdldENvbnRleHQiLCJjYW52YXNEYXRhIiwiZ2V0SW1hZ2VEYXRhIiwiZGF0YSIsInB1dEltYWdlRGF0YSIsIkltYWdlIiwic3JjIiwidG9EYXRhVVJMIiwiY29udmVyc2lvbnMiLCJyb3V0ZSIsImZyb21Nb2RlbCIsInJvdXRlcyIsInRvTW9kZWwiLCJ3cmFwcGVkRm4iLCJhcmcwIiwicmVzdWx0IiwibGVuIiwiY29udmVyc2lvbiIsIndyYXBSb3VuZGVkIiwid3JhcFJhdyIsImRlcml2ZUJGUyIsImdyYXBoIiwibW9kZWxzIiwicGFyZW50IiwiYnVpbGRHcmFwaCIsInF1ZXVlIiwiY3VycmVudCIsInBvcCIsImFkamFjZW50cyIsImFkamFjZW50Iiwibm9kZSIsInVuc2hpZnQiLCJsaW5rIiwiZnJvbSIsInRvIiwid3JhcENvbnZlcnNpb24iLCJwYXRoIiwiY3VyIiwiYXBpIiwiY29udGVudCIsImRlZmF1bHQiLCJvcHRpb25zIiwibG9jYWxzIiwibWVtbyIsImlzT2xkSUUiLCJCb29sZWFuIiwiYWxsIiwiYXRvYiIsImdldFRhcmdldCIsInN0eWxlVGFyZ2V0IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJsaXN0IiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaXRlbSIsImlkIiwiYmFzZSIsImNvdW50IiwiY29uY2F0Iiwib2JqIiwiY3NzIiwibWVkaWEiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsInB1c2giLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlIiwiYXR0cmlidXRlcyIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJ1cGRhdGUiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsInNwbGljZSIsIl9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyIsIl9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJ1c2VTb3VyY2VNYXAiLCJ0aGlzIiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJiYXNlNjQiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJ1cmwiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FH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WSxTQUFTN0QsT0FBT0osRUFBSyxJQUZyREEsRUFBSyxHQUFLaUUsR0FNZHBFLEVBQUtjLEtBQUtYLE1BSVBILEksNkJDOURUelMsRUFBT0QsUUFBVSxTQUFVaVgsRUFBS3ZGLEdBUzlCLE9BUktBLElBRUhBLEVBQVUsSUFNTyxpQkFGbkJ1RixFQUFNQSxHQUFPQSxFQUFJM1YsV0FBYTJWLEVBQUl4RixRQUFVd0YsR0FHbkNBLEdBSUwsZUFBZUMsS0FBS0QsS0FFdEJBLEVBQU1BLEVBQUlFLE1BQU0sR0FBSSxJQUdsQnpGLEVBQVEwRixPQUVWSCxHQUFPdkYsRUFBUTBGLE1BS2IsY0FBY0YsS0FBS0QsSUFBUXZGLEVBQVEyRixXQUM5QixJQUFLcEUsT0FBT2dFLEVBQUlqTyxRQUFRLEtBQU0sT0FBT0EsUUFBUSxNQUFPLE9BQVEsS0FHOURpTyxLLDZCQ2hDVCxPQUFlLGNBQTBCIiwiZmlsZSI6ImFwcC5iMjRmZmRlM2EyMWM3NWI0MDFkMC5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMSk7XG4iLCIvKiBNSVQgbGljZW5zZSAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tbWl4ZWQtb3BlcmF0b3JzICovXG5jb25zdCBjc3NLZXl3b3JkcyA9IHJlcXVpcmUoJ2NvbG9yLW5hbWUnKTtcblxuLy8gTk9URTogY29udmVyc2lvbnMgc2hvdWxkIG9ubHkgcmV0dXJuIHByaW1pdGl2ZSB2YWx1ZXMgKGkuZS4gYXJyYXlzLCBvclxuLy8gICAgICAgdmFsdWVzIHRoYXQgZ2l2ZSBjb3JyZWN0IGB0eXBlb2ZgIHJlc3VsdHMpLlxuLy8gICAgICAgZG8gbm90IHVzZSBib3ggdmFsdWVzIHR5cGVzIChpLmUuIE51bWJlcigpLCBTdHJpbmcoKSwgZXRjLilcblxuY29uc3QgcmV2ZXJzZUtleXdvcmRzID0ge307XG5mb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhjc3NLZXl3b3JkcykpIHtcblx0cmV2ZXJzZUtleXdvcmRzW2Nzc0tleXdvcmRzW2tleV1dID0ga2V5O1xufVxuXG5jb25zdCBjb252ZXJ0ID0ge1xuXHRyZ2I6IHtjaGFubmVsczogMywgbGFiZWxzOiAncmdiJ30sXG5cdGhzbDoge2NoYW5uZWxzOiAzLCBsYWJlbHM6ICdoc2wnfSxcblx0aHN2OiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ2hzdid9LFxuXHRod2I6IHtjaGFubmVsczogMywgbGFiZWxzOiAnaHdiJ30sXG5cdGNteWs6IHtjaGFubmVsczogNCwgbGFiZWxzOiAnY215ayd9LFxuXHR4eXo6IHtjaGFubmVsczogMywgbGFiZWxzOiAneHl6J30sXG5cdGxhYjoge2NoYW5uZWxzOiAzLCBsYWJlbHM6ICdsYWInfSxcblx0bGNoOiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogJ2xjaCd9LFxuXHRoZXg6IHtjaGFubmVsczogMSwgbGFiZWxzOiBbJ2hleCddfSxcblx0a2V5d29yZDoge2NoYW5uZWxzOiAxLCBsYWJlbHM6IFsna2V5d29yZCddfSxcblx0YW5zaTE2OiB7Y2hhbm5lbHM6IDEsIGxhYmVsczogWydhbnNpMTYnXX0sXG5cdGFuc2kyNTY6IHtjaGFubmVsczogMSwgbGFiZWxzOiBbJ2Fuc2kyNTYnXX0sXG5cdGhjZzoge2NoYW5uZWxzOiAzLCBsYWJlbHM6IFsnaCcsICdjJywgJ2cnXX0sXG5cdGFwcGxlOiB7Y2hhbm5lbHM6IDMsIGxhYmVsczogWydyMTYnLCAnZzE2JywgJ2IxNiddfSxcblx0Z3JheToge2NoYW5uZWxzOiAxLCBsYWJlbHM6IFsnZ3JheSddfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb252ZXJ0O1xuXG4vLyBIaWRlIC5jaGFubmVscyBhbmQgLmxhYmVscyBwcm9wZXJ0aWVzXG5mb3IgKGNvbnN0IG1vZGVsIG9mIE9iamVjdC5rZXlzKGNvbnZlcnQpKSB7XG5cdGlmICghKCdjaGFubmVscycgaW4gY29udmVydFttb2RlbF0pKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdtaXNzaW5nIGNoYW5uZWxzIHByb3BlcnR5OiAnICsgbW9kZWwpO1xuXHR9XG5cblx0aWYgKCEoJ2xhYmVscycgaW4gY29udmVydFttb2RlbF0pKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdtaXNzaW5nIGNoYW5uZWwgbGFiZWxzIHByb3BlcnR5OiAnICsgbW9kZWwpO1xuXHR9XG5cblx0aWYgKGNvbnZlcnRbbW9kZWxdLmxhYmVscy5sZW5ndGggIT09IGNvbnZlcnRbbW9kZWxdLmNoYW5uZWxzKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdjaGFubmVsIGFuZCBsYWJlbCBjb3VudHMgbWlzbWF0Y2g6ICcgKyBtb2RlbCk7XG5cdH1cblxuXHRjb25zdCB7Y2hhbm5lbHMsIGxhYmVsc30gPSBjb252ZXJ0W21vZGVsXTtcblx0ZGVsZXRlIGNvbnZlcnRbbW9kZWxdLmNoYW5uZWxzO1xuXHRkZWxldGUgY29udmVydFttb2RlbF0ubGFiZWxzO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udmVydFttb2RlbF0sICdjaGFubmVscycsIHt2YWx1ZTogY2hhbm5lbHN9KTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbbW9kZWxdLCAnbGFiZWxzJywge3ZhbHVlOiBsYWJlbHN9KTtcbn1cblxuY29udmVydC5yZ2IuaHNsID0gZnVuY3Rpb24gKHJnYikge1xuXHRjb25zdCByID0gcmdiWzBdIC8gMjU1O1xuXHRjb25zdCBnID0gcmdiWzFdIC8gMjU1O1xuXHRjb25zdCBiID0gcmdiWzJdIC8gMjU1O1xuXHRjb25zdCBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcblx0Y29uc3QgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG5cdGNvbnN0IGRlbHRhID0gbWF4IC0gbWluO1xuXHRsZXQgaDtcblx0bGV0IHM7XG5cblx0aWYgKG1heCA9PT0gbWluKSB7XG5cdFx0aCA9IDA7XG5cdH0gZWxzZSBpZiAociA9PT0gbWF4KSB7XG5cdFx0aCA9IChnIC0gYikgLyBkZWx0YTtcblx0fSBlbHNlIGlmIChnID09PSBtYXgpIHtcblx0XHRoID0gMiArIChiIC0gcikgLyBkZWx0YTtcblx0fSBlbHNlIGlmIChiID09PSBtYXgpIHtcblx0XHRoID0gNCArIChyIC0gZykgLyBkZWx0YTtcblx0fVxuXG5cdGggPSBNYXRoLm1pbihoICogNjAsIDM2MCk7XG5cblx0aWYgKGggPCAwKSB7XG5cdFx0aCArPSAzNjA7XG5cdH1cblxuXHRjb25zdCBsID0gKG1pbiArIG1heCkgLyAyO1xuXG5cdGlmIChtYXggPT09IG1pbikge1xuXHRcdHMgPSAwO1xuXHR9IGVsc2UgaWYgKGwgPD0gMC41KSB7XG5cdFx0cyA9IGRlbHRhIC8gKG1heCArIG1pbik7XG5cdH0gZWxzZSB7XG5cdFx0cyA9IGRlbHRhIC8gKDIgLSBtYXggLSBtaW4pO1xuXHR9XG5cblx0cmV0dXJuIFtoLCBzICogMTAwLCBsICogMTAwXTtcbn07XG5cbmNvbnZlcnQucmdiLmhzdiA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0bGV0IHJkaWY7XG5cdGxldCBnZGlmO1xuXHRsZXQgYmRpZjtcblx0bGV0IGg7XG5cdGxldCBzO1xuXG5cdGNvbnN0IHIgPSByZ2JbMF0gLyAyNTU7XG5cdGNvbnN0IGcgPSByZ2JbMV0gLyAyNTU7XG5cdGNvbnN0IGIgPSByZ2JbMl0gLyAyNTU7XG5cdGNvbnN0IHYgPSBNYXRoLm1heChyLCBnLCBiKTtcblx0Y29uc3QgZGlmZiA9IHYgLSBNYXRoLm1pbihyLCBnLCBiKTtcblx0Y29uc3QgZGlmZmMgPSBmdW5jdGlvbiAoYykge1xuXHRcdHJldHVybiAodiAtIGMpIC8gNiAvIGRpZmYgKyAxIC8gMjtcblx0fTtcblxuXHRpZiAoZGlmZiA9PT0gMCkge1xuXHRcdGggPSAwO1xuXHRcdHMgPSAwO1xuXHR9IGVsc2Uge1xuXHRcdHMgPSBkaWZmIC8gdjtcblx0XHRyZGlmID0gZGlmZmMocik7XG5cdFx0Z2RpZiA9IGRpZmZjKGcpO1xuXHRcdGJkaWYgPSBkaWZmYyhiKTtcblxuXHRcdGlmIChyID09PSB2KSB7XG5cdFx0XHRoID0gYmRpZiAtIGdkaWY7XG5cdFx0fSBlbHNlIGlmIChnID09PSB2KSB7XG5cdFx0XHRoID0gKDEgLyAzKSArIHJkaWYgLSBiZGlmO1xuXHRcdH0gZWxzZSBpZiAoYiA9PT0gdikge1xuXHRcdFx0aCA9ICgyIC8gMykgKyBnZGlmIC0gcmRpZjtcblx0XHR9XG5cblx0XHRpZiAoaCA8IDApIHtcblx0XHRcdGggKz0gMTtcblx0XHR9IGVsc2UgaWYgKGggPiAxKSB7XG5cdFx0XHRoIC09IDE7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFtcblx0XHRoICogMzYwLFxuXHRcdHMgKiAxMDAsXG5cdFx0diAqIDEwMFxuXHRdO1xufTtcblxuY29udmVydC5yZ2IuaHdiID0gZnVuY3Rpb24gKHJnYikge1xuXHRjb25zdCByID0gcmdiWzBdO1xuXHRjb25zdCBnID0gcmdiWzFdO1xuXHRsZXQgYiA9IHJnYlsyXTtcblx0Y29uc3QgaCA9IGNvbnZlcnQucmdiLmhzbChyZ2IpWzBdO1xuXHRjb25zdCB3ID0gMSAvIDI1NSAqIE1hdGgubWluKHIsIE1hdGgubWluKGcsIGIpKTtcblxuXHRiID0gMSAtIDEgLyAyNTUgKiBNYXRoLm1heChyLCBNYXRoLm1heChnLCBiKSk7XG5cblx0cmV0dXJuIFtoLCB3ICogMTAwLCBiICogMTAwXTtcbn07XG5cbmNvbnZlcnQucmdiLmNteWsgPSBmdW5jdGlvbiAocmdiKSB7XG5cdGNvbnN0IHIgPSByZ2JbMF0gLyAyNTU7XG5cdGNvbnN0IGcgPSByZ2JbMV0gLyAyNTU7XG5cdGNvbnN0IGIgPSByZ2JbMl0gLyAyNTU7XG5cblx0Y29uc3QgayA9IE1hdGgubWluKDEgLSByLCAxIC0gZywgMSAtIGIpO1xuXHRjb25zdCBjID0gKDEgLSByIC0gaykgLyAoMSAtIGspIHx8IDA7XG5cdGNvbnN0IG0gPSAoMSAtIGcgLSBrKSAvICgxIC0gaykgfHwgMDtcblx0Y29uc3QgeSA9ICgxIC0gYiAtIGspIC8gKDEgLSBrKSB8fCAwO1xuXG5cdHJldHVybiBbYyAqIDEwMCwgbSAqIDEwMCwgeSAqIDEwMCwgayAqIDEwMF07XG59O1xuXG5mdW5jdGlvbiBjb21wYXJhdGl2ZURpc3RhbmNlKHgsIHkpIHtcblx0Lypcblx0XHRTZWUgaHR0cHM6Ly9lbi5tLndpa2lwZWRpYS5vcmcvd2lraS9FdWNsaWRlYW5fZGlzdGFuY2UjU3F1YXJlZF9FdWNsaWRlYW5fZGlzdGFuY2Vcblx0Ki9cblx0cmV0dXJuIChcblx0XHQoKHhbMF0gLSB5WzBdKSAqKiAyKSArXG5cdFx0KCh4WzFdIC0geVsxXSkgKiogMikgK1xuXHRcdCgoeFsyXSAtIHlbMl0pICoqIDIpXG5cdCk7XG59XG5cbmNvbnZlcnQucmdiLmtleXdvcmQgPSBmdW5jdGlvbiAocmdiKSB7XG5cdGNvbnN0IHJldmVyc2VkID0gcmV2ZXJzZUtleXdvcmRzW3JnYl07XG5cdGlmIChyZXZlcnNlZCkge1xuXHRcdHJldHVybiByZXZlcnNlZDtcblx0fVxuXG5cdGxldCBjdXJyZW50Q2xvc2VzdERpc3RhbmNlID0gSW5maW5pdHk7XG5cdGxldCBjdXJyZW50Q2xvc2VzdEtleXdvcmQ7XG5cblx0Zm9yIChjb25zdCBrZXl3b3JkIG9mIE9iamVjdC5rZXlzKGNzc0tleXdvcmRzKSkge1xuXHRcdGNvbnN0IHZhbHVlID0gY3NzS2V5d29yZHNba2V5d29yZF07XG5cblx0XHQvLyBDb21wdXRlIGNvbXBhcmF0aXZlIGRpc3RhbmNlXG5cdFx0Y29uc3QgZGlzdGFuY2UgPSBjb21wYXJhdGl2ZURpc3RhbmNlKHJnYiwgdmFsdWUpO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgaXRzIGxlc3MsIGlmIHNvIHNldCBhcyBjbG9zZXN0XG5cdFx0aWYgKGRpc3RhbmNlIDwgY3VycmVudENsb3Nlc3REaXN0YW5jZSkge1xuXHRcdFx0Y3VycmVudENsb3Nlc3REaXN0YW5jZSA9IGRpc3RhbmNlO1xuXHRcdFx0Y3VycmVudENsb3Nlc3RLZXl3b3JkID0ga2V5d29yZDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY3VycmVudENsb3Nlc3RLZXl3b3JkO1xufTtcblxuY29udmVydC5rZXl3b3JkLnJnYiA9IGZ1bmN0aW9uIChrZXl3b3JkKSB7XG5cdHJldHVybiBjc3NLZXl3b3Jkc1trZXl3b3JkXTtcbn07XG5cbmNvbnZlcnQucmdiLnh5eiA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0bGV0IHIgPSByZ2JbMF0gLyAyNTU7XG5cdGxldCBnID0gcmdiWzFdIC8gMjU1O1xuXHRsZXQgYiA9IHJnYlsyXSAvIDI1NTtcblxuXHQvLyBBc3N1bWUgc1JHQlxuXHRyID0gciA+IDAuMDQwNDUgPyAoKChyICsgMC4wNTUpIC8gMS4wNTUpICoqIDIuNCkgOiAociAvIDEyLjkyKTtcblx0ZyA9IGcgPiAwLjA0MDQ1ID8gKCgoZyArIDAuMDU1KSAvIDEuMDU1KSAqKiAyLjQpIDogKGcgLyAxMi45Mik7XG5cdGIgPSBiID4gMC4wNDA0NSA/ICgoKGIgKyAwLjA1NSkgLyAxLjA1NSkgKiogMi40KSA6IChiIC8gMTIuOTIpO1xuXG5cdGNvbnN0IHggPSAociAqIDAuNDEyNCkgKyAoZyAqIDAuMzU3NikgKyAoYiAqIDAuMTgwNSk7XG5cdGNvbnN0IHkgPSAociAqIDAuMjEyNikgKyAoZyAqIDAuNzE1MikgKyAoYiAqIDAuMDcyMik7XG5cdGNvbnN0IHogPSAociAqIDAuMDE5MykgKyAoZyAqIDAuMTE5MikgKyAoYiAqIDAuOTUwNSk7XG5cblx0cmV0dXJuIFt4ICogMTAwLCB5ICogMTAwLCB6ICogMTAwXTtcbn07XG5cbmNvbnZlcnQucmdiLmxhYiA9IGZ1bmN0aW9uIChyZ2IpIHtcblx0Y29uc3QgeHl6ID0gY29udmVydC5yZ2IueHl6KHJnYik7XG5cdGxldCB4ID0geHl6WzBdO1xuXHRsZXQgeSA9IHh5elsxXTtcblx0bGV0IHogPSB4eXpbMl07XG5cblx0eCAvPSA5NS4wNDc7XG5cdHkgLz0gMTAwO1xuXHR6IC89IDEwOC44ODM7XG5cblx0eCA9IHggPiAwLjAwODg1NiA/ICh4ICoqICgxIC8gMykpIDogKDcuNzg3ICogeCkgKyAoMTYgLyAxMTYpO1xuXHR5ID0geSA+IDAuMDA4ODU2ID8gKHkgKiogKDEgLyAzKSkgOiAoNy43ODcgKiB5KSArICgxNiAvIDExNik7XG5cdHogPSB6ID4gMC4wMDg4NTYgPyAoeiAqKiAoMSAvIDMpKSA6ICg3Ljc4NyAqIHopICsgKDE2IC8gMTE2KTtcblxuXHRjb25zdCBsID0gKDExNiAqIHkpIC0gMTY7XG5cdGNvbnN0IGEgPSA1MDAgKiAoeCAtIHkpO1xuXHRjb25zdCBiID0gMjAwICogKHkgLSB6KTtcblxuXHRyZXR1cm4gW2wsIGEsIGJdO1xufTtcblxuY29udmVydC5oc2wucmdiID0gZnVuY3Rpb24gKGhzbCkge1xuXHRjb25zdCBoID0gaHNsWzBdIC8gMzYwO1xuXHRjb25zdCBzID0gaHNsWzFdIC8gMTAwO1xuXHRjb25zdCBsID0gaHNsWzJdIC8gMTAwO1xuXHRsZXQgdDI7XG5cdGxldCB0Mztcblx0bGV0IHZhbDtcblxuXHRpZiAocyA9PT0gMCkge1xuXHRcdHZhbCA9IGwgKiAyNTU7XG5cdFx0cmV0dXJuIFt2YWwsIHZhbCwgdmFsXTtcblx0fVxuXG5cdGlmIChsIDwgMC41KSB7XG5cdFx0dDIgPSBsICogKDEgKyBzKTtcblx0fSBlbHNlIHtcblx0XHR0MiA9IGwgKyBzIC0gbCAqIHM7XG5cdH1cblxuXHRjb25zdCB0MSA9IDIgKiBsIC0gdDI7XG5cblx0Y29uc3QgcmdiID0gWzAsIDAsIDBdO1xuXHRmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuXHRcdHQzID0gaCArIDEgLyAzICogLShpIC0gMSk7XG5cdFx0aWYgKHQzIDwgMCkge1xuXHRcdFx0dDMrKztcblx0XHR9XG5cblx0XHRpZiAodDMgPiAxKSB7XG5cdFx0XHR0My0tO1xuXHRcdH1cblxuXHRcdGlmICg2ICogdDMgPCAxKSB7XG5cdFx0XHR2YWwgPSB0MSArICh0MiAtIHQxKSAqIDYgKiB0Mztcblx0XHR9IGVsc2UgaWYgKDIgKiB0MyA8IDEpIHtcblx0XHRcdHZhbCA9IHQyO1xuXHRcdH0gZWxzZSBpZiAoMyAqIHQzIDwgMikge1xuXHRcdFx0dmFsID0gdDEgKyAodDIgLSB0MSkgKiAoMiAvIDMgLSB0MykgKiA2O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YWwgPSB0MTtcblx0XHR9XG5cblx0XHRyZ2JbaV0gPSB2YWwgKiAyNTU7XG5cdH1cblxuXHRyZXR1cm4gcmdiO1xufTtcblxuY29udmVydC5oc2wuaHN2ID0gZnVuY3Rpb24gKGhzbCkge1xuXHRjb25zdCBoID0gaHNsWzBdO1xuXHRsZXQgcyA9IGhzbFsxXSAvIDEwMDtcblx0bGV0IGwgPSBoc2xbMl0gLyAxMDA7XG5cdGxldCBzbWluID0gcztcblx0Y29uc3QgbG1pbiA9IE1hdGgubWF4KGwsIDAuMDEpO1xuXG5cdGwgKj0gMjtcblx0cyAqPSAobCA8PSAxKSA/IGwgOiAyIC0gbDtcblx0c21pbiAqPSBsbWluIDw9IDEgPyBsbWluIDogMiAtIGxtaW47XG5cdGNvbnN0IHYgPSAobCArIHMpIC8gMjtcblx0Y29uc3Qgc3YgPSBsID09PSAwID8gKDIgKiBzbWluKSAvIChsbWluICsgc21pbikgOiAoMiAqIHMpIC8gKGwgKyBzKTtcblxuXHRyZXR1cm4gW2gsIHN2ICogMTAwLCB2ICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaHN2LnJnYiA9IGZ1bmN0aW9uIChoc3YpIHtcblx0Y29uc3QgaCA9IGhzdlswXSAvIDYwO1xuXHRjb25zdCBzID0gaHN2WzFdIC8gMTAwO1xuXHRsZXQgdiA9IGhzdlsyXSAvIDEwMDtcblx0Y29uc3QgaGkgPSBNYXRoLmZsb29yKGgpICUgNjtcblxuXHRjb25zdCBmID0gaCAtIE1hdGguZmxvb3IoaCk7XG5cdGNvbnN0IHAgPSAyNTUgKiB2ICogKDEgLSBzKTtcblx0Y29uc3QgcSA9IDI1NSAqIHYgKiAoMSAtIChzICogZikpO1xuXHRjb25zdCB0ID0gMjU1ICogdiAqICgxIC0gKHMgKiAoMSAtIGYpKSk7XG5cdHYgKj0gMjU1O1xuXG5cdHN3aXRjaCAoaGkpIHtcblx0XHRjYXNlIDA6XG5cdFx0XHRyZXR1cm4gW3YsIHQsIHBdO1xuXHRcdGNhc2UgMTpcblx0XHRcdHJldHVybiBbcSwgdiwgcF07XG5cdFx0Y2FzZSAyOlxuXHRcdFx0cmV0dXJuIFtwLCB2LCB0XTtcblx0XHRjYXNlIDM6XG5cdFx0XHRyZXR1cm4gW3AsIHEsIHZdO1xuXHRcdGNhc2UgNDpcblx0XHRcdHJldHVybiBbdCwgcCwgdl07XG5cdFx0Y2FzZSA1OlxuXHRcdFx0cmV0dXJuIFt2LCBwLCBxXTtcblx0fVxufTtcblxuY29udmVydC5oc3YuaHNsID0gZnVuY3Rpb24gKGhzdikge1xuXHRjb25zdCBoID0gaHN2WzBdO1xuXHRjb25zdCBzID0gaHN2WzFdIC8gMTAwO1xuXHRjb25zdCB2ID0gaHN2WzJdIC8gMTAwO1xuXHRjb25zdCB2bWluID0gTWF0aC5tYXgodiwgMC4wMSk7XG5cdGxldCBzbDtcblx0bGV0IGw7XG5cblx0bCA9ICgyIC0gcykgKiB2O1xuXHRjb25zdCBsbWluID0gKDIgLSBzKSAqIHZtaW47XG5cdHNsID0gcyAqIHZtaW47XG5cdHNsIC89IChsbWluIDw9IDEpID8gbG1pbiA6IDIgLSBsbWluO1xuXHRzbCA9IHNsIHx8IDA7XG5cdGwgLz0gMjtcblxuXHRyZXR1cm4gW2gsIHNsICogMTAwLCBsICogMTAwXTtcbn07XG5cbi8vIGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzcy1jb2xvci8jaHdiLXRvLXJnYlxuY29udmVydC5od2IucmdiID0gZnVuY3Rpb24gKGh3Yikge1xuXHRjb25zdCBoID0gaHdiWzBdIC8gMzYwO1xuXHRsZXQgd2ggPSBod2JbMV0gLyAxMDA7XG5cdGxldCBibCA9IGh3YlsyXSAvIDEwMDtcblx0Y29uc3QgcmF0aW8gPSB3aCArIGJsO1xuXHRsZXQgZjtcblxuXHQvLyBXaCArIGJsIGNhbnQgYmUgPiAxXG5cdGlmIChyYXRpbyA+IDEpIHtcblx0XHR3aCAvPSByYXRpbztcblx0XHRibCAvPSByYXRpbztcblx0fVxuXG5cdGNvbnN0IGkgPSBNYXRoLmZsb29yKDYgKiBoKTtcblx0Y29uc3QgdiA9IDEgLSBibDtcblx0ZiA9IDYgKiBoIC0gaTtcblxuXHRpZiAoKGkgJiAweDAxKSAhPT0gMCkge1xuXHRcdGYgPSAxIC0gZjtcblx0fVxuXG5cdGNvbnN0IG4gPSB3aCArIGYgKiAodiAtIHdoKTsgLy8gTGluZWFyIGludGVycG9sYXRpb25cblxuXHRsZXQgcjtcblx0bGV0IGc7XG5cdGxldCBiO1xuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtc3RhdGVtZW50cy1wZXItbGluZSxuby1tdWx0aS1zcGFjZXMgKi9cblx0c3dpdGNoIChpKSB7XG5cdFx0ZGVmYXVsdDpcblx0XHRjYXNlIDY6XG5cdFx0Y2FzZSAwOiByID0gdjsgIGcgPSBuOyAgYiA9IHdoOyBicmVhaztcblx0XHRjYXNlIDE6IHIgPSBuOyAgZyA9IHY7ICBiID0gd2g7IGJyZWFrO1xuXHRcdGNhc2UgMjogciA9IHdoOyBnID0gdjsgIGIgPSBuOyBicmVhaztcblx0XHRjYXNlIDM6IHIgPSB3aDsgZyA9IG47ICBiID0gdjsgYnJlYWs7XG5cdFx0Y2FzZSA0OiByID0gbjsgIGcgPSB3aDsgYiA9IHY7IGJyZWFrO1xuXHRcdGNhc2UgNTogciA9IHY7ICBnID0gd2g7IGIgPSBuOyBicmVhaztcblx0fVxuXHQvKiBlc2xpbnQtZW5hYmxlIG1heC1zdGF0ZW1lbnRzLXBlci1saW5lLG5vLW11bHRpLXNwYWNlcyAqL1xuXG5cdHJldHVybiBbciAqIDI1NSwgZyAqIDI1NSwgYiAqIDI1NV07XG59O1xuXG5jb252ZXJ0LmNteWsucmdiID0gZnVuY3Rpb24gKGNteWspIHtcblx0Y29uc3QgYyA9IGNteWtbMF0gLyAxMDA7XG5cdGNvbnN0IG0gPSBjbXlrWzFdIC8gMTAwO1xuXHRjb25zdCB5ID0gY215a1syXSAvIDEwMDtcblx0Y29uc3QgayA9IGNteWtbM10gLyAxMDA7XG5cblx0Y29uc3QgciA9IDEgLSBNYXRoLm1pbigxLCBjICogKDEgLSBrKSArIGspO1xuXHRjb25zdCBnID0gMSAtIE1hdGgubWluKDEsIG0gKiAoMSAtIGspICsgayk7XG5cdGNvbnN0IGIgPSAxIC0gTWF0aC5taW4oMSwgeSAqICgxIC0gaykgKyBrKTtcblxuXHRyZXR1cm4gW3IgKiAyNTUsIGcgKiAyNTUsIGIgKiAyNTVdO1xufTtcblxuY29udmVydC54eXoucmdiID0gZnVuY3Rpb24gKHh5eikge1xuXHRjb25zdCB4ID0geHl6WzBdIC8gMTAwO1xuXHRjb25zdCB5ID0geHl6WzFdIC8gMTAwO1xuXHRjb25zdCB6ID0geHl6WzJdIC8gMTAwO1xuXHRsZXQgcjtcblx0bGV0IGc7XG5cdGxldCBiO1xuXG5cdHIgPSAoeCAqIDMuMjQwNikgKyAoeSAqIC0xLjUzNzIpICsgKHogKiAtMC40OTg2KTtcblx0ZyA9ICh4ICogLTAuOTY4OSkgKyAoeSAqIDEuODc1OCkgKyAoeiAqIDAuMDQxNSk7XG5cdGIgPSAoeCAqIDAuMDU1NykgKyAoeSAqIC0wLjIwNDApICsgKHogKiAxLjA1NzApO1xuXG5cdC8vIEFzc3VtZSBzUkdCXG5cdHIgPSByID4gMC4wMDMxMzA4XG5cdFx0PyAoKDEuMDU1ICogKHIgKiogKDEuMCAvIDIuNCkpKSAtIDAuMDU1KVxuXHRcdDogciAqIDEyLjkyO1xuXG5cdGcgPSBnID4gMC4wMDMxMzA4XG5cdFx0PyAoKDEuMDU1ICogKGcgKiogKDEuMCAvIDIuNCkpKSAtIDAuMDU1KVxuXHRcdDogZyAqIDEyLjkyO1xuXG5cdGIgPSBiID4gMC4wMDMxMzA4XG5cdFx0PyAoKDEuMDU1ICogKGIgKiogKDEuMCAvIDIuNCkpKSAtIDAuMDU1KVxuXHRcdDogYiAqIDEyLjkyO1xuXG5cdHIgPSBNYXRoLm1pbihNYXRoLm1heCgwLCByKSwgMSk7XG5cdGcgPSBNYXRoLm1pbihNYXRoLm1heCgwLCBnKSwgMSk7XG5cdGIgPSBNYXRoLm1pbihNYXRoLm1heCgwLCBiKSwgMSk7XG5cblx0cmV0dXJuIFtyICogMjU1LCBnICogMjU1LCBiICogMjU1XTtcbn07XG5cbmNvbnZlcnQueHl6LmxhYiA9IGZ1bmN0aW9uICh4eXopIHtcblx0bGV0IHggPSB4eXpbMF07XG5cdGxldCB5ID0geHl6WzFdO1xuXHRsZXQgeiA9IHh5elsyXTtcblxuXHR4IC89IDk1LjA0Nztcblx0eSAvPSAxMDA7XG5cdHogLz0gMTA4Ljg4MztcblxuXHR4ID0geCA+IDAuMDA4ODU2ID8gKHggKiogKDEgLyAzKSkgOiAoNy43ODcgKiB4KSArICgxNiAvIDExNik7XG5cdHkgPSB5ID4gMC4wMDg4NTYgPyAoeSAqKiAoMSAvIDMpKSA6ICg3Ljc4NyAqIHkpICsgKDE2IC8gMTE2KTtcblx0eiA9IHogPiAwLjAwODg1NiA/ICh6ICoqICgxIC8gMykpIDogKDcuNzg3ICogeikgKyAoMTYgLyAxMTYpO1xuXG5cdGNvbnN0IGwgPSAoMTE2ICogeSkgLSAxNjtcblx0Y29uc3QgYSA9IDUwMCAqICh4IC0geSk7XG5cdGNvbnN0IGIgPSAyMDAgKiAoeSAtIHopO1xuXG5cdHJldHVybiBbbCwgYSwgYl07XG59O1xuXG5jb252ZXJ0LmxhYi54eXogPSBmdW5jdGlvbiAobGFiKSB7XG5cdGNvbnN0IGwgPSBsYWJbMF07XG5cdGNvbnN0IGEgPSBsYWJbMV07XG5cdGNvbnN0IGIgPSBsYWJbMl07XG5cdGxldCB4O1xuXHRsZXQgeTtcblx0bGV0IHo7XG5cblx0eSA9IChsICsgMTYpIC8gMTE2O1xuXHR4ID0gYSAvIDUwMCArIHk7XG5cdHogPSB5IC0gYiAvIDIwMDtcblxuXHRjb25zdCB5MiA9IHkgKiogMztcblx0Y29uc3QgeDIgPSB4ICoqIDM7XG5cdGNvbnN0IHoyID0geiAqKiAzO1xuXHR5ID0geTIgPiAwLjAwODg1NiA/IHkyIDogKHkgLSAxNiAvIDExNikgLyA3Ljc4Nztcblx0eCA9IHgyID4gMC4wMDg4NTYgPyB4MiA6ICh4IC0gMTYgLyAxMTYpIC8gNy43ODc7XG5cdHogPSB6MiA+IDAuMDA4ODU2ID8gejIgOiAoeiAtIDE2IC8gMTE2KSAvIDcuNzg3O1xuXG5cdHggKj0gOTUuMDQ3O1xuXHR5ICo9IDEwMDtcblx0eiAqPSAxMDguODgzO1xuXG5cdHJldHVybiBbeCwgeSwgel07XG59O1xuXG5jb252ZXJ0LmxhYi5sY2ggPSBmdW5jdGlvbiAobGFiKSB7XG5cdGNvbnN0IGwgPSBsYWJbMF07XG5cdGNvbnN0IGEgPSBsYWJbMV07XG5cdGNvbnN0IGIgPSBsYWJbMl07XG5cdGxldCBoO1xuXG5cdGNvbnN0IGhyID0gTWF0aC5hdGFuMihiLCBhKTtcblx0aCA9IGhyICogMzYwIC8gMiAvIE1hdGguUEk7XG5cblx0aWYgKGggPCAwKSB7XG5cdFx0aCArPSAzNjA7XG5cdH1cblxuXHRjb25zdCBjID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpO1xuXG5cdHJldHVybiBbbCwgYywgaF07XG59O1xuXG5jb252ZXJ0LmxjaC5sYWIgPSBmdW5jdGlvbiAobGNoKSB7XG5cdGNvbnN0IGwgPSBsY2hbMF07XG5cdGNvbnN0IGMgPSBsY2hbMV07XG5cdGNvbnN0IGggPSBsY2hbMl07XG5cblx0Y29uc3QgaHIgPSBoIC8gMzYwICogMiAqIE1hdGguUEk7XG5cdGNvbnN0IGEgPSBjICogTWF0aC5jb3MoaHIpO1xuXHRjb25zdCBiID0gYyAqIE1hdGguc2luKGhyKTtcblxuXHRyZXR1cm4gW2wsIGEsIGJdO1xufTtcblxuY29udmVydC5yZ2IuYW5zaTE2ID0gZnVuY3Rpb24gKGFyZ3MsIHNhdHVyYXRpb24gPSBudWxsKSB7XG5cdGNvbnN0IFtyLCBnLCBiXSA9IGFyZ3M7XG5cdGxldCB2YWx1ZSA9IHNhdHVyYXRpb24gPT09IG51bGwgPyBjb252ZXJ0LnJnYi5oc3YoYXJncylbMl0gOiBzYXR1cmF0aW9uOyAvLyBIc3YgLT4gYW5zaTE2IG9wdGltaXphdGlvblxuXG5cdHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSAvIDUwKTtcblxuXHRpZiAodmFsdWUgPT09IDApIHtcblx0XHRyZXR1cm4gMzA7XG5cdH1cblxuXHRsZXQgYW5zaSA9IDMwXG5cdFx0KyAoKE1hdGgucm91bmQoYiAvIDI1NSkgPDwgMilcblx0XHR8IChNYXRoLnJvdW5kKGcgLyAyNTUpIDw8IDEpXG5cdFx0fCBNYXRoLnJvdW5kKHIgLyAyNTUpKTtcblxuXHRpZiAodmFsdWUgPT09IDIpIHtcblx0XHRhbnNpICs9IDYwO1xuXHR9XG5cblx0cmV0dXJuIGFuc2k7XG59O1xuXG5jb252ZXJ0Lmhzdi5hbnNpMTYgPSBmdW5jdGlvbiAoYXJncykge1xuXHQvLyBPcHRpbWl6YXRpb24gaGVyZTsgd2UgYWxyZWFkeSBrbm93IHRoZSB2YWx1ZSBhbmQgZG9uJ3QgbmVlZCB0byBnZXRcblx0Ly8gaXQgY29udmVydGVkIGZvciB1cy5cblx0cmV0dXJuIGNvbnZlcnQucmdiLmFuc2kxNihjb252ZXJ0Lmhzdi5yZ2IoYXJncyksIGFyZ3NbMl0pO1xufTtcblxuY29udmVydC5yZ2IuYW5zaTI1NiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdGNvbnN0IHIgPSBhcmdzWzBdO1xuXHRjb25zdCBnID0gYXJnc1sxXTtcblx0Y29uc3QgYiA9IGFyZ3NbMl07XG5cblx0Ly8gV2UgdXNlIHRoZSBleHRlbmRlZCBncmV5c2NhbGUgcGFsZXR0ZSBoZXJlLCB3aXRoIHRoZSBleGNlcHRpb24gb2Zcblx0Ly8gYmxhY2sgYW5kIHdoaXRlLiBub3JtYWwgcGFsZXR0ZSBvbmx5IGhhcyA0IGdyZXlzY2FsZSBzaGFkZXMuXG5cdGlmIChyID09PSBnICYmIGcgPT09IGIpIHtcblx0XHRpZiAociA8IDgpIHtcblx0XHRcdHJldHVybiAxNjtcblx0XHR9XG5cblx0XHRpZiAociA+IDI0OCkge1xuXHRcdFx0cmV0dXJuIDIzMTtcblx0XHR9XG5cblx0XHRyZXR1cm4gTWF0aC5yb3VuZCgoKHIgLSA4KSAvIDI0NykgKiAyNCkgKyAyMzI7XG5cdH1cblxuXHRjb25zdCBhbnNpID0gMTZcblx0XHQrICgzNiAqIE1hdGgucm91bmQociAvIDI1NSAqIDUpKVxuXHRcdCsgKDYgKiBNYXRoLnJvdW5kKGcgLyAyNTUgKiA1KSlcblx0XHQrIE1hdGgucm91bmQoYiAvIDI1NSAqIDUpO1xuXG5cdHJldHVybiBhbnNpO1xufTtcblxuY29udmVydC5hbnNpMTYucmdiID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0bGV0IGNvbG9yID0gYXJncyAlIDEwO1xuXG5cdC8vIEhhbmRsZSBncmV5c2NhbGVcblx0aWYgKGNvbG9yID09PSAwIHx8IGNvbG9yID09PSA3KSB7XG5cdFx0aWYgKGFyZ3MgPiA1MCkge1xuXHRcdFx0Y29sb3IgKz0gMy41O1xuXHRcdH1cblxuXHRcdGNvbG9yID0gY29sb3IgLyAxMC41ICogMjU1O1xuXG5cdFx0cmV0dXJuIFtjb2xvciwgY29sb3IsIGNvbG9yXTtcblx0fVxuXG5cdGNvbnN0IG11bHQgPSAofn4oYXJncyA+IDUwKSArIDEpICogMC41O1xuXHRjb25zdCByID0gKChjb2xvciAmIDEpICogbXVsdCkgKiAyNTU7XG5cdGNvbnN0IGcgPSAoKChjb2xvciA+PiAxKSAmIDEpICogbXVsdCkgKiAyNTU7XG5cdGNvbnN0IGIgPSAoKChjb2xvciA+PiAyKSAmIDEpICogbXVsdCkgKiAyNTU7XG5cblx0cmV0dXJuIFtyLCBnLCBiXTtcbn07XG5cbmNvbnZlcnQuYW5zaTI1Ni5yZ2IgPSBmdW5jdGlvbiAoYXJncykge1xuXHQvLyBIYW5kbGUgZ3JleXNjYWxlXG5cdGlmIChhcmdzID49IDIzMikge1xuXHRcdGNvbnN0IGMgPSAoYXJncyAtIDIzMikgKiAxMCArIDg7XG5cdFx0cmV0dXJuIFtjLCBjLCBjXTtcblx0fVxuXG5cdGFyZ3MgLT0gMTY7XG5cblx0bGV0IHJlbTtcblx0Y29uc3QgciA9IE1hdGguZmxvb3IoYXJncyAvIDM2KSAvIDUgKiAyNTU7XG5cdGNvbnN0IGcgPSBNYXRoLmZsb29yKChyZW0gPSBhcmdzICUgMzYpIC8gNikgLyA1ICogMjU1O1xuXHRjb25zdCBiID0gKHJlbSAlIDYpIC8gNSAqIDI1NTtcblxuXHRyZXR1cm4gW3IsIGcsIGJdO1xufTtcblxuY29udmVydC5yZ2IuaGV4ID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0Y29uc3QgaW50ZWdlciA9ICgoTWF0aC5yb3VuZChhcmdzWzBdKSAmIDB4RkYpIDw8IDE2KVxuXHRcdCsgKChNYXRoLnJvdW5kKGFyZ3NbMV0pICYgMHhGRikgPDwgOClcblx0XHQrIChNYXRoLnJvdW5kKGFyZ3NbMl0pICYgMHhGRik7XG5cblx0Y29uc3Qgc3RyaW5nID0gaW50ZWdlci50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcblx0cmV0dXJuICcwMDAwMDAnLnN1YnN0cmluZyhzdHJpbmcubGVuZ3RoKSArIHN0cmluZztcbn07XG5cbmNvbnZlcnQuaGV4LnJnYiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdGNvbnN0IG1hdGNoID0gYXJncy50b1N0cmluZygxNikubWF0Y2goL1thLWYwLTldezZ9fFthLWYwLTldezN9L2kpO1xuXHRpZiAoIW1hdGNoKSB7XG5cdFx0cmV0dXJuIFswLCAwLCAwXTtcblx0fVxuXG5cdGxldCBjb2xvclN0cmluZyA9IG1hdGNoWzBdO1xuXG5cdGlmIChtYXRjaFswXS5sZW5ndGggPT09IDMpIHtcblx0XHRjb2xvclN0cmluZyA9IGNvbG9yU3RyaW5nLnNwbGl0KCcnKS5tYXAoY2hhciA9PiB7XG5cdFx0XHRyZXR1cm4gY2hhciArIGNoYXI7XG5cdFx0fSkuam9pbignJyk7XG5cdH1cblxuXHRjb25zdCBpbnRlZ2VyID0gcGFyc2VJbnQoY29sb3JTdHJpbmcsIDE2KTtcblx0Y29uc3QgciA9IChpbnRlZ2VyID4+IDE2KSAmIDB4RkY7XG5cdGNvbnN0IGcgPSAoaW50ZWdlciA+PiA4KSAmIDB4RkY7XG5cdGNvbnN0IGIgPSBpbnRlZ2VyICYgMHhGRjtcblxuXHRyZXR1cm4gW3IsIGcsIGJdO1xufTtcblxuY29udmVydC5yZ2IuaGNnID0gZnVuY3Rpb24gKHJnYikge1xuXHRjb25zdCByID0gcmdiWzBdIC8gMjU1O1xuXHRjb25zdCBnID0gcmdiWzFdIC8gMjU1O1xuXHRjb25zdCBiID0gcmdiWzJdIC8gMjU1O1xuXHRjb25zdCBtYXggPSBNYXRoLm1heChNYXRoLm1heChyLCBnKSwgYik7XG5cdGNvbnN0IG1pbiA9IE1hdGgubWluKE1hdGgubWluKHIsIGcpLCBiKTtcblx0Y29uc3QgY2hyb21hID0gKG1heCAtIG1pbik7XG5cdGxldCBncmF5c2NhbGU7XG5cdGxldCBodWU7XG5cblx0aWYgKGNocm9tYSA8IDEpIHtcblx0XHRncmF5c2NhbGUgPSBtaW4gLyAoMSAtIGNocm9tYSk7XG5cdH0gZWxzZSB7XG5cdFx0Z3JheXNjYWxlID0gMDtcblx0fVxuXG5cdGlmIChjaHJvbWEgPD0gMCkge1xuXHRcdGh1ZSA9IDA7XG5cdH0gZWxzZVxuXHRpZiAobWF4ID09PSByKSB7XG5cdFx0aHVlID0gKChnIC0gYikgLyBjaHJvbWEpICUgNjtcblx0fSBlbHNlXG5cdGlmIChtYXggPT09IGcpIHtcblx0XHRodWUgPSAyICsgKGIgLSByKSAvIGNocm9tYTtcblx0fSBlbHNlIHtcblx0XHRodWUgPSA0ICsgKHIgLSBnKSAvIGNocm9tYTtcblx0fVxuXG5cdGh1ZSAvPSA2O1xuXHRodWUgJT0gMTtcblxuXHRyZXR1cm4gW2h1ZSAqIDM2MCwgY2hyb21hICogMTAwLCBncmF5c2NhbGUgKiAxMDBdO1xufTtcblxuY29udmVydC5oc2wuaGNnID0gZnVuY3Rpb24gKGhzbCkge1xuXHRjb25zdCBzID0gaHNsWzFdIC8gMTAwO1xuXHRjb25zdCBsID0gaHNsWzJdIC8gMTAwO1xuXG5cdGNvbnN0IGMgPSBsIDwgMC41ID8gKDIuMCAqIHMgKiBsKSA6ICgyLjAgKiBzICogKDEuMCAtIGwpKTtcblxuXHRsZXQgZiA9IDA7XG5cdGlmIChjIDwgMS4wKSB7XG5cdFx0ZiA9IChsIC0gMC41ICogYykgLyAoMS4wIC0gYyk7XG5cdH1cblxuXHRyZXR1cm4gW2hzbFswXSwgYyAqIDEwMCwgZiAqIDEwMF07XG59O1xuXG5jb252ZXJ0Lmhzdi5oY2cgPSBmdW5jdGlvbiAoaHN2KSB7XG5cdGNvbnN0IHMgPSBoc3ZbMV0gLyAxMDA7XG5cdGNvbnN0IHYgPSBoc3ZbMl0gLyAxMDA7XG5cblx0Y29uc3QgYyA9IHMgKiB2O1xuXHRsZXQgZiA9IDA7XG5cblx0aWYgKGMgPCAxLjApIHtcblx0XHRmID0gKHYgLSBjKSAvICgxIC0gYyk7XG5cdH1cblxuXHRyZXR1cm4gW2hzdlswXSwgYyAqIDEwMCwgZiAqIDEwMF07XG59O1xuXG5jb252ZXJ0LmhjZy5yZ2IgPSBmdW5jdGlvbiAoaGNnKSB7XG5cdGNvbnN0IGggPSBoY2dbMF0gLyAzNjA7XG5cdGNvbnN0IGMgPSBoY2dbMV0gLyAxMDA7XG5cdGNvbnN0IGcgPSBoY2dbMl0gLyAxMDA7XG5cblx0aWYgKGMgPT09IDAuMCkge1xuXHRcdHJldHVybiBbZyAqIDI1NSwgZyAqIDI1NSwgZyAqIDI1NV07XG5cdH1cblxuXHRjb25zdCBwdXJlID0gWzAsIDAsIDBdO1xuXHRjb25zdCBoaSA9IChoICUgMSkgKiA2O1xuXHRjb25zdCB2ID0gaGkgJSAxO1xuXHRjb25zdCB3ID0gMSAtIHY7XG5cdGxldCBtZyA9IDA7XG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LXN0YXRlbWVudHMtcGVyLWxpbmUgKi9cblx0c3dpdGNoIChNYXRoLmZsb29yKGhpKSkge1xuXHRcdGNhc2UgMDpcblx0XHRcdHB1cmVbMF0gPSAxOyBwdXJlWzFdID0gdjsgcHVyZVsyXSA9IDA7IGJyZWFrO1xuXHRcdGNhc2UgMTpcblx0XHRcdHB1cmVbMF0gPSB3OyBwdXJlWzFdID0gMTsgcHVyZVsyXSA9IDA7IGJyZWFrO1xuXHRcdGNhc2UgMjpcblx0XHRcdHB1cmVbMF0gPSAwOyBwdXJlWzFdID0gMTsgcHVyZVsyXSA9IHY7IGJyZWFrO1xuXHRcdGNhc2UgMzpcblx0XHRcdHB1cmVbMF0gPSAwOyBwdXJlWzFdID0gdzsgcHVyZVsyXSA9IDE7IGJyZWFrO1xuXHRcdGNhc2UgNDpcblx0XHRcdHB1cmVbMF0gPSB2OyBwdXJlWzFdID0gMDsgcHVyZVsyXSA9IDE7IGJyZWFrO1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRwdXJlWzBdID0gMTsgcHVyZVsxXSA9IDA7IHB1cmVbMl0gPSB3O1xuXHR9XG5cdC8qIGVzbGludC1lbmFibGUgbWF4LXN0YXRlbWVudHMtcGVyLWxpbmUgKi9cblxuXHRtZyA9ICgxLjAgLSBjKSAqIGc7XG5cblx0cmV0dXJuIFtcblx0XHQoYyAqIHB1cmVbMF0gKyBtZykgKiAyNTUsXG5cdFx0KGMgKiBwdXJlWzFdICsgbWcpICogMjU1LFxuXHRcdChjICogcHVyZVsyXSArIG1nKSAqIDI1NVxuXHRdO1xufTtcblxuY29udmVydC5oY2cuaHN2ID0gZnVuY3Rpb24gKGhjZykge1xuXHRjb25zdCBjID0gaGNnWzFdIC8gMTAwO1xuXHRjb25zdCBnID0gaGNnWzJdIC8gMTAwO1xuXG5cdGNvbnN0IHYgPSBjICsgZyAqICgxLjAgLSBjKTtcblx0bGV0IGYgPSAwO1xuXG5cdGlmICh2ID4gMC4wKSB7XG5cdFx0ZiA9IGMgLyB2O1xuXHR9XG5cblx0cmV0dXJuIFtoY2dbMF0sIGYgKiAxMDAsIHYgKiAxMDBdO1xufTtcblxuY29udmVydC5oY2cuaHNsID0gZnVuY3Rpb24gKGhjZykge1xuXHRjb25zdCBjID0gaGNnWzFdIC8gMTAwO1xuXHRjb25zdCBnID0gaGNnWzJdIC8gMTAwO1xuXG5cdGNvbnN0IGwgPSBnICogKDEuMCAtIGMpICsgMC41ICogYztcblx0bGV0IHMgPSAwO1xuXG5cdGlmIChsID4gMC4wICYmIGwgPCAwLjUpIHtcblx0XHRzID0gYyAvICgyICogbCk7XG5cdH0gZWxzZVxuXHRpZiAobCA+PSAwLjUgJiYgbCA8IDEuMCkge1xuXHRcdHMgPSBjIC8gKDIgKiAoMSAtIGwpKTtcblx0fVxuXG5cdHJldHVybiBbaGNnWzBdLCBzICogMTAwLCBsICogMTAwXTtcbn07XG5cbmNvbnZlcnQuaGNnLmh3YiA9IGZ1bmN0aW9uIChoY2cpIHtcblx0Y29uc3QgYyA9IGhjZ1sxXSAvIDEwMDtcblx0Y29uc3QgZyA9IGhjZ1syXSAvIDEwMDtcblx0Y29uc3QgdiA9IGMgKyBnICogKDEuMCAtIGMpO1xuXHRyZXR1cm4gW2hjZ1swXSwgKHYgLSBjKSAqIDEwMCwgKDEgLSB2KSAqIDEwMF07XG59O1xuXG5jb252ZXJ0Lmh3Yi5oY2cgPSBmdW5jdGlvbiAoaHdiKSB7XG5cdGNvbnN0IHcgPSBod2JbMV0gLyAxMDA7XG5cdGNvbnN0IGIgPSBod2JbMl0gLyAxMDA7XG5cdGNvbnN0IHYgPSAxIC0gYjtcblx0Y29uc3QgYyA9IHYgLSB3O1xuXHRsZXQgZyA9IDA7XG5cblx0aWYgKGMgPCAxKSB7XG5cdFx0ZyA9ICh2IC0gYykgLyAoMSAtIGMpO1xuXHR9XG5cblx0cmV0dXJuIFtod2JbMF0sIGMgKiAxMDAsIGcgKiAxMDBdO1xufTtcblxuY29udmVydC5hcHBsZS5yZ2IgPSBmdW5jdGlvbiAoYXBwbGUpIHtcblx0cmV0dXJuIFsoYXBwbGVbMF0gLyA2NTUzNSkgKiAyNTUsIChhcHBsZVsxXSAvIDY1NTM1KSAqIDI1NSwgKGFwcGxlWzJdIC8gNjU1MzUpICogMjU1XTtcbn07XG5cbmNvbnZlcnQucmdiLmFwcGxlID0gZnVuY3Rpb24gKHJnYikge1xuXHRyZXR1cm4gWyhyZ2JbMF0gLyAyNTUpICogNjU1MzUsIChyZ2JbMV0gLyAyNTUpICogNjU1MzUsIChyZ2JbMl0gLyAyNTUpICogNjU1MzVdO1xufTtcblxuY29udmVydC5ncmF5LnJnYiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdHJldHVybiBbYXJnc1swXSAvIDEwMCAqIDI1NSwgYXJnc1swXSAvIDEwMCAqIDI1NSwgYXJnc1swXSAvIDEwMCAqIDI1NV07XG59O1xuXG5jb252ZXJ0LmdyYXkuaHNsID0gZnVuY3Rpb24gKGFyZ3MpIHtcblx0cmV0dXJuIFswLCAwLCBhcmdzWzBdXTtcbn07XG5cbmNvbnZlcnQuZ3JheS5oc3YgPSBjb252ZXJ0LmdyYXkuaHNsO1xuXG5jb252ZXJ0LmdyYXkuaHdiID0gZnVuY3Rpb24gKGdyYXkpIHtcblx0cmV0dXJuIFswLCAxMDAsIGdyYXlbMF1dO1xufTtcblxuY29udmVydC5ncmF5LmNteWsgPSBmdW5jdGlvbiAoZ3JheSkge1xuXHRyZXR1cm4gWzAsIDAsIDAsIGdyYXlbMF1dO1xufTtcblxuY29udmVydC5ncmF5LmxhYiA9IGZ1bmN0aW9uIChncmF5KSB7XG5cdHJldHVybiBbZ3JheVswXSwgMCwgMF07XG59O1xuXG5jb252ZXJ0LmdyYXkuaGV4ID0gZnVuY3Rpb24gKGdyYXkpIHtcblx0Y29uc3QgdmFsID0gTWF0aC5yb3VuZChncmF5WzBdIC8gMTAwICogMjU1KSAmIDB4RkY7XG5cdGNvbnN0IGludGVnZXIgPSAodmFsIDw8IDE2KSArICh2YWwgPDwgOCkgKyB2YWw7XG5cblx0Y29uc3Qgc3RyaW5nID0gaW50ZWdlci50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcblx0cmV0dXJuICcwMDAwMDAnLnN1YnN0cmluZyhzdHJpbmcubGVuZ3RoKSArIHN0cmluZztcbn07XG5cbmNvbnZlcnQucmdiLmdyYXkgPSBmdW5jdGlvbiAocmdiKSB7XG5cdGNvbnN0IHZhbCA9IChyZ2JbMF0gKyByZ2JbMV0gKyByZ2JbMl0pIC8gMztcblx0cmV0dXJuIFt2YWwgLyAyNTUgKiAxMDBdO1xufTtcbiIsImltcG9ydCBcIi4vanMvY29sb3VyZm9ybS5qc1wiO1xuaW1wb3J0IFwiLi9jc3MvY29sb3VyZm9ybS5jc3NcIjtcbiIsImNvbnN0IHJlbmRlciA9IHJlcXVpcmUoXCIuL3JlbmRlclwiKTtcblxuLy8gbm8gY2hlYXRpbmcgb24geW91ciBmb3JtdWxhcyFcbmZldGNoID0gbnVsbDtcblhNTEh0dHBSZXF1ZXN0ID0gbnVsbDtcblxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgcXMgPSBzID0+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iocyk7XG4gIGNvbnN0IHJlbmRlckFyZWEgPSBxcyhcIi5yZW5kZXJcIik7XG4gIGxldCBpbWFnZVNpemUsIGNvbG91ck1vZGU7XG5cbiAgZnVuY3Rpb24gZ2V0Q2xlYW5lZEZuKGZpZWxkKSB7XG4gICAgbGV0IHZhbHVlID0gcXMoYFtuYW1lPSR7ZmllbGR9XWApLnZhbHVlO1xuICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXFxuL2csIFwiXCIpLnRyaW0oKTtcbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoLzskLywgXCJcIik7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U2NhbGUoZmllbGQpIHtcbiAgICByZXR1cm4gcXMoXCJbbmFtZT1cIiArIGZpZWxkICsgXCJTY2FsZV06Y2hlY2tlZFwiKS52YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldExpbWl0KGZpZWxkKSB7XG4gICAgcmV0dXJuIHFzKFwiW25hbWU9XCIgKyBmaWVsZCArIFwiTGltaXRdOmNoZWNrZWRcIikudmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBvcHQoZmllbGQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZmllbGQsXG4gICAgICBmbjogZ2V0Q2xlYW5lZEZuKGZpZWxkKSxcbiAgICAgIHNjYWxlOiBnZXRTY2FsZShmaWVsZCksXG4gICAgICBsaW1pdDogZ2V0TGltaXQoZmllbGQpXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldENvbG91ck1vZGUoKSB7XG4gICAgY29sb3VyTW9kZSA9IHFzKFwiI2NvbG91ck1vZGVcIikuY2hlY2tlZCA/IFwiaHN2XCIgOiBcInJnYlwiO1xuICAgIHFzKFwiI21vZGVsXCIpLmNsYXNzTmFtZSA9IGNvbG91ck1vZGU7XG4gICAgaWYgKGNvbG91ck1vZGUgPT09IFwiaHN2XCIpIHtcbiAgICAgIHFzKFwibGFiZWxbZm9yPWNvbG91ck1vZGVdXCIpLnRpdGxlID0gXCJIdWUsIFNhdHVyYXRpb24sIFZhbHVlXCI7XG4gICAgICBxcyhcImxhYmVsW2Zvcj1maXJzdF1cIikuaW5uZXJIVE1MID0gXCJIdWVcIjtcbiAgICAgIHFzKFwibGFiZWxbZm9yPWZpcnN0XVwiKS50aXRsZSA9IFwiSHVlIGZvcm11bGEgKDAgLSAzNjApXCI7XG4gICAgICBxcyhcImxhYmVsW2Zvcj1zZWNvbmRdXCIpLmlubmVySFRNTCA9IFwiU2F0dXJhdGlvblwiO1xuICAgICAgcXMoXCJsYWJlbFtmb3I9c2Vjb25kXVwiKS50aXRsZSA9IFwiU2F0dXJhdGlvbiBmb3JtdWxhICgwIC0gMTAwKVwiO1xuICAgICAgcXMoXCJsYWJlbFtmb3I9dGhpcmRdXCIpLmlubmVySFRNTCA9IFwiVmFsdWVcIjtcbiAgICAgIHFzKFwibGFiZWxbZm9yPXRoaXJkXVwiKS50aXRsZSA9IFwiVmFsdWUgZm9ybXVsYSAoMCAtIDEwMClcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcXMoXCJsYWJlbFtmb3I9Y29sb3VyTW9kZV1cIikudGl0bGUgPSBcIlJlZCwgR3JlZW4sIEJsdWVcIjtcbiAgICAgIHFzKFwibGFiZWxbZm9yPWZpcnN0XVwiKS5pbm5lckhUTUwgPSBcIlJlZFwiO1xuICAgICAgcXMoXCJsYWJlbFtmb3I9Zmlyc3RdXCIpLnRpdGxlID0gXCJSZWQgZm9ybXVsYSAoMCAtIDI1NSlcIjtcbiAgICAgIHFzKFwibGFiZWxbZm9yPXNlY29uZF1cIikuaW5uZXJIVE1MID0gXCJHcmVlblwiO1xuICAgICAgcXMoXCJsYWJlbFtmb3I9c2Vjb25kXVwiKS50aXRsZSA9IFwiR3JlZW4gZm9ybXVsYSAoMCAtIDI1NSlcIjtcbiAgICAgIHFzKFwibGFiZWxbZm9yPXRoaXJkXVwiKS5pbm5lckhUTUwgPSBcIkJsdWVcIjtcbiAgICAgIHFzKFwibGFiZWxbZm9yPXRoaXJkXVwiKS50aXRsZSA9IFwiQmx1ZSBmb3JtdWxhICgwIC0gMjU1KVwiO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEltYWdlU2l6ZSgpIHtcbiAgICBpbWFnZVNpemUgPSBxcyhcIltuYW1lPWltYWdlU2l6ZV1cIikuY2hlY2tlZCA/IFwiYmlnXCIgOiBcInNtYWxsXCI7XG4gICAgaWYgKGltYWdlU2l6ZSA9PT0gXCJiaWdcIikge1xuICAgICAgcXMoXCJsYWJlbFtmb3I9aW1hZ2VTaXplXVwiKS50aXRsZSA9IFwiQmlnICgxNDAwIHggMTQwMClcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcXMoXCJsYWJlbFtmb3I9aW1hZ2VTaXplXVwiKS50aXRsZSA9IFwiU21hbGwgKDUxMiB4IDUxMilcIjtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRHZW5lcmF0ZWQoZmxhZykge1xuICAgIHFzKFwiYm9keVwiKS5jbGFzc05hbWUgPSBmbGFnID8gXCJnZW5lcmF0ZWRcIiA6IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRFbmFibGVkKGZpZWxkLCBkaXNhYmxlZCkge1xuICAgIGNvbnN0IGZpZWxkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYFtuYW1lPSR7ZmllbGR9XWApO1xuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBmaWVsZHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBmaWVsZHNbaW5kZXhdLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0RmFpbHVyZXMoZmFpbHVyZXMpIHtcbiAgICBbXCJmaXJzdFwiLCBcInNlY29uZFwiLCBcInRoaXJkXCJdLmZvckVhY2goZiA9PiB7XG4gICAgICBxcyhgIyR7Zn1gKS5jbGFzc05hbWUgPSBmYWlsdXJlc1tmXSA/IFwiaW52YWxpZFwiIDogXCJcIjtcbiAgICAgIHFzKGBzcGFuW2Zvcj0ke2Z9XS5lcnJvcmApLmlubmVySFRNTCA9IGZhaWx1cmVzW2ZdIHx8IFwiXCI7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBydW5SZW5kZXIoKSB7XG4gICAgcmVuZGVyKFxuICAgICAgb3B0KFwiZmlyc3RcIiksXG4gICAgICBvcHQoXCJzZWNvbmRcIiksXG4gICAgICBvcHQoXCJ0aGlyZFwiKSxcbiAgICAgIGNvbG91ck1vZGUsXG4gICAgICBpbWFnZVNpemUsXG4gICAgICAoZmFpbHVyZXMsIGltZykgPT4ge1xuICAgICAgICBzZXRGYWlsdXJlcyhmYWlsdXJlcyB8fCB7fSk7XG4gICAgICAgIHFzKFwiI3J1blwiKS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoZmFpbHVyZXMpIHtcbiAgICAgICAgICBzZXRHZW5lcmF0ZWQoZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGltZy5vbmNsaWNrID0gKCkgPT4gc2V0R2VuZXJhdGVkKGZhbHNlKTtcbiAgICAgICAgICByZW5kZXJBcmVhLmFwcGVuZENoaWxkKGltZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgcXMoXCIjcnVuXCIpLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0R2VuZXJhdGVkKHRydWUpO1xuICAgIHFzKFwiI3J1blwiKS5kaXNhYmxlZCA9IHRydWU7XG4gICAgaWYgKHJlbmRlckFyZWEuZmlyc3RDaGlsZCkge1xuICAgICAgcmVuZGVyQXJlYS5yZW1vdmVDaGlsZChyZW5kZXJBcmVhLmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICAvLyBhcmJpdHJhcnkgdGltZW91dCB0byBsZXQgdGhlIFVJIHVwZGF0ZVxuICAgIHNldFRpbWVvdXQocnVuUmVuZGVyLCAxMDApO1xuICB9O1xuXG4gIHFzKFwiI3NodWZmbGVcIikub25jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBwb3NpdGlvbnMgPSBbXCJmaXJzdFwiLCBcInNlY29uZFwiLCBcInRoaXJkXCJdO1xuICAgIHBvc2l0aW9uc1xuICAgICAgLm1hcChmaWVsZCA9PiAoe1xuICAgICAgICB2OiBxcyhgW25hbWU9JHtmaWVsZH1dYCkudmFsdWUsXG4gICAgICAgIHI6IE1hdGgucmFuZG9tKClcbiAgICAgIH0pKVxuICAgICAgLnNvcnQoKGEsIGIpID0+IGEuciAtIGIucilcbiAgICAgIC5mb3JFYWNoKCh7IHYgfSwgaSkgPT4ge1xuICAgICAgICBxcyhgW25hbWU9JHtwb3NpdGlvbnNbaV19XWApLnZhbHVlID0gdjtcbiAgICAgIH0pO1xuICB9O1xuXG4gIHFzKFwiI2NvbG91ck1vZGVcIikub25jbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgc2V0Q29sb3VyTW9kZShlLnRhcmdldC5jaGVja2VkKTtcbiAgfTtcblxuICBxcyhcIiNpbWFnZVNpemVcIikub25jbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgc2V0SW1hZ2VTaXplKGUudGFyZ2V0LmNoZWNrZWQpO1xuICB9O1xuXG4gIHFzKFwiI21vZGVsXCIpLm9uY2hhbmdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZS50YXJnZXQubmFtZSA9PT0gXCJmaXJzdFNjYWxlXCIpIHtcbiAgICAgIHNldEVuYWJsZWQoXCJmaXJzdExpbWl0XCIsIGUudGFyZ2V0LnZhbHVlID09PSBcIm1pbk1heFwiKTtcbiAgICB9IGVsc2UgaWYgKGUudGFyZ2V0Lm5hbWUgPT09IFwic2Vjb25kU2NhbGVcIikge1xuICAgICAgc2V0RW5hYmxlZChcInNlY29uZExpbWl0XCIsIGUudGFyZ2V0LnZhbHVlID09PSBcIm1pbk1heFwiKTtcbiAgICB9IGVsc2UgaWYgKGUudGFyZ2V0Lm5hbWUgPT09IFwidGhpcmRTY2FsZVwiKSB7XG4gICAgICBzZXRFbmFibGVkKFwidGhpcmRMaW1pdFwiLCBlLnRhcmdldC52YWx1ZSA9PT0gXCJtaW5NYXhcIik7XG4gICAgfVxuICB9O1xuXG4gIHFzKFwiI21vZGVsXCIpLmNsYXNzTmFtZSA9IGNvbG91ck1vZGU7XG4gIHNldEVuYWJsZWQoXCJmaXJzdExpbWl0XCIsIHFzKFwiI2ZpcnN0TWluTWF4XCIpLmNoZWNrZWQpO1xuICBzZXRFbmFibGVkKFwic2Vjb25kTGltaXRcIiwgcXMoXCIjc2Vjb25kTWluTWF4XCIpLmNoZWNrZWQpO1xuICBzZXRFbmFibGVkKFwidGhpcmRMaW1pdFwiLCBxcyhcIiN0aGlyZE1pbk1heFwiKS5jaGVja2VkKTtcbiAgc2V0Q29sb3VyTW9kZSgpO1xuICBzZXRJbWFnZVNpemUoKTtcbn07XG4iLCJjb25zdCBjYW52YXMgPSByZXF1aXJlKFwiLi9jYW52YXNcIik7XG5jb25zdCBjb252ZXJ0ID0gcmVxdWlyZShcImNvbG9yLWNvbnZlcnRcIik7XG5jb25zdCBwaTIgPSAyICogTWF0aC5QSTtcbmNvbnN0IHNpemVzID0ge1xuICBiaWc6IDE0MDAsXG4gIHNtYWxsOiA1MTJcbn07XG5jb25zdCBsaW1pdHMgPSB7XG4gIGhzdjogWzM2MCwgMTAwLCAxMDBdLFxuICByZ2I6IFsyNTUsIDI1NSwgMjU1XVxufTtcblxuZnVuY3Rpb24gYXNGbihzdHIpIHtcbiAgcmV0dXJuIG5ldyBGdW5jdGlvbihcbiAgICBcInhcIixcbiAgICBcInlcIixcbiAgICBcInBpMlwiLFxuICAgIGBcbnRyeSB7XG4gIHJldHVybiAoJHtzdHJ9KTtcbn0gY2F0Y2ggKGUpIHtcbiAgcmV0dXJuIDA7XG59YFxuICApO1xufVxuXG5mdW5jdGlvbiB0ZXN0Rm4oc3RyKSB7XG4gIGNvbnN0IGZuID0gbmV3IEZ1bmN0aW9uKFwieFwiLCBcInlcIiwgXCJwaTJcIiwgYHJldHVybiAoJHtzdHJ9KWApO1xuICBmbigwLCAwLCBwaTIpO1xufVxuXG5mdW5jdGlvbiBsaW1pdCh2YWwsIG1heCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgoMCwgdmFsKSwgbWF4KTtcbn1cblxuZnVuY3Rpb24gd3JhcCh2YWwsIG1heCkge1xuICBpZiAodmFsIDwgMCkge1xuICAgIHdoaWxlICh2YWwgPCAwKSB7XG4gICAgICB2YWwgKz0gbWF4O1xuICAgIH1cbiAgfSBlbHNlIGlmICh2YWwgPiBtYXgpIHtcbiAgICB3aGlsZSAodmFsID4gbWF4KSB7XG4gICAgICB2YWwgLT0gbWF4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiByZWZsZWN0KHZhbCwgbWF4KSB7XG4gIHdoaWxlICh2YWwgPCAwIHx8IHZhbCA+IG1heCkge1xuICAgIGlmICh2YWwgPCAwKSB7XG4gICAgICB2YWwgPSAtdmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWwgPSAyICogbWF4IC0gdmFsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBhc0xpbWl0KGxpbWl0T3B0KSB7XG4gIGlmIChsaW1pdE9wdCA9PT0gXCJ3cmFwXCIpIHtcbiAgICByZXR1cm4gKHZhbCwgbWF4KSA9PiBsaW1pdCh3cmFwKHZhbCwgbWF4KSwgbWF4KTtcbiAgfVxuICBpZiAobGltaXRPcHQgPT09IFwicmVmbGVjdFwiKSB7XG4gICAgcmV0dXJuICh2YWwsIG1heCkgPT4gbGltaXQocmVmbGVjdCh2YWwsIG1heCksIG1heCk7XG4gIH1cbiAgcmV0dXJuIGxpbWl0O1xufVxuXG5mdW5jdGlvbiBhc1NjYWxlKHNjYWxlT3B0KSB7XG4gIGlmIChzY2FsZU9wdCA9PT0gXCJtaW51c1BsdXNPbmVcIikge1xuICAgIHJldHVybiAodmFsLCBtYXgpID0+ICgodmFsICsgMSkgLyAyKSAqIG1heDtcbiAgfVxuICBpZiAoc2NhbGVPcHQgPT09IFwiemVyb09uZVwiKSB7XG4gICAgcmV0dXJuICh2YWwsIG1heCkgPT4gdmFsICogbWF4O1xuICB9XG4gIGlmIChzY2FsZU9wdCA9PT0gXCJtaW5NYXhcIikge1xuICAgIHJldHVybiAodmFsLCBtYXgsIGxvdywgaGlnaCkgPT4gKG1heCAqICh2YWwgLSBsb3cpKSAvIChoaWdoIC0gbG93KTtcbiAgfVxuICByZXR1cm4gdmFsID0+IHZhbDtcbn1cblxuZnVuY3Rpb24gcmVuZGVyKGZpcnN0T3B0LCBzZWNvbmRPcHQsIHRoaXJkT3B0LCBjb2xvdXJNb2RlLCBpbWdTaXplLCBjYWxsYmFjaykge1xuICBsZXQgZmlyc3RGbiwgc2Vjb25kRm4sIHRoaXJkRm47XG4gIGxldCBmaXJzdFNjYWxlLCBzZWNvbmRTY2FsLCB0aGlyZFNjYWxlO1xuICBsZXQgZmlyc3RMaW1pdCwgc2Vjb25kTGltaXQsIHRoaXJkTGltaXQ7XG4gIGxldCBmYWlsdXJlcyA9IG51bGw7XG4gIGNvbnN0IHNpemUgPSBzaXplc1tpbWdTaXplXTtcbiAgY29uc3QgaW1nQ2FudmFzID0gY2FudmFzKHNpemUpO1xuXG4gIHRyeSB7XG4gICAgdGVzdEZuKGZpcnN0T3B0LmZuKTtcbiAgICBmaXJzdEZuID0gYXNGbihmaXJzdE9wdC5mbik7XG4gICAgZmlyc3RTY2FsZSA9IGFzU2NhbGUoZmlyc3RPcHQuc2NhbGUpO1xuICAgIGZpcnN0TGltaXQgPSBhc0xpbWl0KGZpcnN0T3B0LmxpbWl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgZmFpbHVyZXMgPSB7IFtmaXJzdE9wdC5maWVsZF06IGUgfTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgdGVzdEZuKHNlY29uZE9wdC5mbik7XG4gICAgc2Vjb25kRm4gPSBhc0ZuKHNlY29uZE9wdC5mbik7XG4gICAgc2Vjb25kU2NhbGUgPSBhc1NjYWxlKHNlY29uZE9wdC5zY2FsZSk7XG4gICAgc2Vjb25kTGltaXQgPSBhc0xpbWl0KHNlY29uZE9wdC5saW1pdCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIGZhaWx1cmVzID0geyBbc2Vjb25kT3B0LmZpZWxkXTogZSwgLi4uZmFpbHVyZXMgfTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgdGVzdEZuKHRoaXJkT3B0LmZuKTtcbiAgICB0aGlyZEZuID0gYXNGbih0aGlyZE9wdC5mbik7XG4gICAgdGhpcmRTY2FsZSA9IGFzU2NhbGUodGhpcmRPcHQuc2NhbGUpO1xuICAgIHRoaXJkTGltaXQgPSBhc0xpbWl0KHRoaXJkT3B0LmxpbWl0KTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgZmFpbHVyZXMgPSB7IFt0aGlyZE9wdC5maWVsZF06IGUsIC4uLmZhaWx1cmVzIH07XG4gIH1cblxuICBpZiAoZmFpbHVyZXMpIHtcbiAgICBjYWxsYmFjayhmYWlsdXJlcyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgdmFsdWVzID0gbmV3IEFycmF5KHNpemUpO1xuICBsZXQgZmlyc3RNaW4gPSBJbmZpbml0eTtcbiAgbGV0IGZpcnN0TWF4ID0gLUluZmluaXR5O1xuICBsZXQgc2Vjb25kTWluID0gSW5maW5pdHk7XG4gIGxldCBzZWNvbmRNYXggPSAtSW5maW5pdHk7XG4gIGxldCB0aGlyZE1pbiA9IEluZmluaXR5O1xuICBsZXQgdGhpcmRNYXggPSAtSW5maW5pdHk7XG5cbiAgZm9yIChsZXQgeCA9IDA7IHggPCBzaXplOyB4KyspIHtcbiAgICB2YWx1ZXNbeF0gPSBuZXcgQXJyYXkoc2l6ZSk7XG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBzaXplOyB5KyspIHtcbiAgICAgIGNvbnN0IHhyID0geCAvIChzaXplIC0gMSk7XG4gICAgICBjb25zdCB5ciA9IHkgLyAoc2l6ZSAtIDEpO1xuICAgICAgY29uc3QgZmlyc3QgPSBmaXJzdEZuKHhyLCB5ciwgcGkyKTtcbiAgICAgIGNvbnN0IHNlY29uZCA9IHNlY29uZEZuKHhyLCB5ciwgcGkyKTtcbiAgICAgIGNvbnN0IHRoaXJkID0gdGhpcmRGbih4ciwgeXIsIHBpMik7XG5cbiAgICAgIHZhbHVlc1t4XVt5XSA9IFtmaXJzdCwgc2Vjb25kLCB0aGlyZF07XG4gICAgICBmaXJzdE1pbiA9IE1hdGgubWluKGZpcnN0LCBmaXJzdE1pbik7XG4gICAgICBmaXJzdE1heCA9IE1hdGgubWF4KGZpcnN0LCBmaXJzdE1heCk7XG4gICAgICBzZWNvbmRNaW4gPSBNYXRoLm1pbihzZWNvbmQsIHNlY29uZE1pbik7XG4gICAgICBzZWNvbmRNYXggPSBNYXRoLm1heChzZWNvbmQsIHNlY29uZE1heCk7XG4gICAgICB0aGlyZE1pbiA9IE1hdGgubWluKHRoaXJkLCB0aGlyZE1pbik7XG4gICAgICB0aGlyZE1heCA9IE1hdGgubWF4KHRoaXJkLCB0aGlyZE1heCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGZpcnN0TWluID09PSBmaXJzdE1heCkge1xuICAgIGZpcnN0TWluID0gMDtcbiAgfVxuICBpZiAoc2Vjb25kTWluID09PSBzZWNvbmRNYXgpIHtcbiAgICBzZWNvbmRNaW4gPSAwO1xuICB9XG4gIGlmICh0aGlyZE1pbiA9PT0gdGhpcmRNYXgpIHtcbiAgICB0aGlyZE1pbiA9IDA7XG4gIH1cblxuICBsZXQgW2wxLCBsMiwgbDNdID0gbGltaXRzW2NvbG91ck1vZGVdO1xuICBmb3IgKGxldCB4ID0gMDsgeCA8IHNpemU7IHgrKykge1xuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgc2l6ZTsgeSsrKSB7XG4gICAgICBsZXQgW2ZpcnN0LCBzZWNvbmQsIHRoaXJkXSA9IHZhbHVlc1t4XVt5XTtcbiAgICAgIGZpcnN0ID0gZmlyc3RMaW1pdChmaXJzdFNjYWxlKGZpcnN0LCBsMSwgZmlyc3RNaW4sIGZpcnN0TWF4KSwgbDEpO1xuICAgICAgc2Vjb25kID0gc2Vjb25kTGltaXQoc2Vjb25kU2NhbGUoc2Vjb25kLCBsMiwgc2Vjb25kTWluLCBzZWNvbmRNYXgpLCBsMik7XG4gICAgICB0aGlyZCA9IHRoaXJkTGltaXQodGhpcmRTY2FsZSh0aGlyZCwgbDMsIHRoaXJkTWluLCB0aGlyZE1heCksIGwzKTtcblxuICAgICAgY29uc3QgW3IsIGcsIGJdID1cbiAgICAgICAgY29sb3VyTW9kZSA9PT0gXCJoc3ZcIlxuICAgICAgICAgID8gY29udmVydC5oc3YucmdiLnJhdyhmaXJzdCwgc2Vjb25kLCB0aGlyZClcbiAgICAgICAgICA6IFtmaXJzdCwgc2Vjb25kLCB0aGlyZF07XG4gICAgICBpbWdDYW52YXMuZHJhd1BpeGVsKHgsIHksIHIsIGcsIGIpO1xuICAgIH1cbiAgfVxuXG4gIGNhbGxiYWNrKG51bGwsIGltZ0NhbnZhcy5idWlsZEltYWdlKCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbmRlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpO1xuICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuICBjYW52YXMud2lkdGggPSBzaXplO1xuICBjYW52YXMuaGVpZ2h0ID0gc2l6ZTtcbiAgYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xuXG4gIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICBjb25zdCBjYW52YXNEYXRhID0gY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgc2l6ZSwgc2l6ZSk7XG5cbiAgZnVuY3Rpb24gZHJhd1BpeGVsKHgsIHksIHIsIGcsIGIpIHtcbiAgICBjb25zdCBpbmRleCA9ICh4ICsgeSAqIHNpemUpICogNDtcbiAgICBjYW52YXNEYXRhLmRhdGFbaW5kZXggKyAwXSA9IHI7XG4gICAgY2FudmFzRGF0YS5kYXRhW2luZGV4ICsgMV0gPSBnO1xuICAgIGNhbnZhc0RhdGEuZGF0YVtpbmRleCArIDJdID0gYjtcbiAgICBjYW52YXNEYXRhLmRhdGFbaW5kZXggKyAzXSA9IDI1NTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkSW1hZ2UoKSB7XG4gICAgY29udGV4dC5wdXRJbWFnZURhdGEoY2FudmFzRGF0YSwgMCwgMCk7XG4gICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgaW1nLnNyYyA9IGNhbnZhcy50b0RhdGFVUkwoKTtcbiAgICBib2R5LnJlbW92ZUNoaWxkKGNhbnZhcyk7XG4gICAgcmV0dXJuIGltZztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZHJhd1BpeGVsLFxuICAgIGJ1aWxkSW1hZ2VcbiAgfTtcbn07XG4iLCJjb25zdCBjb252ZXJzaW9ucyA9IHJlcXVpcmUoJy4vY29udmVyc2lvbnMnKTtcbmNvbnN0IHJvdXRlID0gcmVxdWlyZSgnLi9yb3V0ZScpO1xuXG5jb25zdCBjb252ZXJ0ID0ge307XG5cbmNvbnN0IG1vZGVscyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zKTtcblxuZnVuY3Rpb24gd3JhcFJhdyhmbikge1xuXHRjb25zdCB3cmFwcGVkRm4gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuXHRcdGNvbnN0IGFyZzAgPSBhcmdzWzBdO1xuXHRcdGlmIChhcmcwID09PSB1bmRlZmluZWQgfHwgYXJnMCA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIGFyZzA7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZzAubGVuZ3RoID4gMSkge1xuXHRcdFx0YXJncyA9IGFyZzA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZuKGFyZ3MpO1xuXHR9O1xuXG5cdC8vIFByZXNlcnZlIC5jb252ZXJzaW9uIHByb3BlcnR5IGlmIHRoZXJlIGlzIG9uZVxuXHRpZiAoJ2NvbnZlcnNpb24nIGluIGZuKSB7XG5cdFx0d3JhcHBlZEZuLmNvbnZlcnNpb24gPSBmbi5jb252ZXJzaW9uO1xuXHR9XG5cblx0cmV0dXJuIHdyYXBwZWRGbjtcbn1cblxuZnVuY3Rpb24gd3JhcFJvdW5kZWQoZm4pIHtcblx0Y29uc3Qgd3JhcHBlZEZuID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcblx0XHRjb25zdCBhcmcwID0gYXJnc1swXTtcblxuXHRcdGlmIChhcmcwID09PSB1bmRlZmluZWQgfHwgYXJnMCA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIGFyZzA7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZzAubGVuZ3RoID4gMSkge1xuXHRcdFx0YXJncyA9IGFyZzA7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmVzdWx0ID0gZm4oYXJncyk7XG5cblx0XHQvLyBXZSdyZSBhc3N1bWluZyB0aGUgcmVzdWx0IGlzIGFuIGFycmF5IGhlcmUuXG5cdFx0Ly8gc2VlIG5vdGljZSBpbiBjb252ZXJzaW9ucy5qczsgZG9uJ3QgdXNlIGJveCB0eXBlc1xuXHRcdC8vIGluIGNvbnZlcnNpb24gZnVuY3Rpb25zLlxuXHRcdGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0Jykge1xuXHRcdFx0Zm9yIChsZXQgbGVuID0gcmVzdWx0Lmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRyZXN1bHRbaV0gPSBNYXRoLnJvdW5kKHJlc3VsdFtpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHQvLyBQcmVzZXJ2ZSAuY29udmVyc2lvbiBwcm9wZXJ0eSBpZiB0aGVyZSBpcyBvbmVcblx0aWYgKCdjb252ZXJzaW9uJyBpbiBmbikge1xuXHRcdHdyYXBwZWRGbi5jb252ZXJzaW9uID0gZm4uY29udmVyc2lvbjtcblx0fVxuXG5cdHJldHVybiB3cmFwcGVkRm47XG59XG5cbm1vZGVscy5mb3JFYWNoKGZyb21Nb2RlbCA9PiB7XG5cdGNvbnZlcnRbZnJvbU1vZGVsXSA9IHt9O1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb252ZXJ0W2Zyb21Nb2RlbF0sICdjaGFubmVscycsIHt2YWx1ZTogY29udmVyc2lvbnNbZnJvbU1vZGVsXS5jaGFubmVsc30pO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoY29udmVydFtmcm9tTW9kZWxdLCAnbGFiZWxzJywge3ZhbHVlOiBjb252ZXJzaW9uc1tmcm9tTW9kZWxdLmxhYmVsc30pO1xuXG5cdGNvbnN0IHJvdXRlcyA9IHJvdXRlKGZyb21Nb2RlbCk7XG5cdGNvbnN0IHJvdXRlTW9kZWxzID0gT2JqZWN0LmtleXMocm91dGVzKTtcblxuXHRyb3V0ZU1vZGVscy5mb3JFYWNoKHRvTW9kZWwgPT4ge1xuXHRcdGNvbnN0IGZuID0gcm91dGVzW3RvTW9kZWxdO1xuXG5cdFx0Y29udmVydFtmcm9tTW9kZWxdW3RvTW9kZWxdID0gd3JhcFJvdW5kZWQoZm4pO1xuXHRcdGNvbnZlcnRbZnJvbU1vZGVsXVt0b01vZGVsXS5yYXcgPSB3cmFwUmF3KGZuKTtcblx0fSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb252ZXJ0O1xuIiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRcImFsaWNlYmx1ZVwiOiBbMjQwLCAyNDgsIDI1NV0sXHJcblx0XCJhbnRpcXVld2hpdGVcIjogWzI1MCwgMjM1LCAyMTVdLFxyXG5cdFwiYXF1YVwiOiBbMCwgMjU1LCAyNTVdLFxyXG5cdFwiYXF1YW1hcmluZVwiOiBbMTI3LCAyNTUsIDIxMl0sXHJcblx0XCJhenVyZVwiOiBbMjQwLCAyNTUsIDI1NV0sXHJcblx0XCJiZWlnZVwiOiBbMjQ1LCAyNDUsIDIyMF0sXHJcblx0XCJiaXNxdWVcIjogWzI1NSwgMjI4LCAxOTZdLFxyXG5cdFwiYmxhY2tcIjogWzAsIDAsIDBdLFxyXG5cdFwiYmxhbmNoZWRhbG1vbmRcIjogWzI1NSwgMjM1LCAyMDVdLFxyXG5cdFwiYmx1ZVwiOiBbMCwgMCwgMjU1XSxcclxuXHRcImJsdWV2aW9sZXRcIjogWzEzOCwgNDMsIDIyNl0sXHJcblx0XCJicm93blwiOiBbMTY1LCA0MiwgNDJdLFxyXG5cdFwiYnVybHl3b29kXCI6IFsyMjIsIDE4NCwgMTM1XSxcclxuXHRcImNhZGV0Ymx1ZVwiOiBbOTUsIDE1OCwgMTYwXSxcclxuXHRcImNoYXJ0cmV1c2VcIjogWzEyNywgMjU1LCAwXSxcclxuXHRcImNob2NvbGF0ZVwiOiBbMjEwLCAxMDUsIDMwXSxcclxuXHRcImNvcmFsXCI6IFsyNTUsIDEyNywgODBdLFxyXG5cdFwiY29ybmZsb3dlcmJsdWVcIjogWzEwMCwgMTQ5LCAyMzddLFxyXG5cdFwiY29ybnNpbGtcIjogWzI1NSwgMjQ4LCAyMjBdLFxyXG5cdFwiY3JpbXNvblwiOiBbMjIwLCAyMCwgNjBdLFxyXG5cdFwiY3lhblwiOiBbMCwgMjU1LCAyNTVdLFxyXG5cdFwiZGFya2JsdWVcIjogWzAsIDAsIDEzOV0sXHJcblx0XCJkYXJrY3lhblwiOiBbMCwgMTM5LCAxMzldLFxyXG5cdFwiZGFya2dvbGRlbnJvZFwiOiBbMTg0LCAxMzQsIDExXSxcclxuXHRcImRhcmtncmF5XCI6IFsxNjksIDE2OSwgMTY5XSxcclxuXHRcImRhcmtncmVlblwiOiBbMCwgMTAwLCAwXSxcclxuXHRcImRhcmtncmV5XCI6IFsxNjksIDE2OSwgMTY5XSxcclxuXHRcImRhcmtraGFraVwiOiBbMTg5LCAxODMsIDEwN10sXHJcblx0XCJkYXJrbWFnZW50YVwiOiBbMTM5LCAwLCAxMzldLFxyXG5cdFwiZGFya29saXZlZ3JlZW5cIjogWzg1LCAxMDcsIDQ3XSxcclxuXHRcImRhcmtvcmFuZ2VcIjogWzI1NSwgMTQwLCAwXSxcclxuXHRcImRhcmtvcmNoaWRcIjogWzE1MywgNTAsIDIwNF0sXHJcblx0XCJkYXJrcmVkXCI6IFsxMzksIDAsIDBdLFxyXG5cdFwiZGFya3NhbG1vblwiOiBbMjMzLCAxNTAsIDEyMl0sXHJcblx0XCJkYXJrc2VhZ3JlZW5cIjogWzE0MywgMTg4LCAxNDNdLFxyXG5cdFwiZGFya3NsYXRlYmx1ZVwiOiBbNzIsIDYxLCAxMzldLFxyXG5cdFwiZGFya3NsYXRlZ3JheVwiOiBbNDcsIDc5LCA3OV0sXHJcblx0XCJkYXJrc2xhdGVncmV5XCI6IFs0NywgNzksIDc5XSxcclxuXHRcImRhcmt0dXJxdW9pc2VcIjogWzAsIDIwNiwgMjA5XSxcclxuXHRcImRhcmt2aW9sZXRcIjogWzE0OCwgMCwgMjExXSxcclxuXHRcImRlZXBwaW5rXCI6IFsyNTUsIDIwLCAxNDddLFxyXG5cdFwiZGVlcHNreWJsdWVcIjogWzAsIDE5MSwgMjU1XSxcclxuXHRcImRpbWdyYXlcIjogWzEwNSwgMTA1LCAxMDVdLFxyXG5cdFwiZGltZ3JleVwiOiBbMTA1LCAxMDUsIDEwNV0sXHJcblx0XCJkb2RnZXJibHVlXCI6IFszMCwgMTQ0LCAyNTVdLFxyXG5cdFwiZmlyZWJyaWNrXCI6IFsxNzgsIDM0LCAzNF0sXHJcblx0XCJmbG9yYWx3aGl0ZVwiOiBbMjU1LCAyNTAsIDI0MF0sXHJcblx0XCJmb3Jlc3RncmVlblwiOiBbMzQsIDEzOSwgMzRdLFxyXG5cdFwiZnVjaHNpYVwiOiBbMjU1LCAwLCAyNTVdLFxyXG5cdFwiZ2FpbnNib3JvXCI6IFsyMjAsIDIyMCwgMjIwXSxcclxuXHRcImdob3N0d2hpdGVcIjogWzI0OCwgMjQ4LCAyNTVdLFxyXG5cdFwiZ29sZFwiOiBbMjU1LCAyMTUsIDBdLFxyXG5cdFwiZ29sZGVucm9kXCI6IFsyMTgsIDE2NSwgMzJdLFxyXG5cdFwiZ3JheVwiOiBbMTI4LCAxMjgsIDEyOF0sXHJcblx0XCJncmVlblwiOiBbMCwgMTI4LCAwXSxcclxuXHRcImdyZWVueWVsbG93XCI6IFsxNzMsIDI1NSwgNDddLFxyXG5cdFwiZ3JleVwiOiBbMTI4LCAxMjgsIDEyOF0sXHJcblx0XCJob25leWRld1wiOiBbMjQwLCAyNTUsIDI0MF0sXHJcblx0XCJob3RwaW5rXCI6IFsyNTUsIDEwNSwgMTgwXSxcclxuXHRcImluZGlhbnJlZFwiOiBbMjA1LCA5MiwgOTJdLFxyXG5cdFwiaW5kaWdvXCI6IFs3NSwgMCwgMTMwXSxcclxuXHRcIml2b3J5XCI6IFsyNTUsIDI1NSwgMjQwXSxcclxuXHRcImtoYWtpXCI6IFsyNDAsIDIzMCwgMTQwXSxcclxuXHRcImxhdmVuZGVyXCI6IFsyMzAsIDIzMCwgMjUwXSxcclxuXHRcImxhdmVuZGVyYmx1c2hcIjogWzI1NSwgMjQwLCAyNDVdLFxyXG5cdFwibGF3bmdyZWVuXCI6IFsxMjQsIDI1MiwgMF0sXHJcblx0XCJsZW1vbmNoaWZmb25cIjogWzI1NSwgMjUwLCAyMDVdLFxyXG5cdFwibGlnaHRibHVlXCI6IFsxNzMsIDIxNiwgMjMwXSxcclxuXHRcImxpZ2h0Y29yYWxcIjogWzI0MCwgMTI4LCAxMjhdLFxyXG5cdFwibGlnaHRjeWFuXCI6IFsyMjQsIDI1NSwgMjU1XSxcclxuXHRcImxpZ2h0Z29sZGVucm9keWVsbG93XCI6IFsyNTAsIDI1MCwgMjEwXSxcclxuXHRcImxpZ2h0Z3JheVwiOiBbMjExLCAyMTEsIDIxMV0sXHJcblx0XCJsaWdodGdyZWVuXCI6IFsxNDQsIDIzOCwgMTQ0XSxcclxuXHRcImxpZ2h0Z3JleVwiOiBbMjExLCAyMTEsIDIxMV0sXHJcblx0XCJsaWdodHBpbmtcIjogWzI1NSwgMTgyLCAxOTNdLFxyXG5cdFwibGlnaHRzYWxtb25cIjogWzI1NSwgMTYwLCAxMjJdLFxyXG5cdFwibGlnaHRzZWFncmVlblwiOiBbMzIsIDE3OCwgMTcwXSxcclxuXHRcImxpZ2h0c2t5Ymx1ZVwiOiBbMTM1LCAyMDYsIDI1MF0sXHJcblx0XCJsaWdodHNsYXRlZ3JheVwiOiBbMTE5LCAxMzYsIDE1M10sXHJcblx0XCJsaWdodHNsYXRlZ3JleVwiOiBbMTE5LCAxMzYsIDE1M10sXHJcblx0XCJsaWdodHN0ZWVsYmx1ZVwiOiBbMTc2LCAxOTYsIDIyMl0sXHJcblx0XCJsaWdodHllbGxvd1wiOiBbMjU1LCAyNTUsIDIyNF0sXHJcblx0XCJsaW1lXCI6IFswLCAyNTUsIDBdLFxyXG5cdFwibGltZWdyZWVuXCI6IFs1MCwgMjA1LCA1MF0sXHJcblx0XCJsaW5lblwiOiBbMjUwLCAyNDAsIDIzMF0sXHJcblx0XCJtYWdlbnRhXCI6IFsyNTUsIDAsIDI1NV0sXHJcblx0XCJtYXJvb25cIjogWzEyOCwgMCwgMF0sXHJcblx0XCJtZWRpdW1hcXVhbWFyaW5lXCI6IFsxMDIsIDIwNSwgMTcwXSxcclxuXHRcIm1lZGl1bWJsdWVcIjogWzAsIDAsIDIwNV0sXHJcblx0XCJtZWRpdW1vcmNoaWRcIjogWzE4NiwgODUsIDIxMV0sXHJcblx0XCJtZWRpdW1wdXJwbGVcIjogWzE0NywgMTEyLCAyMTldLFxyXG5cdFwibWVkaXVtc2VhZ3JlZW5cIjogWzYwLCAxNzksIDExM10sXHJcblx0XCJtZWRpdW1zbGF0ZWJsdWVcIjogWzEyMywgMTA0LCAyMzhdLFxyXG5cdFwibWVkaXVtc3ByaW5nZ3JlZW5cIjogWzAsIDI1MCwgMTU0XSxcclxuXHRcIm1lZGl1bXR1cnF1b2lzZVwiOiBbNzIsIDIwOSwgMjA0XSxcclxuXHRcIm1lZGl1bXZpb2xldHJlZFwiOiBbMTk5LCAyMSwgMTMzXSxcclxuXHRcIm1pZG5pZ2h0Ymx1ZVwiOiBbMjUsIDI1LCAxMTJdLFxyXG5cdFwibWludGNyZWFtXCI6IFsyNDUsIDI1NSwgMjUwXSxcclxuXHRcIm1pc3R5cm9zZVwiOiBbMjU1LCAyMjgsIDIyNV0sXHJcblx0XCJtb2NjYXNpblwiOiBbMjU1LCAyMjgsIDE4MV0sXHJcblx0XCJuYXZham93aGl0ZVwiOiBbMjU1LCAyMjIsIDE3M10sXHJcblx0XCJuYXZ5XCI6IFswLCAwLCAxMjhdLFxyXG5cdFwib2xkbGFjZVwiOiBbMjUzLCAyNDUsIDIzMF0sXHJcblx0XCJvbGl2ZVwiOiBbMTI4LCAxMjgsIDBdLFxyXG5cdFwib2xpdmVkcmFiXCI6IFsxMDcsIDE0MiwgMzVdLFxyXG5cdFwib3JhbmdlXCI6IFsyNTUsIDE2NSwgMF0sXHJcblx0XCJvcmFuZ2VyZWRcIjogWzI1NSwgNjksIDBdLFxyXG5cdFwib3JjaGlkXCI6IFsyMTgsIDExMiwgMjE0XSxcclxuXHRcInBhbGVnb2xkZW5yb2RcIjogWzIzOCwgMjMyLCAxNzBdLFxyXG5cdFwicGFsZWdyZWVuXCI6IFsxNTIsIDI1MSwgMTUyXSxcclxuXHRcInBhbGV0dXJxdW9pc2VcIjogWzE3NSwgMjM4LCAyMzhdLFxyXG5cdFwicGFsZXZpb2xldHJlZFwiOiBbMjE5LCAxMTIsIDE0N10sXHJcblx0XCJwYXBheWF3aGlwXCI6IFsyNTUsIDIzOSwgMjEzXSxcclxuXHRcInBlYWNocHVmZlwiOiBbMjU1LCAyMTgsIDE4NV0sXHJcblx0XCJwZXJ1XCI6IFsyMDUsIDEzMywgNjNdLFxyXG5cdFwicGlua1wiOiBbMjU1LCAxOTIsIDIwM10sXHJcblx0XCJwbHVtXCI6IFsyMjEsIDE2MCwgMjIxXSxcclxuXHRcInBvd2RlcmJsdWVcIjogWzE3NiwgMjI0LCAyMzBdLFxyXG5cdFwicHVycGxlXCI6IFsxMjgsIDAsIDEyOF0sXHJcblx0XCJyZWJlY2NhcHVycGxlXCI6IFsxMDIsIDUxLCAxNTNdLFxyXG5cdFwicmVkXCI6IFsyNTUsIDAsIDBdLFxyXG5cdFwicm9zeWJyb3duXCI6IFsxODgsIDE0MywgMTQzXSxcclxuXHRcInJveWFsYmx1ZVwiOiBbNjUsIDEwNSwgMjI1XSxcclxuXHRcInNhZGRsZWJyb3duXCI6IFsxMzksIDY5LCAxOV0sXHJcblx0XCJzYWxtb25cIjogWzI1MCwgMTI4LCAxMTRdLFxyXG5cdFwic2FuZHlicm93blwiOiBbMjQ0LCAxNjQsIDk2XSxcclxuXHRcInNlYWdyZWVuXCI6IFs0NiwgMTM5LCA4N10sXHJcblx0XCJzZWFzaGVsbFwiOiBbMjU1LCAyNDUsIDIzOF0sXHJcblx0XCJzaWVubmFcIjogWzE2MCwgODIsIDQ1XSxcclxuXHRcInNpbHZlclwiOiBbMTkyLCAxOTIsIDE5Ml0sXHJcblx0XCJza3libHVlXCI6IFsxMzUsIDIwNiwgMjM1XSxcclxuXHRcInNsYXRlYmx1ZVwiOiBbMTA2LCA5MCwgMjA1XSxcclxuXHRcInNsYXRlZ3JheVwiOiBbMTEyLCAxMjgsIDE0NF0sXHJcblx0XCJzbGF0ZWdyZXlcIjogWzExMiwgMTI4LCAxNDRdLFxyXG5cdFwic25vd1wiOiBbMjU1LCAyNTAsIDI1MF0sXHJcblx0XCJzcHJpbmdncmVlblwiOiBbMCwgMjU1LCAxMjddLFxyXG5cdFwic3RlZWxibHVlXCI6IFs3MCwgMTMwLCAxODBdLFxyXG5cdFwidGFuXCI6IFsyMTAsIDE4MCwgMTQwXSxcclxuXHRcInRlYWxcIjogWzAsIDEyOCwgMTI4XSxcclxuXHRcInRoaXN0bGVcIjogWzIxNiwgMTkxLCAyMTZdLFxyXG5cdFwidG9tYXRvXCI6IFsyNTUsIDk5LCA3MV0sXHJcblx0XCJ0dXJxdW9pc2VcIjogWzY0LCAyMjQsIDIwOF0sXHJcblx0XCJ2aW9sZXRcIjogWzIzOCwgMTMwLCAyMzhdLFxyXG5cdFwid2hlYXRcIjogWzI0NSwgMjIyLCAxNzldLFxyXG5cdFwid2hpdGVcIjogWzI1NSwgMjU1LCAyNTVdLFxyXG5cdFwid2hpdGVzbW9rZVwiOiBbMjQ1LCAyNDUsIDI0NV0sXHJcblx0XCJ5ZWxsb3dcIjogWzI1NSwgMjU1LCAwXSxcclxuXHRcInllbGxvd2dyZWVuXCI6IFsxNTQsIDIwNSwgNTBdXHJcbn07XHJcbiIsImNvbnN0IGNvbnZlcnNpb25zID0gcmVxdWlyZSgnLi9jb252ZXJzaW9ucycpO1xuXG4vKlxuXHRUaGlzIGZ1bmN0aW9uIHJvdXRlcyBhIG1vZGVsIHRvIGFsbCBvdGhlciBtb2RlbHMuXG5cblx0YWxsIGZ1bmN0aW9ucyB0aGF0IGFyZSByb3V0ZWQgaGF2ZSBhIHByb3BlcnR5IGAuY29udmVyc2lvbmAgYXR0YWNoZWRcblx0dG8gdGhlIHJldHVybmVkIHN5bnRoZXRpYyBmdW5jdGlvbi4gVGhpcyBwcm9wZXJ0eSBpcyBhbiBhcnJheVxuXHRvZiBzdHJpbmdzLCBlYWNoIHdpdGggdGhlIHN0ZXBzIGluIGJldHdlZW4gdGhlICdmcm9tJyBhbmQgJ3RvJ1xuXHRjb2xvciBtb2RlbHMgKGluY2x1c2l2ZSkuXG5cblx0Y29udmVyc2lvbnMgdGhhdCBhcmUgbm90IHBvc3NpYmxlIHNpbXBseSBhcmUgbm90IGluY2x1ZGVkLlxuKi9cblxuZnVuY3Rpb24gYnVpbGRHcmFwaCgpIHtcblx0Y29uc3QgZ3JhcGggPSB7fTtcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL29iamVjdC1rZXlzLXZzLWZvci1pbi13aXRoLWNsb3N1cmUvM1xuXHRjb25zdCBtb2RlbHMgPSBPYmplY3Qua2V5cyhjb252ZXJzaW9ucyk7XG5cblx0Zm9yIChsZXQgbGVuID0gbW9kZWxzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdGdyYXBoW21vZGVsc1tpXV0gPSB7XG5cdFx0XHQvLyBodHRwOi8vanNwZXJmLmNvbS8xLXZzLWluZmluaXR5XG5cdFx0XHQvLyBtaWNyby1vcHQsIGJ1dCB0aGlzIGlzIHNpbXBsZS5cblx0XHRcdGRpc3RhbmNlOiAtMSxcblx0XHRcdHBhcmVudDogbnVsbFxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4gZ3JhcGg7XG59XG5cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JyZWFkdGgtZmlyc3Rfc2VhcmNoXG5mdW5jdGlvbiBkZXJpdmVCRlMoZnJvbU1vZGVsKSB7XG5cdGNvbnN0IGdyYXBoID0gYnVpbGRHcmFwaCgpO1xuXHRjb25zdCBxdWV1ZSA9IFtmcm9tTW9kZWxdOyAvLyBVbnNoaWZ0IC0+IHF1ZXVlIC0+IHBvcFxuXG5cdGdyYXBoW2Zyb21Nb2RlbF0uZGlzdGFuY2UgPSAwO1xuXG5cdHdoaWxlIChxdWV1ZS5sZW5ndGgpIHtcblx0XHRjb25zdCBjdXJyZW50ID0gcXVldWUucG9wKCk7XG5cdFx0Y29uc3QgYWRqYWNlbnRzID0gT2JqZWN0LmtleXMoY29udmVyc2lvbnNbY3VycmVudF0pO1xuXG5cdFx0Zm9yIChsZXQgbGVuID0gYWRqYWNlbnRzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0Y29uc3QgYWRqYWNlbnQgPSBhZGphY2VudHNbaV07XG5cdFx0XHRjb25zdCBub2RlID0gZ3JhcGhbYWRqYWNlbnRdO1xuXG5cdFx0XHRpZiAobm9kZS5kaXN0YW5jZSA9PT0gLTEpIHtcblx0XHRcdFx0bm9kZS5kaXN0YW5jZSA9IGdyYXBoW2N1cnJlbnRdLmRpc3RhbmNlICsgMTtcblx0XHRcdFx0bm9kZS5wYXJlbnQgPSBjdXJyZW50O1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KGFkamFjZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZ3JhcGg7XG59XG5cbmZ1bmN0aW9uIGxpbmsoZnJvbSwgdG8pIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChhcmdzKSB7XG5cdFx0cmV0dXJuIHRvKGZyb20oYXJncykpO1xuXHR9O1xufVxuXG5mdW5jdGlvbiB3cmFwQ29udmVyc2lvbih0b01vZGVsLCBncmFwaCkge1xuXHRjb25zdCBwYXRoID0gW2dyYXBoW3RvTW9kZWxdLnBhcmVudCwgdG9Nb2RlbF07XG5cdGxldCBmbiA9IGNvbnZlcnNpb25zW2dyYXBoW3RvTW9kZWxdLnBhcmVudF1bdG9Nb2RlbF07XG5cblx0bGV0IGN1ciA9IGdyYXBoW3RvTW9kZWxdLnBhcmVudDtcblx0d2hpbGUgKGdyYXBoW2N1cl0ucGFyZW50KSB7XG5cdFx0cGF0aC51bnNoaWZ0KGdyYXBoW2N1cl0ucGFyZW50KTtcblx0XHRmbiA9IGxpbmsoY29udmVyc2lvbnNbZ3JhcGhbY3VyXS5wYXJlbnRdW2N1cl0sIGZuKTtcblx0XHRjdXIgPSBncmFwaFtjdXJdLnBhcmVudDtcblx0fVxuXG5cdGZuLmNvbnZlcnNpb24gPSBwYXRoO1xuXHRyZXR1cm4gZm47XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZyb21Nb2RlbCkge1xuXHRjb25zdCBncmFwaCA9IGRlcml2ZUJGUyhmcm9tTW9kZWwpO1xuXHRjb25zdCBjb252ZXJzaW9uID0ge307XG5cblx0Y29uc3QgbW9kZWxzID0gT2JqZWN0LmtleXMoZ3JhcGgpO1xuXHRmb3IgKGxldCBsZW4gPSBtb2RlbHMubGVuZ3RoLCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0Y29uc3QgdG9Nb2RlbCA9IG1vZGVsc1tpXTtcblx0XHRjb25zdCBub2RlID0gZ3JhcGhbdG9Nb2RlbF07XG5cblx0XHRpZiAobm9kZS5wYXJlbnQgPT09IG51bGwpIHtcblx0XHRcdC8vIE5vIHBvc3NpYmxlIGNvbnZlcnNpb24sIG9yIHRoaXMgbm9kZSBpcyB0aGUgc291cmNlIG1vZGVsLlxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udmVyc2lvblt0b01vZGVsXSA9IHdyYXBDb252ZXJzaW9uKHRvTW9kZWwsIGdyYXBoKTtcblx0fVxuXG5cdHJldHVybiBjb252ZXJzaW9uO1xufTtcblxuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NvbG91cmZvcm0uY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICB2YXIgYXR0cmlidXRlcyA9IG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fTtcblxuICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMubm9uY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSAndW5kZWZpbmVkJyA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICAgIGlmIChub25jZSkge1xuICAgICAgYXR0cmlidXRlcy5ub25jZSA9IG5vbmNlO1xuICAgIH1cbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHRhcmdldCA9IGdldFRhcmdldChvcHRpb25zLmluc2VydCB8fCAnaGVhZCcpO1xuXG4gICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxudmFyIHJlcGxhY2VUZXh0ID0gZnVuY3Rpb24gcmVwbGFjZVRleHQoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2UoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuICAgIHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuICB9O1xufSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcbiAgdmFyIGNzcyA9IHJlbW92ZSA/ICcnIDogb2JqLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKS5jb25jYXQob2JqLmNzcywgXCJ9XCIpIDogb2JqLmNzczsgLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcbiAgICB2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cbiAgICBpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHtcbiAgICAgIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnKHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKCdtZWRpYScsIG1lZGlhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUoJ21lZGlhJyk7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbnZhciBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIik7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSByZXF1aXJlKFwiLi4vaW1nL2ljb25zLnBuZ1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiaHRtbCxcXG5ib2R5IHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBmb250LWZhbWlseTogXFxcIkFyaWFsXFxcIiwgXFxcIkhlbHZldGljYVxcXCIsIHNhbnMtc2VyaWY7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJhY2tncm91bmQ6ICMwMDA7XFxuICBvdmVyZmxvdy15OiBoaWRkZW47XFxufVxcblxcbmNhbnZhcyB7XFxuICBtYXJnaW46IDA7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG5ib2R5IHtcXG4gIGhlaWdodDogMTAwdmg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbn1cXG5cXG4jbW9kZWwge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBmbGV4LXNocmluazogMDtcXG4gIHdpZHRoOiAzNDBweDtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJhY2tncm91bmQ6ICNmZmZmZmY7XFxufVxcblxcbi5yZW5kZXIge1xcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDMwMHB4KTtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLnJlbmRlciBpbWcge1xcbiAgb2JqZWN0LWZpdDogY29udGFpbjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG4uZ3JvdXAge1xcbiAgbWFyZ2luOiAwIDIwcHggMjBweCAyMHB4O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbi5ncm91cDpmaXJzdC1jaGlsZCB7XFxuICBtYXJnaW4tdG9wOiAyMHB4O1xcbn1cXG5cXG4ub3B0aW9ucyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIGJhY2tncm91bmQ6ICNkZGQ7XFxuICBwYWRkaW5nOiAyMHB4O1xcbn1cXG5cXG5pbnB1dFt0eXBlPVxcXCJyYWRpb1xcXCJdLFxcbmlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl0ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuYnV0dG9uLFxcbmlucHV0W3R5cGU9XFxcInJhZGlvXFxcIl0gKyBsYWJlbCxcXG5pbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdICsgbGFiZWwge1xcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcXG4gIGJvcmRlci13aWR0aDogMXB4O1xcbiAgYm9yZGVyLWNvbG9yOiBibGFjaztcXG59XFxuXFxuaW5wdXRbdHlwZT1cXFwicmFkaW9cXFwiXTpkaXNhYmxlZCArIGxhYmVsLFxcbmlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl06ZGlzYWJsZWQgKyBsYWJlbCB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG5idXR0b24sXFxubGFiZWwsXFxuYS5ob21lLFxcbmEuc291cmNlQ29kZSB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBvdXRsaW5lOiAwO1xcbiAgd2lkdGg6IDMycHg7XFxuICBoZWlnaHQ6IDMycHg7XFxuICB0ZXh0LWluZGVudDogLTk5OTk5cHg7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO1xcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXG59XFxuXFxuI3J1biB7XFxuICB3aWR0aDogMzRweDtcXG4gIGhlaWdodDogMzRweDtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IC0zODRweCAwO1xcbn1cXG5cXG4jc2h1ZmZsZSB7XFxuICB3aWR0aDogMzRweDtcXG4gIGhlaWdodDogMzRweDtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IC0zODRweCAtMzJweDtcXG4gIG1hcmdpbi1yaWdodDogNHB4O1xcbn1cXG5cXG4jcnVuOmRpc2FibGVkIHtcXG4gIG9wYWNpdHk6IDAuMTtcXG59XFxuXFxuLnJnYiBsYWJlbFtmb3I9XFxcImZpcnN0XFxcIl0ge1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCAwO1xcbn1cXG5cXG4ucmdiIGxhYmVsW2Zvcj1cXFwic2Vjb25kXFxcIl0ge1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTMycHggMDtcXG59XFxuXFxuLnJnYiBsYWJlbFtmb3I9XFxcInRoaXJkXFxcIl0ge1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTY0cHggMDtcXG59XFxuXFxuLmhzdiBsYWJlbFtmb3I9XFxcImZpcnN0XFxcIl0ge1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCAtMzJweDtcXG59XFxuXFxuLmhzdiBsYWJlbFtmb3I9XFxcInNlY29uZFxcXCJdIHtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IC0zMnB4IC0zMnB4O1xcbn1cXG5cXG4uaHN2IGxhYmVsW2Zvcj1cXFwidGhpcmRcXFwiXSB7XFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtNjRweCAtMzJweDtcXG59XFxuXFxubGFiZWxbZm9yPVxcXCJmaXJzdFxcXCJdLFxcbmxhYmVsW2Zvcj1cXFwic2Vjb25kXFxcIl0sXFxubGFiZWxbZm9yPVxcXCJ0aGlyZFxcXCJdIHtcXG4gIHRleHQtaW5kZW50OiA0MHB4O1xcbiAgbGluZS1oZWlnaHQ6IDMycHg7XFxufVxcblxcbmxhYmVsW2Zvcj1cXFwiY29sb3VyTW9kZVxcXCJdIHtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IC05NnB4IDA7XFxuICBtYXJnaW4tcmlnaHQ6IDRweDtcXG59XFxuXFxubGFiZWxbZm9yPVxcXCJpbWFnZVNpemVcXFwiXSB7XFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMTI4cHggMDtcXG4gIG1hcmdpbi1yaWdodDogNHB4O1xcbn1cXG5cXG5sYWJlbFtmb3I9XFxcImZpcnN0Tm9uZVxcXCJdLFxcbmxhYmVsW2Zvcj1cXFwic2Vjb25kTm9uZVxcXCJdLFxcbmxhYmVsW2Zvcj1cXFwidGhpcmROb25lXFxcIl0ge1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTE2MHB4IDA7XFxufVxcblxcbmxhYmVsW2Zvcj1cXFwiZmlyc3RaZXJvT25lXFxcIl0sXFxubGFiZWxbZm9yPVxcXCJzZWNvbmRaZXJvT25lXFxcIl0sXFxubGFiZWxbZm9yPVxcXCJ0aGlyZFplcm9PbmVcXFwiXSB7XFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMTkycHggMDtcXG59XFxuXFxubGFiZWxbZm9yPVxcXCJmaXJzdE1pbnVzUGx1c09uZVxcXCJdLFxcbmxhYmVsW2Zvcj1cXFwic2Vjb25kTWludXNQbHVzT25lXFxcIl0sXFxubGFiZWxbZm9yPVxcXCJ0aGlyZE1pbnVzUGx1c09uZVxcXCJdIHtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IC0yMjRweCAwO1xcbiAgbWFyZ2luLXJpZ2h0OiAzMnB4O1xcbn1cXG5cXG5sYWJlbFtmb3I9XFxcImZpcnN0TWluTWF4XFxcIl0sXFxubGFiZWxbZm9yPVxcXCJzZWNvbmRNaW5NYXhcXFwiXSxcXG5sYWJlbFtmb3I9XFxcInRoaXJkTWluTWF4XFxcIl0ge1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTI1NnB4IDA7XFxufVxcblxcbmxhYmVsW2Zvcj1cXFwiZmlyc3RMaW1pdFxcXCJdLFxcbmxhYmVsW2Zvcj1cXFwic2Vjb25kTGltaXRcXFwiXSxcXG5sYWJlbFtmb3I9XFxcInRoaXJkTGltaXRcXFwiXSB7XFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtMjg4cHggMDtcXG59XFxuXFxubGFiZWxbZm9yPVxcXCJmaXJzdFdyYXBcXFwiXSxcXG5sYWJlbFtmb3I9XFxcInNlY29uZFdyYXBcXFwiXSxcXG5sYWJlbFtmb3I9XFxcInRoaXJkV3JhcFxcXCJdIHtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IC0zMjBweCAwO1xcbn1cXG5cXG5sYWJlbFtmb3I9XFxcImZpcnN0UmVmbGVjdFxcXCJdLFxcbmxhYmVsW2Zvcj1cXFwic2Vjb25kUmVmbGVjdFxcXCJdLFxcbmxhYmVsW2Zvcj1cXFwidGhpcmRSZWZsZWN0XFxcIl0ge1xcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogLTM1MnB4IDA7XFxufVxcblxcbmlucHV0W3R5cGU9XFxcInJhZGlvXFxcIl06Y2hlY2tlZCArIGxhYmVsLFxcbmlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl06Y2hlY2tlZCArIGxhYmVsIHtcXG4gIGJhY2tncm91bmQtcG9zaXRpb24teTogLTMycHg7XFxufVxcblxcbnRleHRhcmVhLmludmFsaWQge1xcbiAgYm9yZGVyLWNvbG9yOiByZWQ7XFxufVxcblxcbnNwYW4uZXJyb3Ige1xcbiAgY29sb3I6IHJlZDtcXG59XFxuXFxuYS5ob21lIHtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IC00MTZweCAtMzJweDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGxlZnQ6IDg4cHg7XFxufVxcblxcbmEuc291cmNlQ29kZSB7XFxuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAtNDE2cHggMDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGxlZnQ6IDkwcHg7XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNzY4cHgpIHtcXG4gIGJvZHkge1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIH1cXG5cXG4gIC5nZW5lcmF0ZWQgI21vZGVsIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gIH1cXG5cXG4gIC5yZW5kZXIge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbiAgfVxcblxcbiAgLmdlbmVyYXRlZCAucmVuZGVyIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgfVxcbn1cXG5cIiwgXCJcIl0pO1xuLy8gRXhwb3J0c1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVzZVNvdXJjZU1hcCkge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKCcnKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG5cbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgJycpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gIHJldHVybiBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBvcHRpb25zID0ge307XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlLCBuby1wYXJhbS1yZWFzc2lnblxuXG5cbiAgdXJsID0gdXJsICYmIHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmw7XG5cbiAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfSAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjg3NTIwZDU2ZTkzM2QzOGMxNDg2YWY0YWJlMTAzMzEwLnBuZ1wiOyJdLCJzb3VyY2VSb290IjoiIn0=