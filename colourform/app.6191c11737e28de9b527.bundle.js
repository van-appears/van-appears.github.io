!function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=1)}([function(n,e,t){const r=t(6),o={};for(const n of Object.keys(r))o[r[n]]=n;const a={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};n.exports=a;for(const n of Object.keys(a)){if(!("channels"in a[n]))throw new Error("missing channels property: "+n);if(!("labels"in a[n]))throw new Error("missing channel labels property: "+n);if(a[n].labels.length!==a[n].channels)throw new Error("channel and label counts mismatch: "+n);const{channels:e,labels:t}=a[n];delete a[n].channels,delete a[n].labels,Object.defineProperty(a[n],"channels",{value:e}),Object.defineProperty(a[n],"labels",{value:t})}a.rgb.hsl=function(n){const e=n[0]/255,t=n[1]/255,r=n[2]/255,o=Math.min(e,t,r),a=Math.max(e,t,r),i=a-o;let l,c;a===o?l=0:e===a?l=(t-r)/i:t===a?l=2+(r-e)/i:r===a&&(l=4+(e-t)/i),l=Math.min(60*l,360),l<0&&(l+=360);const s=(o+a)/2;return c=a===o?0:s<=.5?i/(a+o):i/(2-a-o),[l,100*c,100*s]},a.rgb.hsv=function(n){let e,t,r,o,a;const i=n[0]/255,l=n[1]/255,c=n[2]/255,s=Math.max(i,l,c),u=s-Math.min(i,l,c),d=function(n){return(s-n)/6/u+.5};return 0===u?(o=0,a=0):(a=u/s,e=d(i),t=d(l),r=d(c),i===s?o=r-t:l===s?o=1/3+e-r:c===s&&(o=2/3+t-e),o<0?o+=1:o>1&&(o-=1)),[360*o,100*a,100*s]},a.rgb.hwb=function(n){const e=n[0],t=n[1];let r=n[2];const o=a.rgb.hsl(n)[0],i=1/255*Math.min(e,Math.min(t,r));return r=1-1/255*Math.max(e,Math.max(t,r)),[o,100*i,100*r]},a.rgb.cmyk=function(n){const e=n[0]/255,t=n[1]/255,r=n[2]/255,o=Math.min(1-e,1-t,1-r);return[100*((1-e-o)/(1-o)||0),100*((1-t-o)/(1-o)||0),100*((1-r-o)/(1-o)||0),100*o]},a.rgb.keyword=function(n){const e=o[n];if(e)return e;let t,a=1/0;for(const e of Object.keys(r)){const o=r[e],c=(l=o,((i=n)[0]-l[0])**2+(i[1]-l[1])**2+(i[2]-l[2])**2);c<a&&(a=c,t=e)}var i,l;return t},a.keyword.rgb=function(n){return r[n]},a.rgb.xyz=function(n){let e=n[0]/255,t=n[1]/255,r=n[2]/255;e=e>.04045?((e+.055)/1.055)**2.4:e/12.92,t=t>.04045?((t+.055)/1.055)**2.4:t/12.92,r=r>.04045?((r+.055)/1.055)**2.4:r/12.92;return[100*(.4124*e+.3576*t+.1805*r),100*(.2126*e+.7152*t+.0722*r),100*(.0193*e+.1192*t+.9505*r)]},a.rgb.lab=function(n){const e=a.rgb.xyz(n);let t=e[0],r=e[1],o=e[2];t/=95.047,r/=100,o/=108.883,t=t>.008856?t**(1/3):7.787*t+16/116,r=r>.008856?r**(1/3):7.787*r+16/116,o=o>.008856?o**(1/3):7.787*o+16/116;return[116*r-16,500*(t-r),200*(r-o)]},a.hsl.rgb=function(n){const e=n[0]/360,t=n[1]/100,r=n[2]/100;let o,a,i;if(0===t)return i=255*r,[i,i,i];o=r<.5?r*(1+t):r+t-r*t;const l=2*r-o,c=[0,0,0];for(let n=0;n<3;n++)a=e+1/3*-(n-1),a<0&&a++,a>1&&a--,i=6*a<1?l+6*(o-l)*a:2*a<1?o:3*a<2?l+(o-l)*(2/3-a)*6:l,c[n]=255*i;return c},a.hsl.hsv=function(n){const e=n[0];let t=n[1]/100,r=n[2]/100,o=t;const a=Math.max(r,.01);r*=2,t*=r<=1?r:2-r,o*=a<=1?a:2-a;return[e,100*(0===r?2*o/(a+o):2*t/(r+t)),100*((r+t)/2)]},a.hsv.rgb=function(n){const e=n[0]/60,t=n[1]/100;let r=n[2]/100;const o=Math.floor(e)%6,a=e-Math.floor(e),i=255*r*(1-t),l=255*r*(1-t*a),c=255*r*(1-t*(1-a));switch(r*=255,o){case 0:return[r,c,i];case 1:return[l,r,i];case 2:return[i,r,c];case 3:return[i,l,r];case 4:return[c,i,r];case 5:return[r,i,l]}},a.hsv.hsl=function(n){const e=n[0],t=n[1]/100,r=n[2]/100,o=Math.max(r,.01);let a,i;i=(2-t)*r;const l=(2-t)*o;return a=t*o,a/=l<=1?l:2-l,a=a||0,i/=2,[e,100*a,100*i]},a.hwb.rgb=function(n){const e=n[0]/360;let t=n[1]/100,r=n[2]/100;const o=t+r;let a;o>1&&(t/=o,r/=o);const i=Math.floor(6*e),l=1-r;a=6*e-i,0!=(1&i)&&(a=1-a);const c=t+a*(l-t);let s,u,d;switch(i){default:case 6:case 0:s=l,u=c,d=t;break;case 1:s=c,u=l,d=t;break;case 2:s=t,u=l,d=c;break;case 3:s=t,u=c,d=l;break;case 4:s=c,u=t,d=l;break;case 5:s=l,u=t,d=c}return[255*s,255*u,255*d]},a.cmyk.rgb=function(n){const e=n[0]/100,t=n[1]/100,r=n[2]/100,o=n[3]/100;return[255*(1-Math.min(1,e*(1-o)+o)),255*(1-Math.min(1,t*(1-o)+o)),255*(1-Math.min(1,r*(1-o)+o))]},a.xyz.rgb=function(n){const e=n[0]/100,t=n[1]/100,r=n[2]/100;let o,a,i;return o=3.2406*e+-1.5372*t+-.4986*r,a=-.9689*e+1.8758*t+.0415*r,i=.0557*e+-.204*t+1.057*r,o=o>.0031308?1.055*o**(1/2.4)-.055:12.92*o,a=a>.0031308?1.055*a**(1/2.4)-.055:12.92*a,i=i>.0031308?1.055*i**(1/2.4)-.055:12.92*i,o=Math.min(Math.max(0,o),1),a=Math.min(Math.max(0,a),1),i=Math.min(Math.max(0,i),1),[255*o,255*a,255*i]},a.xyz.lab=function(n){let e=n[0],t=n[1],r=n[2];e/=95.047,t/=100,r/=108.883,e=e>.008856?e**(1/3):7.787*e+16/116,t=t>.008856?t**(1/3):7.787*t+16/116,r=r>.008856?r**(1/3):7.787*r+16/116;return[116*t-16,500*(e-t),200*(t-r)]},a.lab.xyz=function(n){let e,t,r;t=(n[0]+16)/116,e=n[1]/500+t,r=t-n[2]/200;const o=t**3,a=e**3,i=r**3;return t=o>.008856?o:(t-16/116)/7.787,e=a>.008856?a:(e-16/116)/7.787,r=i>.008856?i:(r-16/116)/7.787,e*=95.047,t*=100,r*=108.883,[e,t,r]},a.lab.lch=function(n){const e=n[0],t=n[1],r=n[2];let o;o=360*Math.atan2(r,t)/2/Math.PI,o<0&&(o+=360);return[e,Math.sqrt(t*t+r*r),o]},a.lch.lab=function(n){const e=n[0],t=n[1],r=n[2]/360*2*Math.PI;return[e,t*Math.cos(r),t*Math.sin(r)]},a.rgb.ansi16=function(n,e=null){const[t,r,o]=n;let i=null===e?a.rgb.hsv(n)[2]:e;if(i=Math.round(i/50),0===i)return 30;let l=30+(Math.round(o/255)<<2|Math.round(r/255)<<1|Math.round(t/255));return 2===i&&(l+=60),l},a.hsv.ansi16=function(n){return a.rgb.ansi16(a.hsv.rgb(n),n[2])},a.rgb.ansi256=function(n){const e=n[0],t=n[1],r=n[2];if(e===t&&t===r)return e<8?16:e>248?231:Math.round((e-8)/247*24)+232;return 16+36*Math.round(e/255*5)+6*Math.round(t/255*5)+Math.round(r/255*5)},a.ansi16.rgb=function(n){let e=n%10;if(0===e||7===e)return n>50&&(e+=3.5),e=e/10.5*255,[e,e,e];const t=.5*(1+~~(n>50));return[(1&e)*t*255,(e>>1&1)*t*255,(e>>2&1)*t*255]},a.ansi256.rgb=function(n){if(n>=232){const e=10*(n-232)+8;return[e,e,e]}let e;n-=16;return[Math.floor(n/36)/5*255,Math.floor((e=n%36)/6)/5*255,e%6/5*255]},a.rgb.hex=function(n){const e=(((255&Math.round(n[0]))<<16)+((255&Math.round(n[1]))<<8)+(255&Math.round(n[2]))).toString(16).toUpperCase();return"000000".substring(e.length)+e},a.hex.rgb=function(n){const e=n.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!e)return[0,0,0];let t=e[0];3===e[0].length&&(t=t.split("").map(n=>n+n).join(""));const r=parseInt(t,16);return[r>>16&255,r>>8&255,255&r]},a.rgb.hcg=function(n){const e=n[0]/255,t=n[1]/255,r=n[2]/255,o=Math.max(Math.max(e,t),r),a=Math.min(Math.min(e,t),r),i=o-a;let l,c;return l=i<1?a/(1-i):0,c=i<=0?0:o===e?(t-r)/i%6:o===t?2+(r-e)/i:4+(e-t)/i,c/=6,c%=1,[360*c,100*i,100*l]},a.hsl.hcg=function(n){const e=n[1]/100,t=n[2]/100,r=t<.5?2*e*t:2*e*(1-t);let o=0;return r<1&&(o=(t-.5*r)/(1-r)),[n[0],100*r,100*o]},a.hsv.hcg=function(n){const e=n[1]/100,t=n[2]/100,r=e*t;let o=0;return r<1&&(o=(t-r)/(1-r)),[n[0],100*r,100*o]},a.hcg.rgb=function(n){const e=n[0]/360,t=n[1]/100,r=n[2]/100;if(0===t)return[255*r,255*r,255*r];const o=[0,0,0],a=e%1*6,i=a%1,l=1-i;let c=0;switch(Math.floor(a)){case 0:o[0]=1,o[1]=i,o[2]=0;break;case 1:o[0]=l,o[1]=1,o[2]=0;break;case 2:o[0]=0,o[1]=1,o[2]=i;break;case 3:o[0]=0,o[1]=l,o[2]=1;break;case 4:o[0]=i,o[1]=0,o[2]=1;break;default:o[0]=1,o[1]=0,o[2]=l}return c=(1-t)*r,[255*(t*o[0]+c),255*(t*o[1]+c),255*(t*o[2]+c)]},a.hcg.hsv=function(n){const e=n[1]/100,t=e+n[2]/100*(1-e);let r=0;return t>0&&(r=e/t),[n[0],100*r,100*t]},a.hcg.hsl=function(n){const e=n[1]/100,t=n[2]/100*(1-e)+.5*e;let r=0;return t>0&&t<.5?r=e/(2*t):t>=.5&&t<1&&(r=e/(2*(1-t))),[n[0],100*r,100*t]},a.hcg.hwb=function(n){const e=n[1]/100,t=e+n[2]/100*(1-e);return[n[0],100*(t-e),100*(1-t)]},a.hwb.hcg=function(n){const e=n[1]/100,t=1-n[2]/100,r=t-e;let o=0;return r<1&&(o=(t-r)/(1-r)),[n[0],100*r,100*o]},a.apple.rgb=function(n){return[n[0]/65535*255,n[1]/65535*255,n[2]/65535*255]},a.rgb.apple=function(n){return[n[0]/255*65535,n[1]/255*65535,n[2]/255*65535]},a.gray.rgb=function(n){return[n[0]/100*255,n[0]/100*255,n[0]/100*255]},a.gray.hsl=function(n){return[0,0,n[0]]},a.gray.hsv=a.gray.hsl,a.gray.hwb=function(n){return[0,100,n[0]]},a.gray.cmyk=function(n){return[0,0,0,n[0]]},a.gray.lab=function(n){return[n[0],0,0]},a.gray.hex=function(n){const e=255&Math.round(n[0]/100*255),t=((e<<16)+(e<<8)+e).toString(16).toUpperCase();return"000000".substring(t.length)+t},a.rgb.gray=function(n){return[(n[0]+n[1]+n[2])/3/255*100]}},function(n,e,t){"use strict";t.r(e);t(2),t(8)},function(n,e,t){const r=t(3);window.onload=function(){const n=n=>document.querySelector(n);let e=n("#colourMode").checked?"hsv":"rgb";function t(e){return n("[name="+e+"]").value.replace(/\n/g,"").trim()}function o(e){return n("[name="+e+"Scale]:checked").value}function a(e){return n("[name="+e+"Limit]:checked").value}function i(n){return{field:n,fn:t(n),scale:o(n),limit:a(n)}}function l(e){n("body").className=e?"generated":""}function c(n,e){const t=document.querySelectorAll("[name="+n+"]");for(let n=0;n<t.length;n++)t[n].disabled=e}function s(){"hsv"===e?(n("label[for=first]").innerHTML="Hue",n("label[for=first]").title="Hue formula (0 - 360)",n("label[for=second]").innerHTML="Saturation",n("label[for=second]").title="Saturation formula (0 - 100)",n("label[for=third]").innerHTML="Value",n("label[for=third]").title="Value formula (0 - 100)"):(n("label[for=first]").innerHTML="Red",n("label[for=first]").title="Red formula (0 - 255)",n("label[for=second]").innerHTML="Green",n("label[for=second]").title="Green formula (0 - 255)",n("label[for=third]").innerHTML="Blue",n("label[for=third]").title="Blue formula (0 - 255)")}n("#model").className=e,c("firstLimit",n("#firstMinMax").checked),c("secondLimit",n("#secondMinMax").checked),c("thirdLimit",n("#thirdMinMax").checked),n("#run").onclick=function(){l(!0),r(i("first"),i("second"),i("third"),e,n("[name=imageSize]").checked?"big":"small",()=>l(!1))},n("#colourMode").onclick=function(t){e=t.target.checked?"hsv":"rgb",n("#model").className=e,s()},n("#model").onchange=function(n){"firstScale"===n.target.name?c("firstLimit","minMax"===n.target.value):"secondScale"===n.target.name?c("secondLimit","minMax"===n.target.value):"thirdScale"===n.target.name&&c("thirdLimit","minMax"===n.target.value)},s()}},function(n,e,t){const r=t(4),o=t(5),a=2*Math.PI,i={big:1400,small:512},l={hsv:[360,100,100],rgb:[255,255,255]};function c(n){return new Function("x","y","pi2",`\ntry {\n  return (${n});\n} catch (e) {\n  return 0;\n}`)}function s(n,e){return Math.min(Math.max(0,n),e)}function u(n){return"wrap"===n?(n,e)=>s(function(n,e){if(n<0)for(;n<0;)n+=e;else if(n>e)for(;n>e;)n-=e;return n}(n,e),e):"reflect"===n?(n,e)=>s(function(n,e){for(;n<0||n>e;)n=n<0?-n:2*e-n;return n}(n,e),e):s}function d(n){return"minusPlusOne"===n?(n,e)=>(n+1)/2*e:"zeroOne"===n?(n,e)=>n*e:"minMax"===n?(n,e,t,r)=>e*(n-t)/(r-t||1):n=>n}n.exports=function(n,e,t,s,f,h){let b,p,g,m,y,x,v,k,M=[];const w=i[f],j=r(w);try{b=c(n.fn),m=d(n.scale),x=u(n.limit)}catch(e){M.push(n.field)}try{p=c(e.fn),secondScale=d(e.scale),v=u(e.limit)}catch(n){M.push(e.field)}try{g=c(t.fn),y=d(t.scale),k=u(t.limit)}catch(n){M.push(t.field)}if(M.length)return M;const O=new Array(w);let S=1/0,C=-1/0,L=1/0,P=-1/0,q=1/0,T=-1/0;for(let n=0;n<w;n++){O[n]=new Array(w);for(let e=0;e<w;e++){const t=n/(w-1),r=e/(w-1),o=b(t,r,a),i=p(t,r,a),l=g(t,r,a);O[n][e]=[o,i,l],S=Math.min(o,S),C=Math.max(o,C),L=Math.min(i,L),P=Math.max(i,P),q=Math.min(l,q),T=Math.max(l,T)}}let[I,N,R]=l[s];for(let n=0;n<w;n++)for(let e=0;e<w;e++){let[t,r,a]=O[n][e];t=x(m(t,I,S,C),I),r=v(secondScale(r,N,L,P),N),a=k(y(a,R,q,T),R);const[i,l,c]="hsv"===s?o.hsv.rgb.raw(t,r,a):[t,r,a];j.drawPixel(n,e,i,l,c)}!function(n,e){const t=document.querySelector(".render");n.onclick=e,t.firstChild&&t.removeChild(t.firstChild),t.appendChild(n)}(j.buildImage(),h)}},function(n,e){n.exports=function(n){const e=document.querySelector("body"),t=document.createElement("canvas");t.width=n,t.height=n,e.appendChild(t);const r=t.getContext("2d"),o=r.getImageData(0,0,n,n);return{drawPixel:function(e,t,r,a,i){const l=4*(e+t*n);o.data[l+0]=r,o.data[l+1]=a,o.data[l+2]=i,o.data[l+3]=255},buildImage:function(){r.putImageData(o,0,0);const n=new Image;return n.src=t.toDataURL(),e.removeChild(t),n}}}},function(n,e,t){const r=t(0),o=t(7),a={};Object.keys(r).forEach(n=>{a[n]={},Object.defineProperty(a[n],"channels",{value:r[n].channels}),Object.defineProperty(a[n],"labels",{value:r[n].labels});const e=o(n);Object.keys(e).forEach(t=>{const r=e[t];a[n][t]=function(n){const e=function(...e){const t=e[0];if(null==t)return t;t.length>1&&(e=t);const r=n(e);if("object"==typeof r)for(let n=r.length,e=0;e<n;e++)r[e]=Math.round(r[e]);return r};return"conversion"in n&&(e.conversion=n.conversion),e}(r),a[n][t].raw=function(n){const e=function(...e){const t=e[0];return null==t?t:(t.length>1&&(e=t),n(e))};return"conversion"in n&&(e.conversion=n.conversion),e}(r)})}),n.exports=a},function(n,e,t){"use strict";n.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(n,e,t){const r=t(0);function o(n){const e=function(){const n={},e=Object.keys(r);for(let t=e.length,r=0;r<t;r++)n[e[r]]={distance:-1,parent:null};return n}(),t=[n];for(e[n].distance=0;t.length;){const n=t.pop(),o=Object.keys(r[n]);for(let r=o.length,a=0;a<r;a++){const r=o[a],i=e[r];-1===i.distance&&(i.distance=e[n].distance+1,i.parent=n,t.unshift(r))}}return e}function a(n,e){return function(t){return e(n(t))}}function i(n,e){const t=[e[n].parent,n];let o=r[e[n].parent][n],i=e[n].parent;for(;e[i].parent;)t.unshift(e[i].parent),o=a(r[e[i].parent][i],o),i=e[i].parent;return o.conversion=t,o}n.exports=function(n){const e=o(n),t={},r=Object.keys(e);for(let n=r.length,o=0;o<n;o++){const n=r[o];null!==e[n].parent&&(t[n]=i(n,e))}return t}},function(n,e,t){var r=t(9),o=t(10);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[n.i,o,""]]);var a={insert:"head",singleton:!1};r(o,a);n.exports=o.locals||{}},function(n,e,t){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var n={};return function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[e]=t}return n[e]}}(),i=[];function l(n){for(var e=-1,t=0;t<i.length;t++)if(i[t].identifier===n){e=t;break}return e}function c(n,e){for(var t={},r=[],o=0;o<n.length;o++){var a=n[o],c=e.base?a[0]+e.base:a[0],s=t[c]||0,u="".concat(c," ").concat(s);t[c]=s+1;var d=l(u),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(i[d].references++,i[d].updater(f)):i.push({identifier:u,updater:g(f,e),references:1}),r.push(u)}return r}function s(n){var e=document.createElement("style"),r=n.attributes||{};if(void 0===r.nonce){var o=t.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(n){e.setAttribute(n,r[n])})),"function"==typeof n.insert)n.insert(e);else{var i=a(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}return e}var u,d=(u=[],function(n,e){return u[n]=e,u.filter(Boolean).join("\n")});function f(n,e,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(n.styleSheet)n.styleSheet.cssText=d(e,o);else{var a=document.createTextNode(o),i=n.childNodes;i[e]&&n.removeChild(i[e]),i.length?n.insertBefore(a,i[e]):n.appendChild(a)}}function h(n,e,t){var r=t.css,o=t.media,a=t.sourceMap;if(o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}var b=null,p=0;function g(n,e){var t,r,o;if(e.singleton){var a=p++;t=b||(b=s(e)),r=f.bind(null,t,a,!1),o=f.bind(null,t,a,!0)}else t=s(e),r=h.bind(null,t,e),o=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=o());var t=c(n=n||[],e);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var r=0;r<t.length;r++){var o=l(t[r]);i[o].references--}for(var a=c(n,e),s=0;s<t.length;s++){var u=l(t[s]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}t=a}}}},function(n,e,t){var r=t(11),o=t(12),a=t(13);e=r(!1);var i=o(a);e.push([n.i,'html,\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: "Arial", "Helvetica", sans-serif;\n  width: 100%;\n  background: #000;\n  overflow-y: hidden;\n}\n\ncanvas {\n  margin: 0;\n  display: none;\n}\n\nbody {\n  height: 100vh;\n  display: flex;\n}\n\n#model {\n  display: flex;\n  flex-direction: column;\n  flex-shrink: 0;\n  width: 340px;\n  height: 100%;\n  background: #ffffff;\n}\n\n.render {\n  width: calc(100% - 300px);\n  height: 100%;\n}\n\n.render img {\n  object-fit: contain;\n  width: 100%;\n  height: 100%;\n}\n\n.group {\n  margin: 0 20px 20px 20px;\n  display: flex;\n  flex-direction: column;\n}\n\n.group:first-child {\n  margin-top: 20px;\n}\n\n.options {\n  display: flex;\n  flex-direction: row;\n  background: #ddd;\n  padding: 20px;\n}\n\ninput[type="radio"],\ninput[type="checkbox"] {\n  display: none;\n}\n\nbutton,\ninput[type="radio"] + label,\ninput[type="checkbox"] + label {\n  border-radius: 3px;\n  border-style: solid;\n  border-width: 1px;\n  border-color: black;\n}\n\ninput[type="radio"]:disabled + label,\ninput[type="checkbox"]:disabled + label {\n  display: none;\n}\n\nbutton,\nlabel,\na.home,\na.sourceCode {\n  display: inline-block;\n  cursor: pointer;\n  outline: 0;\n  width: 32px;\n  height: 32px;\n  text-indent: -99999px;\n  background-image: url('+i+');\n  background-repeat: no-repeat;\n}\n\n#run {\n  width: 34px;\n  height: 34px;\n  background-position: -384px 0;\n}\n\n.rgb label[for="first"] {\n  background-position: 0 0;\n}\n\n.rgb label[for="second"] {\n  background-position: -32px 0;\n}\n\n.rgb label[for="third"] {\n  background-position: -64px 0;\n}\n\n.hsv label[for="first"] {\n  background-position: 0 -32px;\n}\n\n.hsv label[for="second"] {\n  background-position: -32px -32px;\n}\n\n.hsv label[for="third"] {\n  background-position: -64px -32px;\n}\n\nlabel[for="first"],\nlabel[for="second"],\nlabel[for="third"] {\n  text-indent: 40px;\n  line-height: 32px;\n}\n\nlabel[for="colourMode"] {\n  background-position: -96px 0;\n  margin-right: 4px;\n}\n\nlabel[for="imageSize"] {\n  background-position: -128px 0;\n  margin-right: 4px;\n}\n\nlabel[for="firstNone"],\nlabel[for="secondNone"],\nlabel[for="thirdNone"] {\n  background-position: -160px 0;\n}\n\nlabel[for="firstZeroOne"],\nlabel[for="secondZeroOne"],\nlabel[for="thirdZeroOne"] {\n  background-position: -192px 0;\n}\n\nlabel[for="firstMinusPlusOne"],\nlabel[for="secondMinusPlusOne"],\nlabel[for="thirdMinusPlusOne"] {\n  background-position: -224px 0;\n  margin-right: 32px;\n}\n\nlabel[for="firstMinMax"],\nlabel[for="secondMinMax"],\nlabel[for="thirdMinMax"] {\n  background-position: -256px 0;\n}\n\nlabel[for="firstLimit"],\nlabel[for="secondLimit"],\nlabel[for="thirdLimit"] {\n  background-position: -288px 0;\n}\n\nlabel[for="firstWrap"],\nlabel[for="secondWrap"],\nlabel[for="thirdWrap"] {\n  background-position: -320px 0;\n}\n\nlabel[for="firstReflect"],\nlabel[for="secondReflect"],\nlabel[for="thirdReflect"] {\n  background-position: -352px 0;\n}\n\ninput[type="radio"]:checked + label,\ninput[type="checkbox"]:checked + label {\n  background-position-y: -32px;\n}\n\na.home {\n  background-position: -416px -32px;\n  position: relative;\n  left: 118px;\n}\n\na.sourceCode {\n  background-position: -416px 0;\n  position: relative;\n  left: 122px;\n}\n\n@media only screen and (max-width: 768px) {\n  body {\n    justify-content: center;\n  }\n\n  .generated #model {\n    display: none;\n  }\n\n  .render {\n    display: none;\n  }\n\n  .generated .render {\n    width: 100%;\n    display: block;\n  }\n}\n',""]),n.exports=e},function(n,e,t){"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=function(n,e){var t=n[1]||"",r=n[3];if(!r)return t;if(e&&"function"==typeof btoa){var o=(i=r,l=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(c," */")),a=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[t].concat(a).concat([o]).join("\n")}var i,l,c;return[t].join("\n")}(e,n);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);r&&o[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),e.push(c))}},e}},function(n,e,t){"use strict";n.exports=function(n,e){return e||(e={}),"string"!=typeof(n=n&&n.__esModule?n.default:n)?n:(/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n)}},function(n,e,t){"use strict";t.r(e),e.default=t.p+"14e7fbdcef06ee42dd60ed794db512c1.png"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,