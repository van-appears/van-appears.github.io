!function(n){var o={};function t(e){if(o[e])return o[e].exports;var r=o[e]={i:e,l:!1,exports:{}};return n[e].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=n,t.c=o,t.d=function(n,o,e){t.o(n,o)||Object.defineProperty(n,o,{enumerable:!0,get:e})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,o){if(1&o&&(n=t(n)),8&o)return n;if(4&o&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(t.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&o&&"string"!=typeof n)for(var r in n)t.d(e,r,function(o){return n[o]}.bind(null,r));return e},t.n=function(n){var o=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(o,"a",o),o},t.o=function(n,o){return Object.prototype.hasOwnProperty.call(n,o)},t.p="",t(t.s=2)}([function(n,o){n.exports={rows:3,columns:3,total:9,width:300,height:300,lowFreq:80,asIndex:(n,o)=>3*n+o,asRowCol:n=>({row:Math.floor(n/3),col:n%3})}},function(n,o,t){const{width:e,height:r}=t(0);n.exports=function(n){const o=document.querySelector(n);return o.width=e,o.height=r,o.getContext("2d")}},function(n,o,t){"use strict";t.r(o);t(3),t(15)},function(n,o,t){const e=t(4),r=t(5),a=t(6),i=t(8),l=t(10),c=t(11),{avgColour:s,centreColour:u}=t(12);window.onload=function(){r((function(n,o){if(n)document.querySelector(".info").innerHTML="Failed to connect to camera: "+n.message;else{document.body.className="started";const n=a(),t=e(n),r=i("#copy",o),f=l("#target"),p=c(t,n);t.start(),setInterval((function(){const o="centre"===n.collator?u:s,t=r(o);f(t),p(t)}),100)}}))}},function(n,o,t){const{rows:e,columns:r,total:a,asIndex:i}=t(0);n.exports=function(n){const o=new(window.AudioContext||window.webkitAudioContext),t=new Array(a),l=new Array(a),c=new Array(a);for(let n=0;n<a;n++)c[n]=o.createGain(),l[n]=o.createBiquadFilter(),l[n].connect(c[n]),t[n]=o.createOscillator(),t[n].connect(l[n]);function s(){for(let n=0;n<a;n++)c[n].connect(o.destination),c[n].gain.value=1/a}function u(n){for(let t=0;t<e;t++){c[i(t,0)].gain.value=1/e;for(let e=1;e<r;e++){const r=c[i(t,e)],a=c[i(t,e-1)];a.disconnect(n?o.destination:r.gain),a.connect(n?r.gain:o.destination)}}}function f(n){for(let t=0;t<r;t++){c[i(0,t)].gain.value=1/r;for(let r=1;r<e;r++){const e=c[i(r,t)],a=c[i(r-1,t)];a.disconnect(n?o.destination:e.gain),a.connect(n?e.gain:o.destination)}}}let p=s;return p(!0),n.listen(({field:n,value:o})=>{"oscillatorType"===n?t.forEach(n=>{n.type=o}):"filterType"===n?l.forEach(n=>{n.type=o}):"ringMod"===n&&(p(!1),"off"===o?p=s:"horizontal"===o?p=u:"vertical"===o&&(p=f),p(!0))}),{audioCtx:o,oscillators:t,filters:l,gains:c,start:function(){t.forEach((function(n){n.start()}))}}}},function(n,o,t){const{width:e,height:r}=t(0);n.exports=function(n){const o={audio:!1,video:{width:{ideal:e},height:{ideal:r}}};navigator.mediaDevices?navigator.mediaDevices.getUserMedia(o).then((function(o){const t=document.querySelector("#video");t.srcObject=o,t.onloadedmetadata=function(){t.play(),t.muted=!0,n(null,t)}})).catch((function(o){n(o)})):n(new Error("navigator.mediaDevices not supported"))}},function(n,o,t){const e=t(7);function r(n){const o=document.querySelectorAll(`input[name="${n}"]`),t=function(o){e.store(n,o.target.value)};for(let n=0;n<o.length;n++)o[n].onclick=t;o[0].click()}function a(n,o){const t=document.querySelector("#"+n);let r=o.findIndex(n=>n===t.value)-1;t.onclick=function(){r=(r+1)%o.length,e.store(n,o[r]),t.value=o[r]},t.click()}n.exports=function(){r("oscillatorType"),r("filterType");const n=["r","g","b","h","s","v"];a("oscillatorColour",n),a("filterColour",n),a("resonanceColour",n);a("collator",["avg","centre"]);a("ringMod",["off","horizontal","vertical"]);const o=["off","on"];return a("pitchRow",o),a("connected",o),e}},function(n,o){const t=[];n.exports={store(n,o){this[n]=o,t.forEach(t=>t({field:n,value:o}))},listen(n){t.push(n)}}},function(n,o,t){const{rows:e,columns:r,total:a,width:i,height:l,asIndex:c}=t(0),s=t(1),u=t(9);n.exports=function(n,o){const t=s(n),f=i/r,p=l/e;return n=>{t.drawImage(o,0,0,i,l);const s=new Array(a);for(let o=0;o<e;o++)for(let e=0;e<r;e++){const a=(r-1-e)*f,i=o*p,l=n(t.getImageData(a,i,f,p)),{r:d,g:b,b:h}=l,{h:g,s:v,v:x}=u.rgbToHsv(l);s[c(o,e)]={rgb:`rgb(${Math.floor(d)},${Math.floor(b)},${Math.floor(h)})`,r:d/255,g:b/255,b:h/255,h:g/360,s:v/100,v:x/100}}return s}}},function(n,o){var t=n.exports={};function e(n){return(n%360+360)%360}function r(n,o,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?n+6*(o-n)*t:t<.5?o:t<2/3?n+(o-n)*(2/3-t)*6:n}t.rgb2Hsl=function(n,o,t){if("object"==typeof n){const e=n;n=e.r,o=e.g,t=e.b}n=255===n?1:n%255/parseFloat(255),o=255===o?1:o%255/parseFloat(255),t=255===t?1:t%255/parseFloat(255);var e,r,a=Math.max(n,o,t),i=Math.min(n,o,t),l=(a+i)/2;if(a===i)e=r=0;else{var c=a-i;switch(r=l>.5?c/(2-a-i):c/(a+i),a){case n:e=(o-t)/c+(o<t?6:0);break;case o:e=(t-n)/c+2;break;case t:e=(n-o)/c+4}e/=6}return{h:Math.round(360*e),s:Math.round(100*r),l:Math.round(100*l)}},t.rgb_to_hsl=t.rgbToHsl=t.rgb2Hsl,t.rgb2Hsv=function(n,o,t){if("object"==typeof n){const e=n;n=e.r,o=e.g,t=e.b}n=255===n?1:n%255/parseFloat(255),o=255===o?1:o%255/parseFloat(255),t=255===t?1:t%255/parseFloat(255);var e,r,a=Math.max(n,o,t),i=Math.min(n,o,t),l=a,c=a-i;if(r=0===a?0:c/a,a===i)e=0;else{switch(a){case n:e=(o-t)/c+(o<t?6:0);break;case o:e=(t-n)/c+2;break;case t:e=(n-o)/c+4}e/=6}return{h:Math.round(360*e),s:Math.round(100*r),v:Math.round(100*l)}},t.rgb_to_hsv=t.rgbToHsv=t.rgb2Hsv,t.hsl2Rgb=function(n,o,t){if("object"==typeof n){const e=n;n=e.h,o=e.s,t=e.l}var a,i,l;if(n=360===(n=e(n))?1:n%360/parseFloat(360),o=100===o?1:o%100/parseFloat(100),t=100===t?1:t%100/parseFloat(100),0===o)a=i=l=t;else{var c=t<.5?t*(1+o):t+o-t*o,s=2*t-c;a=r(s,c,n+1/3),i=r(s,c,n),l=r(s,c,n-1/3)}return{r:Math.round(255*a),g:Math.round(255*i),b:Math.round(255*l)}},t.hsl_to_rgb=t.hslToRgb=t.hsl2Rgb,t.hsv2Rgb=function(n,o,t){if("object"==typeof n){const e=n;n=e.h,o=e.s,t=e.v}n=360===(n=e(n))?1:n%360/parseFloat(360)*6,o=100===o?1:o%100/parseFloat(100),t=100===t?1:t%100/parseFloat(100);var r=Math.floor(n),a=n-r,i=t*(1-o),l=t*(1-a*o),c=t*(1-(1-a)*o),s=r%6,u=[t,l,i,i,c,t][s],f=[c,t,t,l,i,i][s],p=[i,i,c,t,t,l][s];return{r:Math.floor(255*u),g:Math.floor(255*f),b:Math.floor(255*p)}},t.hsv_to_rgb=t.hsv2Rgb,t.hsvToRgb=t.hsv2Rgb,t.rgb2Hex=function(n,o,t){if("object"==typeof n){const e=n;n=e.r,o=e.g,t=e.b}return n=Math.round(n).toString(16),o=Math.round(o).toString(16),t=Math.round(t).toString(16),"#"+(n=1===n.length?"0"+n:n)+(o=1===o.length?"0"+o:o)+(t=1===t.length?"0"+t:t)},t.rgb_to_hex=t.rgbToHex=t.rgb2Hex,t.hex2Rgb=function(n){var o=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(n);return o?{r:parseInt(o[1],16),g:parseInt(o[2],16),b:parseInt(o[3],16)}:null},t.hex_to_rgb=t.hexToRgb=t.hex2Rgb,t.hsv2Hex=function(n,o,e){var r=t.hsv2Rgb(n,o,e);return t.rgb2Hex(r.r,r.g,r.b)},t.hsv_to_hex=t.hsv2Hex,t.hsvToHex=t.hsv2Hex,t.hex2Hsv=function(n){var o=t.hex2Rgb(n);return t.rgb2Hsv(o.r,o.g,o.b)},t.hex_to_hsv=t.hexToHsv=t.hex2Hsv,t.hsl2Hex=function(n,o,e){var r=t.hsl2Rgb(n,o,e);return t.rgb2Hex(r.r,r.g,r.b)},t.hsl_to_hex=t.hslToHex=t.hsl2Hex,t.hex2Hsl=function(n){var o=t.hex2Rgb(n);return t.rgb2Hsl(o.r,o.g,o.b)},t.hex_to_hsl=t.hexToHsl=t.hex2Hsl,t.rgb2Cmyk=function(n,o,t){if("object"==typeof n){const e=n;n=e.r,o=e.g,t=e.b}var e=n/255,r=o/255,a=t/255,i=1-Math.max(e,r,a),l=(1-r-i)/(1-i),c=(1-a-i)/(1-i);return{c:((1-e-i)/(1-i)).toFixed(3),m:l.toFixed(3),y:c.toFixed(3),k:i.toFixed(3)}},t.rgb_to_cmyk=t.rgbToCmyk=t.rgb2Cmyk,t.cmyk2Rgb=function(n,o,t,e){if("object"==typeof n){const r=n;n=r.c,o=r.m,t=r.y,e=r.k}var r=255*(1-n)*(1-e),a=255*(1-o)*(1-e),i=255*(1-t)*(1-e);return{r:Math.floor(r),g:Math.floor(a),b:Math.floor(i)}},t.cmyk_to_rgb=t.cmykToRgb=t.cmyk2Rgb,t.hsv2Hsl=function(n,o,t){if("object"==typeof n){const e=n;n=e.h,o=e.s,t=e.v}var e=(2-o)*t/2;return 0!==e&&(o=100===e?0:e<50?o*t/(2*e):o*t/(2-2*e)),{h:n,s:o,l:e}},t.hsv_to_hsl=t.hsvToHsl=t.hsv2Hsl,t.hsl2Hsv=function(n,o,t){if("object"==typeof n){const e=n;n=e.h,o=e.s,t=e.l}return o*=t<50?t:100-t,{h:n,s:Math.floor(2*o/(t+o)),v:Math.floor(t+o)}},t.hsl_to_hsv=t.hslToHsv=t.hsl2Hsv,t.parseCss=function(n){if(n.indexOf("#")>-1)return t.hex2Rgb(n);const o=n.split("(")[0],e=n.split("(")[1].split(")")[0].split(",");return o.split("").reduce((function(n,o,t){const r=n;return r[o]=parseFloat(e[t]),r}),{})},t.parse_css=t.parseCss,t.stringify=function(n){return Object.keys(n).join("")+"("+Object.keys(n).map((function(o){var t=n[o];return"s"!==o&&"v"!==o&&"l"!==o||(t+="%"),t})).join(", ")+")"},t.hex_to_decimal=t.hexToDecimal=t.hex2Decimal,t.hex2Decimal=function(n){if("string"==typeof n)return parseInt(n.replace("#",""),16)},t.decimal_to_hex=t.decimalToHex=t.decimal2Hex,t.decimal2Hex=function(n){return"string"==typeof n?"#"+parseInt(n).toString(16):"#"+n.toString(16)},t.random=function(){return"#"+("000000"+Math.floor(16777215*Math.random()).toString(16)).substr(-6)},t.rotateHue=function(n,o){void 0===o&&(o=0);const t="object"==typeof n?(n.h+o)%360:(n+o)%360,e=t<0?360+t:t;return"object"==typeof n?Object.assign(n,{h:e}):e},t.getColorEncoding=function(n){if("string"==typeof n)try{return t.hex2Rgb(n),"hex"}catch(n){}if("object"!=typeof n)return"unknown";const o=n;return o.r+o.g+o.b&&"number"==typeof(o.r+o.g+o.b)?"rgb":o.h+o.s+o.v&&"number"==typeof(o.h+o.s+o.v)?"hsv":o.h+o.s+o.l&&"number"==typeof(o.h+o.s+o.l)?"hsl":o.c+o.m+o.y+o.k&&"number"==typeof(o.c+o.m+o.y+o.k)?"cmyk":"unknown"},t.any2Hsl=function(n){switch(t.getColorEncoding(n)){case"hsl":return n;case"rgb":return t.rgb2Hsl(n);case"hex":return t.hex2Hsl(n);case"hsv":return t.hsv2Hsl(n);case"cmyk":return t.rgb2Hsl(t.cmyk2Rgb(n));default:return"unknown"}},t.any_to_hsl=t.anyToHsl=t.any2Hsl,t.getTransformEncodingFunction=function(n,o){const e=t.getColorEncoding(n);return t[e+"_to_"+o]},t.darken=function(n,o){const e=t.getColorEncoding(n);if("unknown"===e)return n;if("cmyk"===e){const t=n;return t.k=Math.min(100,100*o+t.k),t}const r=t.any2Hsl(n),a={h:r.h,s:r.s,l:Math.round(r.l*(1-o))},i="hsl"===e?n=>n:t.getTransformEncodingFunction(a,e);return"function"!=typeof i?n:i(a)}},function(n,o,t){const{rows:e,columns:r,width:a,height:i,asIndex:l}=t(0),c=t(1);n.exports=function(n){const o=c(n),t=a/r,s=i/e;return n=>{for(let a=0;a<e;a++)for(let e=0;e<r;e++){const r=e*t,i=a*s,c=n[l(a,e)],{rgb:u}=c;o.fillStyle=u,o.fillRect(r,i,t,s),o.fill()}}}},function(n,o,t){const{rows:e,columns:r,asIndex:a,total:i,lowFreq:l}=t(0);function c(n,o=1){return Math.pow(Math.pow(2,o),n)}function s(n,o){return l*(o?Math.pow(2,o)*c(n,1):c(n,e))}function u(n){return 500*c(n)}function f(n){return.5+n/2}function p(n){return 1+(n-.5)/5}n.exports=function(n,o){const{audioCtx:t,oscillators:i,filters:l}=n;return n=>{for(let c=0;c<e;c++)for(let e=0;e<r;e++){const d=a(c,e),b=n[d];let h;if("on"===o.connected){const t="on"===o.pitchRow?a(c,Math.floor(r/2)):a(Math.floor(c/2),Math.floor(r/2)),e=s(n[t][o.oscillatorColour],"on"===o.pitchRow?c:null);h=t===d?e:e*p(b[o.oscillatorColour])}else h=s(b[o.oscillatorColour],"on"===o.pitchRow?c:null);i[d].frequency.setTargetAtTime(h,t.currentTime,.1),l[d].frequency.setTargetAtTime(u(b[o.filterColour]),t.currentTime,.1),l[d].Q.setTargetAtTime(f(b[o.resonanceColour]),t.currentTime,.1)}}}},function(n,o,t){n.exports={avgColour:t(13),centreColour:t(14)}},function(n,o){n.exports=function(n){const o=n.data.length,t=o/4;let e=0,r=0,a=0,i=0;for(;e<o;)r+=n.data[e],a+=n.data[e+1],i+=n.data[e+2],e+=4;return{r:r/t,g:a/t,b:i/t}}},function(n,o){n.exports=function(n){const o=n.data.length,t=4*Math.floor(o/4/2);return{r:n.data[t],g:n.data[t+1],b:n.data[t+2]}}},function(n,o,t){var e=t(16),r=t(17);"string"==typeof(r=r.__esModule?r.default:r)&&(r=[[n.i,r,""]]);var a={insert:"head",singleton:!1};e(r,a);n.exports=r.locals||{}},function(n,o,t){"use strict";var e,r=function(){return void 0===e&&(e=Boolean(window&&document&&document.all&&!window.atob)),e},a=function(){var n={};return function(o){if(void 0===n[o]){var t=document.querySelector(o);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}n[o]=t}return n[o]}}(),i=[];function l(n){for(var o=-1,t=0;t<i.length;t++)if(i[t].identifier===n){o=t;break}return o}function c(n,o){for(var t={},e=[],r=0;r<n.length;r++){var a=n[r],c=o.base?a[0]+o.base:a[0],s=t[c]||0,u="".concat(c," ").concat(s);t[c]=s+1;var f=l(u),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==f?(i[f].references++,i[f].updater(p)):i.push({identifier:u,updater:g(p,o),references:1}),e.push(u)}return e}function s(n){var o=document.createElement("style"),e=n.attributes||{};if(void 0===e.nonce){var r=t.nc;r&&(e.nonce=r)}if(Object.keys(e).forEach((function(n){o.setAttribute(n,e[n])})),"function"==typeof n.insert)n.insert(o);else{var i=a(n.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(o)}return o}var u,f=(u=[],function(n,o){return u[n]=o,u.filter(Boolean).join("\n")});function p(n,o,t,e){var r=t?"":e.media?"@media ".concat(e.media," {").concat(e.css,"}"):e.css;if(n.styleSheet)n.styleSheet.cssText=f(o,r);else{var a=document.createTextNode(r),i=n.childNodes;i[o]&&n.removeChild(i[o]),i.length?n.insertBefore(a,i[o]):n.appendChild(a)}}function d(n,o,t){var e=t.css,r=t.media,a=t.sourceMap;if(r?n.setAttribute("media",r):n.removeAttribute("media"),a&&btoa&&(e+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}var b=null,h=0;function g(n,o){var t,e,r;if(o.singleton){var a=h++;t=b||(b=s(o)),e=p.bind(null,t,a,!1),r=p.bind(null,t,a,!0)}else t=s(o),e=d.bind(null,t,o),r=function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)};return e(n),function(o){if(o){if(o.css===n.css&&o.media===n.media&&o.sourceMap===n.sourceMap)return;e(n=o)}else r()}}n.exports=function(n,o){(o=o||{}).singleton||"boolean"==typeof o.singleton||(o.singleton=r());var t=c(n=n||[],o);return function(n){if(n=n||[],"[object Array]"===Object.prototype.toString.call(n)){for(var e=0;e<t.length;e++){var r=l(t[e]);i[r].references--}for(var a=c(n,o),s=0;s<t.length;s++){var u=l(t[s]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}t=a}}}},function(n,o,t){var e=t(18),r=t(19),a=t(20);o=e(!1);var i=r(a);o.push([n.i,'html,\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: "Arial", "Helvetica", sans-serif;\n  height: 100%;\n  width: 100%;\n  background: #ddd;\n  overflow-y: hidden;\n}\n\nbody {\n  text-align: center;\n}\n\n#video,\n#copy {\n  display: none;\n}\n\n#target {\n  margin: 0;\n  border: none;\n  display: inline;\n}\n\n.controls,\n.started .info,\nbutton,\ninput[type="radio"] {\n  display: none;\n}\n\n.started .controls {\n  display: inline;\n}\n\n.wrapper {\n  display: inline-block;\n  background: #ffffff;\n  width: 300px;\n  padding: 20px;\n}\n\nbutton + label,\ninput[type="radio"] + label {\n  border-radius: 3px;\n  border-style: solid;\n  border-width: 1px;\n  border-color: black;\n}\n\nlabel,\na.home,\na.sourceCode {\n  display: inline-block;\n  cursor: pointer;\n  outline: 0;\n  width: 32px;\n  height: 32px;\n  text-indent: -99999px;\n  background-image: url('+i+');\n  background-repeat: no-repeat;\n}\n\na.home {\n  background-position: -736px -32px;\n  position: relative;\n  left: -70px;\n  bottom: -58px;\n}\n\na.sourceCode {\n  background-position: -736px 0;\n  position: relative;\n  left: -70px;\n  bottom: -58px;\n}\n\n#oscillatorColour[value="r"] + label {\n  background-position: 0 0;\n}\n\n#oscillatorColour[value="g"] + label {\n  background-position: -32px 0;\n}\n\n#oscillatorColour[value="b"] + label {\n  background-position: -64px 0;\n}\n\n#oscillatorColour[value="h"] + label {\n  background-position: -96px 0;\n}\n\n#oscillatorColour[value="s"] + label {\n  background-position: -128px 0;\n}\n\n#oscillatorColour[value="v"] + label {\n  background-position: -160px 0;\n}\n\n#filterColour[value="r"] + label {\n  background-position: 0 -32px;\n}\n\n#filterColour[value="g"] + label {\n  background-position: -32px -32px;\n}\n\n#filterColour[value="b"] + label {\n  background-position: -64px -32px;\n}\n\n#filterColour[value="h"] + label {\n  background-position: -96px -32px;\n}\n\n#filterColour[value="s"] + label {\n  background-position: -128px -32px;\n}\n\n#filterColour[value="v"] + label {\n  background-position: -160px -32px;\n}\n\n#resonanceColour[value="r"] + label {\n  background-position: -192px 0;\n}\n\n#resonanceColour[value="g"] + label {\n  background-position: -224px 0;\n}\n\n#resonanceColour[value="b"] + label {\n  background-position: -256px 0;\n}\n\n#resonanceColour[value="h"] + label {\n  background-position: -288px 0;\n}\n\n#resonanceColour[value="s"] + label {\n  background-position: -320px 0;\n}\n\n#resonanceColour[value="v"] + label {\n  background-position: -352px 0;\n}\n\n#ringMod[value="off"] + label {\n  background-position: -192px -32px;\n}\n\n#ringMod[value="horizontal"] + label {\n  background-position: -224px -32px;\n}\n\n#ringMod[value="vertical"] + label {\n  background-position: -256px -32px;\n}\n\n#collator[value="avg"] + label {\n  background-position: -672px 0;\n}\n\n#collator[value="centre"] + label {\n  background-position: -672px -32px;\n}\n\n#pitchRow[value="off"] + label {\n  background-position: -704px 0;\n}\n\n#pitchRow[value="on"] + label {\n  background-position: -704px -32px;\n}\n\n#connected[value="off"] + label {\n  background-position: -640px 0;\n}\n\n#connected[value="on"] + label {\n  background-position: -640px -32px;\n}\n\nlabel[for="filter"] {\n  background-position: 0 -32px;\n}\n\nlabel[for="resonance"] {\n  background-position: -96px 0;\n}\n\nlabel[for="offRingMod"] {\n  background-position: -96px 0;\n}\n\nlabel[for="horizontalRingMod"] {\n  background-position: -96px 0;\n}\n\nlabel[for="verticalRingMod"] {\n  background-position: -96px 0;\n}\n\nlabel[for="collator"] {\n  background-position: -96px 0;\n}\n\nlabel[for="pitchRow"] {\n  background-position: -96px 0;\n}\n\nlabel[for="connected"] {\n  background-position: -96px 0;\n}\n\nlabel[for="sine"] {\n  background-position: -384px 0;\n}\n\nlabel[for="sawtooth"] {\n  background-position: -416px 0;\n}\n\nlabel[for="triangle"] {\n  background-position: -448px 0;\n}\n\nlabel[for="square"] {\n  background-position: -480px 0;\n}\n\nlabel[for="allpass"] {\n  background-position: -512px 0;\n}\n\nlabel[for="highpass"] {\n  background-position: -544px 0;\n}\n\nlabel[for="lowpass"] {\n  background-position: -576px 0;\n}\n\nlabel[for="bandpass"] {\n  background-position: -608px 0;\n}\n\ninput[type="radio"]:checked + label {\n  background-position-y: -32px;\n}\n',""]),n.exports=o},function(n,o,t){"use strict";n.exports=function(n){var o=[];return o.toString=function(){return this.map((function(o){var t=function(n,o){var t=n[1]||"",e=n[3];if(!e)return t;if(o&&"function"==typeof btoa){var r=(i=e,l=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(c," */")),a=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(a).concat([r]).join("\n")}var i,l,c;return[t].join("\n")}(o,n);return o[2]?"@media ".concat(o[2]," {").concat(t,"}"):t})).join("")},o.i=function(n,t,e){"string"==typeof n&&(n=[[null,n,""]]);var r={};if(e)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(r[i]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);e&&r[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),o.push(c))}},o}},function(n,o,t){"use strict";n.exports=function(n,o){return o||(o={}),"string"!=typeof(n=n&&n.__esModule?n.default:n)?n:(/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),o.hash&&(n+=o.hash),/["'() \t\n]/.test(n)||o.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n)}},function(n,o,t){"use strict";t.r(o),o.default=t.p+"c63d7fab8693442300178f68c9816368.png"}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,